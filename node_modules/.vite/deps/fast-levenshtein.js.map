{
  "version": 3,
  "sources": ["../../fastest-levenshtein/esm/mod.js", "../../fast-levenshtein/levenshtein.js"],
  "sourcesContent": ["const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n", "(function() {\n  'use strict';\n  \n  var collator;\n  try {\n    collator = (typeof Intl !== \"undefined\" && typeof Intl.Collator !== \"undefined\") ? Intl.Collator(\"generic\", { sensitivity: \"base\" }) : null;\n  } catch (err){\n    console.log(\"Collator could not be initialized and wouldn't be used\");\n  }\n\n  var levenshtein = require('fastest-levenshtein');\n\n  // arrays to re-use\n  var prevRow = [],\n    str2Char = [];\n  \n  /**\n   * Based on the algorithm at http://en.wikipedia.org/wiki/Levenshtein_distance.\n   */\n  var Levenshtein = {\n    /**\n     * Calculate levenshtein distance of the two strings.\n     *\n     * @param str1 String the first string.\n     * @param str2 String the second string.\n     * @param [options] Additional options.\n     * @param [options.useCollator] Use `Intl.Collator` for locale-sensitive string comparison.\n     * @return Integer the levenshtein distance (0 and above).\n     */\n    get: function(str1, str2, options) {\n      var useCollator = (options && collator && options.useCollator);\n      \n      if (useCollator) {\n        var str1Len = str1.length,\n          str2Len = str2.length;\n        \n        // base cases\n        if (str1Len === 0) return str2Len;\n        if (str2Len === 0) return str1Len;\n\n        // two rows\n        var curCol, nextCol, i, j, tmp;\n\n        // initialise previous row\n        for (i=0; i<str2Len; ++i) {\n          prevRow[i] = i;\n          str2Char[i] = str2.charCodeAt(i);\n        }\n        prevRow[str2Len] = str2Len;\n\n        var strCmp;\n        // calculate current row distance from previous row using collator\n        for (i = 0; i < str1Len; ++i) {\n          nextCol = i + 1;\n\n          for (j = 0; j < str2Len; ++j) {\n            curCol = nextCol;\n\n            // substution\n            strCmp = 0 === collator.compare(str1.charAt(i), String.fromCharCode(str2Char[j]));\n\n            nextCol = prevRow[j] + (strCmp ? 0 : 1);\n\n            // insertion\n            tmp = curCol + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n            // deletion\n            tmp = prevRow[j + 1] + 1;\n            if (nextCol > tmp) {\n              nextCol = tmp;\n            }\n\n            // copy current col value into previous (in preparation for next iteration)\n            prevRow[j] = curCol;\n          }\n\n          // copy last col value into previous (in preparation for next iteration)\n          prevRow[j] = nextCol;\n        }\n        return nextCol;\n      }\n      return levenshtein.distance(str1, str2);\n    }\n\n  };\n\n  // amd\n  if (typeof define !== \"undefined\" && define !== null && define.amd) {\n    define(function() {\n      return Levenshtein;\n    });\n  }\n  // commonjs\n  else if (typeof module !== \"undefined\" && module !== null && typeof exports !== \"undefined\" && module.exports === exports) {\n    module.exports = Levenshtein;\n  }\n  // web worker\n  else if (typeof self !== \"undefined\" && typeof self.postMessage === 'function' && typeof self.importScripts === 'function') {\n    self.Levenshtein = Levenshtein;\n  }\n  // browser main thread\n  else if (typeof window !== \"undefined\" && window !== null) {\n    window.Levenshtein = Levenshtein;\n  }\n}());\n"],
  "mappings": "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",
  "names": ["mv", "pv", "start", "vlen"]
}
