import {
  createPopper,
  init_lib,
  lib_exports
} from "./chunk-PQLOBB4H.js";
import {
  Fragment,
  Teleport,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  defineComponent,
  getCurrentInstance,
  getCurrentScope,
  guardReactiveProps,
  h,
  inject,
  isReactive,
  isRef,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onActivated,
  onBeforeUnmount,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  provide,
  reactive,
  readonly,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  shallowRef,
  toDisplayString,
  toRef,
  unref,
  useAttrs,
  useSlots,
  vModelCheckbox,
  vModelRadio,
  vModelSelect,
  vShow,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers
} from "./chunk-3NMN3MUW.js";
import "./chunk-OL3AADLO.js";

// node_modules/bootstrap/dist/js/bootstrap.esm.js
init_lib();
var MAX_UID = 1e6;
var MILLISECONDS_MULTIPLIER = 1e3;
var TRANSITION_END = "transitionend";
var toType = (object) => {
  if (object === null || object === void 0) {
    return `${object}`;
  }
  return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
};
var getUID = (prefix) => {
  do {
    prefix += Math.floor(Math.random() * MAX_UID);
  } while (document.getElementById(prefix));
  return prefix;
};
var getSelector = (element) => {
  let selector = element.getAttribute("data-bs-target");
  if (!selector || selector === "#") {
    let hrefAttribute = element.getAttribute("href");
    if (!hrefAttribute || !hrefAttribute.includes("#") && !hrefAttribute.startsWith(".")) {
      return null;
    }
    if (hrefAttribute.includes("#") && !hrefAttribute.startsWith("#")) {
      hrefAttribute = `#${hrefAttribute.split("#")[1]}`;
    }
    selector = hrefAttribute && hrefAttribute !== "#" ? hrefAttribute.trim() : null;
  }
  return selector;
};
var getSelectorFromElement = (element) => {
  const selector = getSelector(element);
  if (selector) {
    return document.querySelector(selector) ? selector : null;
  }
  return null;
};
var getElementFromSelector = (element) => {
  const selector = getSelector(element);
  return selector ? document.querySelector(selector) : null;
};
var getTransitionDurationFromElement = (element) => {
  if (!element) {
    return 0;
  }
  let {
    transitionDuration,
    transitionDelay
  } = window.getComputedStyle(element);
  const floatTransitionDuration = Number.parseFloat(transitionDuration);
  const floatTransitionDelay = Number.parseFloat(transitionDelay);
  if (!floatTransitionDuration && !floatTransitionDelay) {
    return 0;
  }
  transitionDuration = transitionDuration.split(",")[0];
  transitionDelay = transitionDelay.split(",")[0];
  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
};
var triggerTransitionEnd = (element) => {
  element.dispatchEvent(new Event(TRANSITION_END));
};
var isElement = (object) => {
  if (!object || typeof object !== "object") {
    return false;
  }
  if (typeof object.jquery !== "undefined") {
    object = object[0];
  }
  return typeof object.nodeType !== "undefined";
};
var getElement = (object) => {
  if (isElement(object)) {
    return object.jquery ? object[0] : object;
  }
  if (typeof object === "string" && object.length > 0) {
    return document.querySelector(object);
  }
  return null;
};
var isVisible = (element) => {
  if (!isElement(element) || element.getClientRects().length === 0) {
    return false;
  }
  const elementIsVisible = getComputedStyle(element).getPropertyValue("visibility") === "visible";
  const closedDetails = element.closest("details:not([open])");
  if (!closedDetails) {
    return elementIsVisible;
  }
  if (closedDetails !== element) {
    const summary = element.closest("summary");
    if (summary && summary.parentNode !== closedDetails) {
      return false;
    }
    if (summary === null) {
      return false;
    }
  }
  return elementIsVisible;
};
var isDisabled = (element) => {
  if (!element || element.nodeType !== Node.ELEMENT_NODE) {
    return true;
  }
  if (element.classList.contains("disabled")) {
    return true;
  }
  if (typeof element.disabled !== "undefined") {
    return element.disabled;
  }
  return element.hasAttribute("disabled") && element.getAttribute("disabled") !== "false";
};
var findShadowRoot = (element) => {
  if (!document.documentElement.attachShadow) {
    return null;
  }
  if (typeof element.getRootNode === "function") {
    const root = element.getRootNode();
    return root instanceof ShadowRoot ? root : null;
  }
  if (element instanceof ShadowRoot) {
    return element;
  }
  if (!element.parentNode) {
    return null;
  }
  return findShadowRoot(element.parentNode);
};
var noop = () => {
};
var reflow = (element) => {
  element.offsetHeight;
};
var getjQuery = () => {
  if (window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")) {
    return window.jQuery;
  }
  return null;
};
var DOMContentLoadedCallbacks = [];
var onDOMContentLoaded = (callback) => {
  if (document.readyState === "loading") {
    if (!DOMContentLoadedCallbacks.length) {
      document.addEventListener("DOMContentLoaded", () => {
        for (const callback2 of DOMContentLoadedCallbacks) {
          callback2();
        }
      });
    }
    DOMContentLoadedCallbacks.push(callback);
  } else {
    callback();
  }
};
var isRTL = () => document.documentElement.dir === "rtl";
var defineJQueryPlugin = (plugin) => {
  onDOMContentLoaded(() => {
    const $ = getjQuery();
    if ($) {
      const name = plugin.NAME;
      const JQUERY_NO_CONFLICT = $.fn[name];
      $.fn[name] = plugin.jQueryInterface;
      $.fn[name].Constructor = plugin;
      $.fn[name].noConflict = () => {
        $.fn[name] = JQUERY_NO_CONFLICT;
        return plugin.jQueryInterface;
      };
    }
  });
};
var execute = (callback) => {
  if (typeof callback === "function") {
    callback();
  }
};
var executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
  if (!waitForTransition) {
    execute(callback);
    return;
  }
  const durationPadding = 5;
  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
  let called = false;
  const handler = ({
    target
  }) => {
    if (target !== transitionElement) {
      return;
    }
    called = true;
    transitionElement.removeEventListener(TRANSITION_END, handler);
    execute(callback);
  };
  transitionElement.addEventListener(TRANSITION_END, handler);
  setTimeout(() => {
    if (!called) {
      triggerTransitionEnd(transitionElement);
    }
  }, emulatedDuration);
};
var getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
  const listLength = list.length;
  let index = list.indexOf(activeElement);
  if (index === -1) {
    return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];
  }
  index += shouldGetNext ? 1 : -1;
  if (isCycleAllowed) {
    index = (index + listLength) % listLength;
  }
  return list[Math.max(0, Math.min(index, listLength - 1))];
};
var namespaceRegex = /[^.]*(?=\..*)\.|.*/;
var stripNameRegex = /\..*/;
var stripUidRegex = /::\d+$/;
var eventRegistry = {};
var uidEvent = 1;
var customEvents = {
  mouseenter: "mouseover",
  mouseleave: "mouseout"
};
var nativeEvents = /* @__PURE__ */ new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
function makeEventUid(element, uid) {
  return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
}
function getElementEvents(element) {
  const uid = makeEventUid(element);
  element.uidEvent = uid;
  eventRegistry[uid] = eventRegistry[uid] || {};
  return eventRegistry[uid];
}
function bootstrapHandler(element, fn2) {
  return function handler(event) {
    hydrateObj(event, {
      delegateTarget: element
    });
    if (handler.oneOff) {
      EventHandler.off(element, event.type, fn2);
    }
    return fn2.apply(element, [event]);
  };
}
function bootstrapDelegationHandler(element, selector, fn2) {
  return function handler(event) {
    const domElements = element.querySelectorAll(selector);
    for (let {
      target
    } = event; target && target !== this; target = target.parentNode) {
      for (const domElement of domElements) {
        if (domElement !== target) {
          continue;
        }
        hydrateObj(event, {
          delegateTarget: target
        });
        if (handler.oneOff) {
          EventHandler.off(element, event.type, selector, fn2);
        }
        return fn2.apply(target, [event]);
      }
    }
  };
}
function findHandler(events, callable, delegationSelector = null) {
  return Object.values(events).find((event) => event.callable === callable && event.delegationSelector === delegationSelector);
}
function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
  const isDelegated = typeof handler === "string";
  const callable = isDelegated ? delegationFunction : handler || delegationFunction;
  let typeEvent = getTypeEvent(originalTypeEvent);
  if (!nativeEvents.has(typeEvent)) {
    typeEvent = originalTypeEvent;
  }
  return [isDelegated, callable, typeEvent];
}
function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
  if (typeof originalTypeEvent !== "string" || !element) {
    return;
  }
  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
  if (originalTypeEvent in customEvents) {
    const wrapFunction = (fn3) => {
      return function(event) {
        if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
          return fn3.call(this, event);
        }
      };
    };
    callable = wrapFunction(callable);
  }
  const events = getElementEvents(element);
  const handlers = events[typeEvent] || (events[typeEvent] = {});
  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);
  if (previousFunction) {
    previousFunction.oneOff = previousFunction.oneOff && oneOff;
    return;
  }
  const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ""));
  const fn2 = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
  fn2.delegationSelector = isDelegated ? handler : null;
  fn2.callable = callable;
  fn2.oneOff = oneOff;
  fn2.uidEvent = uid;
  handlers[uid] = fn2;
  element.addEventListener(typeEvent, fn2, isDelegated);
}
function removeHandler(element, events, typeEvent, handler, delegationSelector) {
  const fn2 = findHandler(events[typeEvent], handler, delegationSelector);
  if (!fn2) {
    return;
  }
  element.removeEventListener(typeEvent, fn2, Boolean(delegationSelector));
  delete events[typeEvent][fn2.uidEvent];
}
function removeNamespacedHandlers(element, events, typeEvent, namespace) {
  const storeElementEvent = events[typeEvent] || {};
  for (const handlerKey of Object.keys(storeElementEvent)) {
    if (handlerKey.includes(namespace)) {
      const event = storeElementEvent[handlerKey];
      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
    }
  }
}
function getTypeEvent(event) {
  event = event.replace(stripNameRegex, "");
  return customEvents[event] || event;
}
var EventHandler = {
  on(element, event, handler, delegationFunction) {
    addHandler(element, event, handler, delegationFunction, false);
  },
  one(element, event, handler, delegationFunction) {
    addHandler(element, event, handler, delegationFunction, true);
  },
  off(element, originalTypeEvent, handler, delegationFunction) {
    if (typeof originalTypeEvent !== "string" || !element) {
      return;
    }
    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
    const inNamespace = typeEvent !== originalTypeEvent;
    const events = getElementEvents(element);
    const storeElementEvent = events[typeEvent] || {};
    const isNamespace = originalTypeEvent.startsWith(".");
    if (typeof callable !== "undefined") {
      if (!Object.keys(storeElementEvent).length) {
        return;
      }
      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
      return;
    }
    if (isNamespace) {
      for (const elementEvent of Object.keys(events)) {
        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
      }
    }
    for (const keyHandlers of Object.keys(storeElementEvent)) {
      const handlerKey = keyHandlers.replace(stripUidRegex, "");
      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
        const event = storeElementEvent[keyHandlers];
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  },
  trigger(element, event, args) {
    if (typeof event !== "string" || !element) {
      return null;
    }
    const $ = getjQuery();
    const typeEvent = getTypeEvent(event);
    const inNamespace = event !== typeEvent;
    let jQueryEvent = null;
    let bubbles = true;
    let nativeDispatch = true;
    let defaultPrevented = false;
    if (inNamespace && $) {
      jQueryEvent = $.Event(event, args);
      $(element).trigger(jQueryEvent);
      bubbles = !jQueryEvent.isPropagationStopped();
      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
      defaultPrevented = jQueryEvent.isDefaultPrevented();
    }
    let evt = new Event(event, {
      bubbles,
      cancelable: true
    });
    evt = hydrateObj(evt, args);
    if (defaultPrevented) {
      evt.preventDefault();
    }
    if (nativeDispatch) {
      element.dispatchEvent(evt);
    }
    if (evt.defaultPrevented && jQueryEvent) {
      jQueryEvent.preventDefault();
    }
    return evt;
  }
};
function hydrateObj(obj, meta) {
  for (const [key, value] of Object.entries(meta || {})) {
    try {
      obj[key] = value;
    } catch (_unused) {
      Object.defineProperty(obj, key, {
        configurable: true,
        get() {
          return value;
        }
      });
    }
  }
  return obj;
}
var elementMap = /* @__PURE__ */ new Map();
var Data = {
  set(element, key, instance) {
    if (!elementMap.has(element)) {
      elementMap.set(element, /* @__PURE__ */ new Map());
    }
    const instanceMap = elementMap.get(element);
    if (!instanceMap.has(key) && instanceMap.size !== 0) {
      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
      return;
    }
    instanceMap.set(key, instance);
  },
  get(element, key) {
    if (elementMap.has(element)) {
      return elementMap.get(element).get(key) || null;
    }
    return null;
  },
  remove(element, key) {
    if (!elementMap.has(element)) {
      return;
    }
    const instanceMap = elementMap.get(element);
    instanceMap.delete(key);
    if (instanceMap.size === 0) {
      elementMap.delete(element);
    }
  }
};
function normalizeData(value) {
  if (value === "true") {
    return true;
  }
  if (value === "false") {
    return false;
  }
  if (value === Number(value).toString()) {
    return Number(value);
  }
  if (value === "" || value === "null") {
    return null;
  }
  if (typeof value !== "string") {
    return value;
  }
  try {
    return JSON.parse(decodeURIComponent(value));
  } catch (_unused) {
    return value;
  }
}
function normalizeDataKey(key) {
  return key.replace(/[A-Z]/g, (chr) => `-${chr.toLowerCase()}`);
}
var Manipulator = {
  setDataAttribute(element, key, value) {
    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
  },
  removeDataAttribute(element, key) {
    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
  },
  getDataAttributes(element) {
    if (!element) {
      return {};
    }
    const attributes = {};
    const bsKeys = Object.keys(element.dataset).filter((key) => key.startsWith("bs") && !key.startsWith("bsConfig"));
    for (const key of bsKeys) {
      let pureKey = key.replace(/^bs/, "");
      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
      attributes[pureKey] = normalizeData(element.dataset[key]);
    }
    return attributes;
  },
  getDataAttribute(element, key) {
    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`));
  }
};
var Config = class {
  // Getters
  static get Default() {
    return {};
  }
  static get DefaultType() {
    return {};
  }
  static get NAME() {
    throw new Error('You have to implement the static method "NAME", for each component!');
  }
  _getConfig(config) {
    config = this._mergeConfigObj(config);
    config = this._configAfterMerge(config);
    this._typeCheckConfig(config);
    return config;
  }
  _configAfterMerge(config) {
    return config;
  }
  _mergeConfigObj(config, element) {
    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, "config") : {};
    return {
      ...this.constructor.Default,
      ...typeof jsonConfig === "object" ? jsonConfig : {},
      ...isElement(element) ? Manipulator.getDataAttributes(element) : {},
      ...typeof config === "object" ? config : {}
    };
  }
  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
    for (const property of Object.keys(configTypes)) {
      const expectedTypes = configTypes[property];
      const value = config[property];
      const valueType = isElement(value) ? "element" : toType(value);
      if (!new RegExp(expectedTypes).test(valueType)) {
        throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
      }
    }
  }
};
var VERSION = "5.2.3";
var BaseComponent = class extends Config {
  constructor(element, config) {
    super();
    element = getElement(element);
    if (!element) {
      return;
    }
    this._element = element;
    this._config = this._getConfig(config);
    Data.set(this._element, this.constructor.DATA_KEY, this);
  }
  // Public
  dispose() {
    Data.remove(this._element, this.constructor.DATA_KEY);
    EventHandler.off(this._element, this.constructor.EVENT_KEY);
    for (const propertyName of Object.getOwnPropertyNames(this)) {
      this[propertyName] = null;
    }
  }
  _queueCallback(callback, element, isAnimated = true) {
    executeAfterTransition(callback, element, isAnimated);
  }
  _getConfig(config) {
    config = this._mergeConfigObj(config, this._element);
    config = this._configAfterMerge(config);
    this._typeCheckConfig(config);
    return config;
  }
  // Static
  static getInstance(element) {
    return Data.get(getElement(element), this.DATA_KEY);
  }
  static getOrCreateInstance(element, config = {}) {
    return this.getInstance(element) || new this(element, typeof config === "object" ? config : null);
  }
  static get VERSION() {
    return VERSION;
  }
  static get DATA_KEY() {
    return `bs.${this.NAME}`;
  }
  static get EVENT_KEY() {
    return `.${this.DATA_KEY}`;
  }
  static eventName(name) {
    return `${name}${this.EVENT_KEY}`;
  }
};
var enableDismissTrigger = (component, method = "hide") => {
  const clickEvent = `click.dismiss${component.EVENT_KEY}`;
  const name = component.NAME;
  EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name}"]`, function(event) {
    if (["A", "AREA"].includes(this.tagName)) {
      event.preventDefault();
    }
    if (isDisabled(this)) {
      return;
    }
    const target = getElementFromSelector(this) || this.closest(`.${name}`);
    const instance = component.getOrCreateInstance(target);
    instance[method]();
  });
};
var NAME$f = "alert";
var DATA_KEY$a = "bs.alert";
var EVENT_KEY$b = `.${DATA_KEY$a}`;
var EVENT_CLOSE = `close${EVENT_KEY$b}`;
var EVENT_CLOSED = `closed${EVENT_KEY$b}`;
var CLASS_NAME_FADE$5 = "fade";
var CLASS_NAME_SHOW$8 = "show";
var Alert = class extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$f;
  }
  // Public
  close() {
    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
    if (closeEvent.defaultPrevented) {
      return;
    }
    this._element.classList.remove(CLASS_NAME_SHOW$8);
    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
    this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
  }
  // Private
  _destroyElement() {
    this._element.remove();
    EventHandler.trigger(this._element, EVENT_CLOSED);
    this.dispose();
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Alert.getOrCreateInstance(this);
      if (typeof config !== "string") {
        return;
      }
      if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config](this);
    });
  }
};
enableDismissTrigger(Alert, "close");
defineJQueryPlugin(Alert);
var NAME$e = "button";
var DATA_KEY$9 = "bs.button";
var EVENT_KEY$a = `.${DATA_KEY$9}`;
var DATA_API_KEY$6 = ".data-api";
var CLASS_NAME_ACTIVE$3 = "active";
var SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
var EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
var Button = class extends BaseComponent {
  // Getters
  static get NAME() {
    return NAME$e;
  }
  // Public
  toggle() {
    this._element.setAttribute("aria-pressed", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Button.getOrCreateInstance(this);
      if (config === "toggle") {
        data[config]();
      }
    });
  }
};
EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event) => {
  event.preventDefault();
  const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
  const data = Button.getOrCreateInstance(button);
  data.toggle();
});
defineJQueryPlugin(Button);
var SelectorEngine = {
  find(selector, element = document.documentElement) {
    return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
  },
  findOne(selector, element = document.documentElement) {
    return Element.prototype.querySelector.call(element, selector);
  },
  children(element, selector) {
    return [].concat(...element.children).filter((child) => child.matches(selector));
  },
  parents(element, selector) {
    const parents = [];
    let ancestor = element.parentNode.closest(selector);
    while (ancestor) {
      parents.push(ancestor);
      ancestor = ancestor.parentNode.closest(selector);
    }
    return parents;
  },
  prev(element, selector) {
    let previous = element.previousElementSibling;
    while (previous) {
      if (previous.matches(selector)) {
        return [previous];
      }
      previous = previous.previousElementSibling;
    }
    return [];
  },
  // TODO: this is now unused; remove later along with prev()
  next(element, selector) {
    let next = element.nextElementSibling;
    while (next) {
      if (next.matches(selector)) {
        return [next];
      }
      next = next.nextElementSibling;
    }
    return [];
  },
  focusableChildren(element) {
    const focusables = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map((selector) => `${selector}:not([tabindex^="-"])`).join(",");
    return this.find(focusables, element).filter((el2) => !isDisabled(el2) && isVisible(el2));
  }
};
var NAME$d = "swipe";
var EVENT_KEY$9 = ".bs.swipe";
var EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
var EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
var EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
var EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
var EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
var POINTER_TYPE_TOUCH = "touch";
var POINTER_TYPE_PEN = "pen";
var CLASS_NAME_POINTER_EVENT = "pointer-event";
var SWIPE_THRESHOLD = 40;
var Default$c = {
  endCallback: null,
  leftCallback: null,
  rightCallback: null
};
var DefaultType$c = {
  endCallback: "(function|null)",
  leftCallback: "(function|null)",
  rightCallback: "(function|null)"
};
var Swipe = class extends Config {
  constructor(element, config) {
    super();
    this._element = element;
    if (!element || !Swipe.isSupported()) {
      return;
    }
    this._config = this._getConfig(config);
    this._deltaX = 0;
    this._supportPointerEvents = Boolean(window.PointerEvent);
    this._initEvents();
  }
  // Getters
  static get Default() {
    return Default$c;
  }
  static get DefaultType() {
    return DefaultType$c;
  }
  static get NAME() {
    return NAME$d;
  }
  // Public
  dispose() {
    EventHandler.off(this._element, EVENT_KEY$9);
  }
  // Private
  _start(event) {
    if (!this._supportPointerEvents) {
      this._deltaX = event.touches[0].clientX;
      return;
    }
    if (this._eventIsPointerPenTouch(event)) {
      this._deltaX = event.clientX;
    }
  }
  _end(event) {
    if (this._eventIsPointerPenTouch(event)) {
      this._deltaX = event.clientX - this._deltaX;
    }
    this._handleSwipe();
    execute(this._config.endCallback);
  }
  _move(event) {
    this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
  }
  _handleSwipe() {
    const absDeltaX = Math.abs(this._deltaX);
    if (absDeltaX <= SWIPE_THRESHOLD) {
      return;
    }
    const direction = absDeltaX / this._deltaX;
    this._deltaX = 0;
    if (!direction) {
      return;
    }
    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
  }
  _initEvents() {
    if (this._supportPointerEvents) {
      EventHandler.on(this._element, EVENT_POINTERDOWN, (event) => this._start(event));
      EventHandler.on(this._element, EVENT_POINTERUP, (event) => this._end(event));
      this._element.classList.add(CLASS_NAME_POINTER_EVENT);
    } else {
      EventHandler.on(this._element, EVENT_TOUCHSTART, (event) => this._start(event));
      EventHandler.on(this._element, EVENT_TOUCHMOVE, (event) => this._move(event));
      EventHandler.on(this._element, EVENT_TOUCHEND, (event) => this._end(event));
    }
  }
  _eventIsPointerPenTouch(event) {
    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
  }
  // Static
  static isSupported() {
    return "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
  }
};
var NAME$c = "carousel";
var DATA_KEY$8 = "bs.carousel";
var EVENT_KEY$8 = `.${DATA_KEY$8}`;
var DATA_API_KEY$5 = ".data-api";
var ARROW_LEFT_KEY$1 = "ArrowLeft";
var ARROW_RIGHT_KEY$1 = "ArrowRight";
var TOUCHEVENT_COMPAT_WAIT = 500;
var ORDER_NEXT = "next";
var ORDER_PREV = "prev";
var DIRECTION_LEFT = "left";
var DIRECTION_RIGHT = "right";
var EVENT_SLIDE = `slide${EVENT_KEY$8}`;
var EVENT_SLID = `slid${EVENT_KEY$8}`;
var EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
var EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
var EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
var EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
var EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
var EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
var CLASS_NAME_CAROUSEL = "carousel";
var CLASS_NAME_ACTIVE$2 = "active";
var CLASS_NAME_SLIDE = "slide";
var CLASS_NAME_END = "carousel-item-end";
var CLASS_NAME_START = "carousel-item-start";
var CLASS_NAME_NEXT = "carousel-item-next";
var CLASS_NAME_PREV = "carousel-item-prev";
var SELECTOR_ACTIVE = ".active";
var SELECTOR_ITEM = ".carousel-item";
var SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
var SELECTOR_ITEM_IMG = ".carousel-item img";
var SELECTOR_INDICATORS = ".carousel-indicators";
var SELECTOR_DATA_SLIDE = "[data-bs-slide], [data-bs-slide-to]";
var SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
var KEY_TO_DIRECTION = {
  [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
  [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
};
var Default$b = {
  interval: 5e3,
  keyboard: true,
  pause: "hover",
  ride: false,
  touch: true,
  wrap: true
};
var DefaultType$b = {
  interval: "(number|boolean)",
  // TODO:v6 remove boolean support
  keyboard: "boolean",
  pause: "(string|boolean)",
  ride: "(boolean|string)",
  touch: "boolean",
  wrap: "boolean"
};
var Carousel = class extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._interval = null;
    this._activeElement = null;
    this._isSliding = false;
    this.touchTimeout = null;
    this._swipeHelper = null;
    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
    this._addEventListeners();
    if (this._config.ride === CLASS_NAME_CAROUSEL) {
      this.cycle();
    }
  }
  // Getters
  static get Default() {
    return Default$b;
  }
  static get DefaultType() {
    return DefaultType$b;
  }
  static get NAME() {
    return NAME$c;
  }
  // Public
  next() {
    this._slide(ORDER_NEXT);
  }
  nextWhenVisible() {
    if (!document.hidden && isVisible(this._element)) {
      this.next();
    }
  }
  prev() {
    this._slide(ORDER_PREV);
  }
  pause() {
    if (this._isSliding) {
      triggerTransitionEnd(this._element);
    }
    this._clearInterval();
  }
  cycle() {
    this._clearInterval();
    this._updateInterval();
    this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
  }
  _maybeEnableCycle() {
    if (!this._config.ride) {
      return;
    }
    if (this._isSliding) {
      EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
      return;
    }
    this.cycle();
  }
  to(index) {
    const items = this._getItems();
    if (index > items.length - 1 || index < 0) {
      return;
    }
    if (this._isSliding) {
      EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
      return;
    }
    const activeIndex = this._getItemIndex(this._getActive());
    if (activeIndex === index) {
      return;
    }
    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
    this._slide(order, items[index]);
  }
  dispose() {
    if (this._swipeHelper) {
      this._swipeHelper.dispose();
    }
    super.dispose();
  }
  // Private
  _configAfterMerge(config) {
    config.defaultInterval = config.interval;
    return config;
  }
  _addEventListeners() {
    if (this._config.keyboard) {
      EventHandler.on(this._element, EVENT_KEYDOWN$1, (event) => this._keydown(event));
    }
    if (this._config.pause === "hover") {
      EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
      EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
    }
    if (this._config.touch && Swipe.isSupported()) {
      this._addTouchEventListeners();
    }
  }
  _addTouchEventListeners() {
    for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
      EventHandler.on(img, EVENT_DRAG_START, (event) => event.preventDefault());
    }
    const endCallBack = () => {
      if (this._config.pause !== "hover") {
        return;
      }
      this.pause();
      if (this.touchTimeout) {
        clearTimeout(this.touchTimeout);
      }
      this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
    };
    const swipeConfig = {
      leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),
      rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),
      endCallback: endCallBack
    };
    this._swipeHelper = new Swipe(this._element, swipeConfig);
  }
  _keydown(event) {
    if (/input|textarea/i.test(event.target.tagName)) {
      return;
    }
    const direction = KEY_TO_DIRECTION[event.key];
    if (direction) {
      event.preventDefault();
      this._slide(this._directionToOrder(direction));
    }
  }
  _getItemIndex(element) {
    return this._getItems().indexOf(element);
  }
  _setActiveIndicatorElement(index) {
    if (!this._indicatorsElement) {
      return;
    }
    const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
    activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
    activeIndicator.removeAttribute("aria-current");
    const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
    if (newActiveIndicator) {
      newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
      newActiveIndicator.setAttribute("aria-current", "true");
    }
  }
  _updateInterval() {
    const element = this._activeElement || this._getActive();
    if (!element) {
      return;
    }
    const elementInterval = Number.parseInt(element.getAttribute("data-bs-interval"), 10);
    this._config.interval = elementInterval || this._config.defaultInterval;
  }
  _slide(order, element = null) {
    if (this._isSliding) {
      return;
    }
    const activeElement = this._getActive();
    const isNext = order === ORDER_NEXT;
    const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
    if (nextElement === activeElement) {
      return;
    }
    const nextElementIndex = this._getItemIndex(nextElement);
    const triggerEvent = (eventName) => {
      return EventHandler.trigger(this._element, eventName, {
        relatedTarget: nextElement,
        direction: this._orderToDirection(order),
        from: this._getItemIndex(activeElement),
        to: nextElementIndex
      });
    };
    const slideEvent = triggerEvent(EVENT_SLIDE);
    if (slideEvent.defaultPrevented) {
      return;
    }
    if (!activeElement || !nextElement) {
      return;
    }
    const isCycling = Boolean(this._interval);
    this.pause();
    this._isSliding = true;
    this._setActiveIndicatorElement(nextElementIndex);
    this._activeElement = nextElement;
    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
    nextElement.classList.add(orderClassName);
    reflow(nextElement);
    activeElement.classList.add(directionalClassName);
    nextElement.classList.add(directionalClassName);
    const completeCallBack = () => {
      nextElement.classList.remove(directionalClassName, orderClassName);
      nextElement.classList.add(CLASS_NAME_ACTIVE$2);
      activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
      this._isSliding = false;
      triggerEvent(EVENT_SLID);
    };
    this._queueCallback(completeCallBack, activeElement, this._isAnimated());
    if (isCycling) {
      this.cycle();
    }
  }
  _isAnimated() {
    return this._element.classList.contains(CLASS_NAME_SLIDE);
  }
  _getActive() {
    return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
  }
  _getItems() {
    return SelectorEngine.find(SELECTOR_ITEM, this._element);
  }
  _clearInterval() {
    if (this._interval) {
      clearInterval(this._interval);
      this._interval = null;
    }
  }
  _directionToOrder(direction) {
    if (isRTL()) {
      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
    }
    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
  }
  _orderToDirection(order) {
    if (isRTL()) {
      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
    }
    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Carousel.getOrCreateInstance(this, config);
      if (typeof config === "number") {
        data.to(config);
        return;
      }
      if (typeof config === "string") {
        if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      }
    });
  }
};
EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
  const target = getElementFromSelector(this);
  if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
    return;
  }
  event.preventDefault();
  const carousel = Carousel.getOrCreateInstance(target);
  const slideIndex = this.getAttribute("data-bs-slide-to");
  if (slideIndex) {
    carousel.to(slideIndex);
    carousel._maybeEnableCycle();
    return;
  }
  if (Manipulator.getDataAttribute(this, "slide") === "next") {
    carousel.next();
    carousel._maybeEnableCycle();
    return;
  }
  carousel.prev();
  carousel._maybeEnableCycle();
});
EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
  for (const carousel of carousels) {
    Carousel.getOrCreateInstance(carousel);
  }
});
defineJQueryPlugin(Carousel);
var NAME$b = "collapse";
var DATA_KEY$7 = "bs.collapse";
var EVENT_KEY$7 = `.${DATA_KEY$7}`;
var DATA_API_KEY$4 = ".data-api";
var EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
var EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
var EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
var EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
var EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
var CLASS_NAME_SHOW$7 = "show";
var CLASS_NAME_COLLAPSE = "collapse";
var CLASS_NAME_COLLAPSING = "collapsing";
var CLASS_NAME_COLLAPSED = "collapsed";
var CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
var CLASS_NAME_HORIZONTAL = "collapse-horizontal";
var WIDTH = "width";
var HEIGHT = "height";
var SELECTOR_ACTIVES = ".collapse.show, .collapse.collapsing";
var SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
var Default$a = {
  parent: null,
  toggle: true
};
var DefaultType$a = {
  parent: "(null|element)",
  toggle: "boolean"
};
var Collapse = class extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._isTransitioning = false;
    this._triggerArray = [];
    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
    for (const elem of toggleList) {
      const selector = getSelectorFromElement(elem);
      const filterElement = SelectorEngine.find(selector).filter((foundElement) => foundElement === this._element);
      if (selector !== null && filterElement.length) {
        this._triggerArray.push(elem);
      }
    }
    this._initializeChildren();
    if (!this._config.parent) {
      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
    }
    if (this._config.toggle) {
      this.toggle();
    }
  }
  // Getters
  static get Default() {
    return Default$a;
  }
  static get DefaultType() {
    return DefaultType$a;
  }
  static get NAME() {
    return NAME$b;
  }
  // Public
  toggle() {
    if (this._isShown()) {
      this.hide();
    } else {
      this.show();
    }
  }
  show() {
    if (this._isTransitioning || this._isShown()) {
      return;
    }
    let activeChildren = [];
    if (this._config.parent) {
      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element) => element !== this._element).map((element) => Collapse.getOrCreateInstance(element, {
        toggle: false
      }));
    }
    if (activeChildren.length && activeChildren[0]._isTransitioning) {
      return;
    }
    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
    if (startEvent.defaultPrevented) {
      return;
    }
    for (const activeInstance of activeChildren) {
      activeInstance.hide();
    }
    const dimension = this._getDimension();
    this._element.classList.remove(CLASS_NAME_COLLAPSE);
    this._element.classList.add(CLASS_NAME_COLLAPSING);
    this._element.style[dimension] = 0;
    this._addAriaAndCollapsedClass(this._triggerArray, true);
    this._isTransitioning = true;
    const complete = () => {
      this._isTransitioning = false;
      this._element.classList.remove(CLASS_NAME_COLLAPSING);
      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
      this._element.style[dimension] = "";
      EventHandler.trigger(this._element, EVENT_SHOWN$6);
    };
    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
    const scrollSize = `scroll${capitalizedDimension}`;
    this._queueCallback(complete, this._element, true);
    this._element.style[dimension] = `${this._element[scrollSize]}px`;
  }
  hide() {
    if (this._isTransitioning || !this._isShown()) {
      return;
    }
    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
    if (startEvent.defaultPrevented) {
      return;
    }
    const dimension = this._getDimension();
    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
    reflow(this._element);
    this._element.classList.add(CLASS_NAME_COLLAPSING);
    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
    for (const trigger of this._triggerArray) {
      const element = getElementFromSelector(trigger);
      if (element && !this._isShown(element)) {
        this._addAriaAndCollapsedClass([trigger], false);
      }
    }
    this._isTransitioning = true;
    const complete = () => {
      this._isTransitioning = false;
      this._element.classList.remove(CLASS_NAME_COLLAPSING);
      this._element.classList.add(CLASS_NAME_COLLAPSE);
      EventHandler.trigger(this._element, EVENT_HIDDEN$6);
    };
    this._element.style[dimension] = "";
    this._queueCallback(complete, this._element, true);
  }
  _isShown(element = this._element) {
    return element.classList.contains(CLASS_NAME_SHOW$7);
  }
  // Private
  _configAfterMerge(config) {
    config.toggle = Boolean(config.toggle);
    config.parent = getElement(config.parent);
    return config;
  }
  _getDimension() {
    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
  }
  _initializeChildren() {
    if (!this._config.parent) {
      return;
    }
    const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
    for (const element of children) {
      const selected = getElementFromSelector(element);
      if (selected) {
        this._addAriaAndCollapsedClass([element], this._isShown(selected));
      }
    }
  }
  _getFirstLevelChildren(selector) {
    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
    return SelectorEngine.find(selector, this._config.parent).filter((element) => !children.includes(element));
  }
  _addAriaAndCollapsedClass(triggerArray, isOpen) {
    if (!triggerArray.length) {
      return;
    }
    for (const element of triggerArray) {
      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
      element.setAttribute("aria-expanded", isOpen);
    }
  }
  // Static
  static jQueryInterface(config) {
    const _config = {};
    if (typeof config === "string" && /show|hide/.test(config)) {
      _config.toggle = false;
    }
    return this.each(function() {
      const data = Collapse.getOrCreateInstance(this, _config);
      if (typeof config === "string") {
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config]();
      }
    });
  }
};
EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
  if (event.target.tagName === "A" || event.delegateTarget && event.delegateTarget.tagName === "A") {
    event.preventDefault();
  }
  const selector = getSelectorFromElement(this);
  const selectorElements = SelectorEngine.find(selector);
  for (const element of selectorElements) {
    Collapse.getOrCreateInstance(element, {
      toggle: false
    }).toggle();
  }
});
defineJQueryPlugin(Collapse);
var NAME$a = "dropdown";
var DATA_KEY$6 = "bs.dropdown";
var EVENT_KEY$6 = `.${DATA_KEY$6}`;
var DATA_API_KEY$3 = ".data-api";
var ESCAPE_KEY$2 = "Escape";
var TAB_KEY$1 = "Tab";
var ARROW_UP_KEY$1 = "ArrowUp";
var ARROW_DOWN_KEY$1 = "ArrowDown";
var RIGHT_MOUSE_BUTTON = 2;
var EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
var EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
var EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
var EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
var EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
var EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
var EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
var CLASS_NAME_SHOW$6 = "show";
var CLASS_NAME_DROPUP = "dropup";
var CLASS_NAME_DROPEND = "dropend";
var CLASS_NAME_DROPSTART = "dropstart";
var CLASS_NAME_DROPUP_CENTER = "dropup-center";
var CLASS_NAME_DROPDOWN_CENTER = "dropdown-center";
var SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
var SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
var SELECTOR_MENU = ".dropdown-menu";
var SELECTOR_NAVBAR = ".navbar";
var SELECTOR_NAVBAR_NAV = ".navbar-nav";
var SELECTOR_VISIBLE_ITEMS = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
var PLACEMENT_TOP = isRTL() ? "top-end" : "top-start";
var PLACEMENT_TOPEND = isRTL() ? "top-start" : "top-end";
var PLACEMENT_BOTTOM = isRTL() ? "bottom-end" : "bottom-start";
var PLACEMENT_BOTTOMEND = isRTL() ? "bottom-start" : "bottom-end";
var PLACEMENT_RIGHT = isRTL() ? "left-start" : "right-start";
var PLACEMENT_LEFT = isRTL() ? "right-start" : "left-start";
var PLACEMENT_TOPCENTER = "top";
var PLACEMENT_BOTTOMCENTER = "bottom";
var Default$9 = {
  autoClose: true,
  boundary: "clippingParents",
  display: "dynamic",
  offset: [0, 2],
  popperConfig: null,
  reference: "toggle"
};
var DefaultType$9 = {
  autoClose: "(boolean|string)",
  boundary: "(string|element)",
  display: "string",
  offset: "(array|string|function)",
  popperConfig: "(null|object|function)",
  reference: "(string|element|object)"
};
var Dropdown = class extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._popper = null;
    this._parent = this._element.parentNode;
    this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
    this._inNavbar = this._detectNavbar();
  }
  // Getters
  static get Default() {
    return Default$9;
  }
  static get DefaultType() {
    return DefaultType$9;
  }
  static get NAME() {
    return NAME$a;
  }
  // Public
  toggle() {
    return this._isShown() ? this.hide() : this.show();
  }
  show() {
    if (isDisabled(this._element) || this._isShown()) {
      return;
    }
    const relatedTarget = {
      relatedTarget: this._element
    };
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
    if (showEvent.defaultPrevented) {
      return;
    }
    this._createPopper();
    if ("ontouchstart" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.on(element, "mouseover", noop);
      }
    }
    this._element.focus();
    this._element.setAttribute("aria-expanded", true);
    this._menu.classList.add(CLASS_NAME_SHOW$6);
    this._element.classList.add(CLASS_NAME_SHOW$6);
    EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
  }
  hide() {
    if (isDisabled(this._element) || !this._isShown()) {
      return;
    }
    const relatedTarget = {
      relatedTarget: this._element
    };
    this._completeHide(relatedTarget);
  }
  dispose() {
    if (this._popper) {
      this._popper.destroy();
    }
    super.dispose();
  }
  update() {
    this._inNavbar = this._detectNavbar();
    if (this._popper) {
      this._popper.update();
    }
  }
  // Private
  _completeHide(relatedTarget) {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
    if (hideEvent.defaultPrevented) {
      return;
    }
    if ("ontouchstart" in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.off(element, "mouseover", noop);
      }
    }
    if (this._popper) {
      this._popper.destroy();
    }
    this._menu.classList.remove(CLASS_NAME_SHOW$6);
    this._element.classList.remove(CLASS_NAME_SHOW$6);
    this._element.setAttribute("aria-expanded", "false");
    Manipulator.removeDataAttribute(this._menu, "popper");
    EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
  }
  _getConfig(config) {
    config = super._getConfig(config);
    if (typeof config.reference === "object" && !isElement(config.reference) && typeof config.reference.getBoundingClientRect !== "function") {
      throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
    }
    return config;
  }
  _createPopper() {
    if (typeof lib_exports === "undefined") {
      throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
    }
    let referenceElement = this._element;
    if (this._config.reference === "parent") {
      referenceElement = this._parent;
    } else if (isElement(this._config.reference)) {
      referenceElement = getElement(this._config.reference);
    } else if (typeof this._config.reference === "object") {
      referenceElement = this._config.reference;
    }
    const popperConfig = this._getPopperConfig();
    this._popper = createPopper(referenceElement, this._menu, popperConfig);
  }
  _isShown() {
    return this._menu.classList.contains(CLASS_NAME_SHOW$6);
  }
  _getPlacement() {
    const parentDropdown = this._parent;
    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
      return PLACEMENT_RIGHT;
    }
    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
      return PLACEMENT_LEFT;
    }
    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
      return PLACEMENT_TOPCENTER;
    }
    if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
      return PLACEMENT_BOTTOMCENTER;
    }
    const isEnd = getComputedStyle(this._menu).getPropertyValue("--bs-position").trim() === "end";
    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
    }
    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
  }
  _detectNavbar() {
    return this._element.closest(SELECTOR_NAVBAR) !== null;
  }
  _getOffset() {
    const {
      offset
    } = this._config;
    if (typeof offset === "string") {
      return offset.split(",").map((value) => Number.parseInt(value, 10));
    }
    if (typeof offset === "function") {
      return (popperData) => offset(popperData, this._element);
    }
    return offset;
  }
  _getPopperConfig() {
    const defaultBsPopperConfig = {
      placement: this._getPlacement(),
      modifiers: [{
        name: "preventOverflow",
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: "offset",
        options: {
          offset: this._getOffset()
        }
      }]
    };
    if (this._inNavbar || this._config.display === "static") {
      Manipulator.setDataAttribute(this._menu, "popper", "static");
      defaultBsPopperConfig.modifiers = [{
        name: "applyStyles",
        enabled: false
      }];
    }
    return {
      ...defaultBsPopperConfig,
      ...typeof this._config.popperConfig === "function" ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
    };
  }
  _selectMenuItem({
    key,
    target
  }) {
    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element) => isVisible(element));
    if (!items.length) {
      return;
    }
    getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Dropdown.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config]();
    });
  }
  static clearMenus(event) {
    if (event.button === RIGHT_MOUSE_BUTTON || event.type === "keyup" && event.key !== TAB_KEY$1) {
      return;
    }
    const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
    for (const toggle of openToggles) {
      const context = Dropdown.getInstance(toggle);
      if (!context || context._config.autoClose === false) {
        continue;
      }
      const composedPath = event.composedPath();
      const isMenuTarget = composedPath.includes(context._menu);
      if (composedPath.includes(context._element) || context._config.autoClose === "inside" && !isMenuTarget || context._config.autoClose === "outside" && isMenuTarget) {
        continue;
      }
      if (context._menu.contains(event.target) && (event.type === "keyup" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
        continue;
      }
      const relatedTarget = {
        relatedTarget: context._element
      };
      if (event.type === "click") {
        relatedTarget.clickEvent = event;
      }
      context._completeHide(relatedTarget);
    }
  }
  static dataApiKeydownHandler(event) {
    const isInput = /input|textarea/i.test(event.target.tagName);
    const isEscapeEvent = event.key === ESCAPE_KEY$2;
    const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
    if (!isUpOrDownEvent && !isEscapeEvent) {
      return;
    }
    if (isInput && !isEscapeEvent) {
      return;
    }
    event.preventDefault();
    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
    const instance = Dropdown.getOrCreateInstance(getToggleButton);
    if (isUpOrDownEvent) {
      event.stopPropagation();
      instance.show();
      instance._selectMenuItem(event);
      return;
    }
    if (instance._isShown()) {
      event.stopPropagation();
      instance.hide();
      getToggleButton.focus();
    }
  }
};
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
  event.preventDefault();
  Dropdown.getOrCreateInstance(this).toggle();
});
defineJQueryPlugin(Dropdown);
var SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
var SELECTOR_STICKY_CONTENT = ".sticky-top";
var PROPERTY_PADDING = "padding-right";
var PROPERTY_MARGIN = "margin-right";
var ScrollBarHelper = class {
  constructor() {
    this._element = document.body;
  }
  // Public
  getWidth() {
    const documentWidth = document.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }
  hide() {
    const width = this.getWidth();
    this._disableOverFlow();
    this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue) => calculatedValue - width);
  }
  reset() {
    this._resetElementAttributes(this._element, "overflow");
    this._resetElementAttributes(this._element, PROPERTY_PADDING);
    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
  }
  isOverflowing() {
    return this.getWidth() > 0;
  }
  // Private
  _disableOverFlow() {
    this._saveInitialAttribute(this._element, "overflow");
    this._element.style.overflow = "hidden";
  }
  _setElementAttributes(selector, styleProperty, callback) {
    const scrollbarWidth = this.getWidth();
    const manipulationCallBack = (element) => {
      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
        return;
      }
      this._saveInitialAttribute(element, styleProperty);
      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
    };
    this._applyManipulationCallback(selector, manipulationCallBack);
  }
  _saveInitialAttribute(element, styleProperty) {
    const actualValue = element.style.getPropertyValue(styleProperty);
    if (actualValue) {
      Manipulator.setDataAttribute(element, styleProperty, actualValue);
    }
  }
  _resetElementAttributes(selector, styleProperty) {
    const manipulationCallBack = (element) => {
      const value = Manipulator.getDataAttribute(element, styleProperty);
      if (value === null) {
        element.style.removeProperty(styleProperty);
        return;
      }
      Manipulator.removeDataAttribute(element, styleProperty);
      element.style.setProperty(styleProperty, value);
    };
    this._applyManipulationCallback(selector, manipulationCallBack);
  }
  _applyManipulationCallback(selector, callBack) {
    if (isElement(selector)) {
      callBack(selector);
      return;
    }
    for (const sel of SelectorEngine.find(selector, this._element)) {
      callBack(sel);
    }
  }
};
var NAME$9 = "backdrop";
var CLASS_NAME_FADE$4 = "fade";
var CLASS_NAME_SHOW$5 = "show";
var EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
var Default$8 = {
  className: "modal-backdrop",
  clickCallback: null,
  isAnimated: false,
  isVisible: true,
  // if false, we use the backdrop helper without adding any element to the dom
  rootElement: "body"
  // give the choice to place backdrop under different elements
};
var DefaultType$8 = {
  className: "string",
  clickCallback: "(function|null)",
  isAnimated: "boolean",
  isVisible: "boolean",
  rootElement: "(element|string)"
};
var Backdrop = class extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
    this._isAppended = false;
    this._element = null;
  }
  // Getters
  static get Default() {
    return Default$8;
  }
  static get DefaultType() {
    return DefaultType$8;
  }
  static get NAME() {
    return NAME$9;
  }
  // Public
  show(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }
    this._append();
    const element = this._getElement();
    if (this._config.isAnimated) {
      reflow(element);
    }
    element.classList.add(CLASS_NAME_SHOW$5);
    this._emulateAnimation(() => {
      execute(callback);
    });
  }
  hide(callback) {
    if (!this._config.isVisible) {
      execute(callback);
      return;
    }
    this._getElement().classList.remove(CLASS_NAME_SHOW$5);
    this._emulateAnimation(() => {
      this.dispose();
      execute(callback);
    });
  }
  dispose() {
    if (!this._isAppended) {
      return;
    }
    EventHandler.off(this._element, EVENT_MOUSEDOWN);
    this._element.remove();
    this._isAppended = false;
  }
  // Private
  _getElement() {
    if (!this._element) {
      const backdrop = document.createElement("div");
      backdrop.className = this._config.className;
      if (this._config.isAnimated) {
        backdrop.classList.add(CLASS_NAME_FADE$4);
      }
      this._element = backdrop;
    }
    return this._element;
  }
  _configAfterMerge(config) {
    config.rootElement = getElement(config.rootElement);
    return config;
  }
  _append() {
    if (this._isAppended) {
      return;
    }
    const element = this._getElement();
    this._config.rootElement.append(element);
    EventHandler.on(element, EVENT_MOUSEDOWN, () => {
      execute(this._config.clickCallback);
    });
    this._isAppended = true;
  }
  _emulateAnimation(callback) {
    executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
  }
};
var NAME$8 = "focustrap";
var DATA_KEY$5 = "bs.focustrap";
var EVENT_KEY$5 = `.${DATA_KEY$5}`;
var EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
var EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
var TAB_KEY = "Tab";
var TAB_NAV_FORWARD = "forward";
var TAB_NAV_BACKWARD = "backward";
var Default$7 = {
  autofocus: true,
  trapElement: null
  // The element to trap focus inside of
};
var DefaultType$7 = {
  autofocus: "boolean",
  trapElement: "element"
};
var FocusTrap = class extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
    this._isActive = false;
    this._lastTabNavDirection = null;
  }
  // Getters
  static get Default() {
    return Default$7;
  }
  static get DefaultType() {
    return DefaultType$7;
  }
  static get NAME() {
    return NAME$8;
  }
  // Public
  activate() {
    if (this._isActive) {
      return;
    }
    if (this._config.autofocus) {
      this._config.trapElement.focus();
    }
    EventHandler.off(document, EVENT_KEY$5);
    EventHandler.on(document, EVENT_FOCUSIN$2, (event) => this._handleFocusin(event));
    EventHandler.on(document, EVENT_KEYDOWN_TAB, (event) => this._handleKeydown(event));
    this._isActive = true;
  }
  deactivate() {
    if (!this._isActive) {
      return;
    }
    this._isActive = false;
    EventHandler.off(document, EVENT_KEY$5);
  }
  // Private
  _handleFocusin(event) {
    const {
      trapElement
    } = this._config;
    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
      return;
    }
    const elements = SelectorEngine.focusableChildren(trapElement);
    if (elements.length === 0) {
      trapElement.focus();
    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
      elements[elements.length - 1].focus();
    } else {
      elements[0].focus();
    }
  }
  _handleKeydown(event) {
    if (event.key !== TAB_KEY) {
      return;
    }
    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
  }
};
var NAME$7 = "modal";
var DATA_KEY$4 = "bs.modal";
var EVENT_KEY$4 = `.${DATA_KEY$4}`;
var DATA_API_KEY$2 = ".data-api";
var ESCAPE_KEY$1 = "Escape";
var EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
var EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
var EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
var EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
var EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
var EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
var EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
var EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
var EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
var EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
var CLASS_NAME_OPEN = "modal-open";
var CLASS_NAME_FADE$3 = "fade";
var CLASS_NAME_SHOW$4 = "show";
var CLASS_NAME_STATIC = "modal-static";
var OPEN_SELECTOR$1 = ".modal.show";
var SELECTOR_DIALOG = ".modal-dialog";
var SELECTOR_MODAL_BODY = ".modal-body";
var SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
var Default$6 = {
  backdrop: true,
  focus: true,
  keyboard: true
};
var DefaultType$6 = {
  backdrop: "(boolean|string)",
  focus: "boolean",
  keyboard: "boolean"
};
var Modal = class extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();
    this._isShown = false;
    this._isTransitioning = false;
    this._scrollBar = new ScrollBarHelper();
    this._addEventListeners();
  }
  // Getters
  static get Default() {
    return Default$6;
  }
  static get DefaultType() {
    return DefaultType$6;
  }
  static get NAME() {
    return NAME$7;
  }
  // Public
  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }
  show(relatedTarget) {
    if (this._isShown || this._isTransitioning) {
      return;
    }
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
      relatedTarget
    });
    if (showEvent.defaultPrevented) {
      return;
    }
    this._isShown = true;
    this._isTransitioning = true;
    this._scrollBar.hide();
    document.body.classList.add(CLASS_NAME_OPEN);
    this._adjustDialog();
    this._backdrop.show(() => this._showElement(relatedTarget));
  }
  hide() {
    if (!this._isShown || this._isTransitioning) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
    if (hideEvent.defaultPrevented) {
      return;
    }
    this._isShown = false;
    this._isTransitioning = true;
    this._focustrap.deactivate();
    this._element.classList.remove(CLASS_NAME_SHOW$4);
    this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
  }
  dispose() {
    for (const htmlElement of [window, this._dialog]) {
      EventHandler.off(htmlElement, EVENT_KEY$4);
    }
    this._backdrop.dispose();
    this._focustrap.deactivate();
    super.dispose();
  }
  handleUpdate() {
    this._adjustDialog();
  }
  // Private
  _initializeBackDrop() {
    return new Backdrop({
      isVisible: Boolean(this._config.backdrop),
      // 'static' option will be translated to true, and booleans will keep their value,
      isAnimated: this._isAnimated()
    });
  }
  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }
  _showElement(relatedTarget) {
    if (!document.body.contains(this._element)) {
      document.body.append(this._element);
    }
    this._element.style.display = "block";
    this._element.removeAttribute("aria-hidden");
    this._element.setAttribute("aria-modal", true);
    this._element.setAttribute("role", "dialog");
    this._element.scrollTop = 0;
    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
    if (modalBody) {
      modalBody.scrollTop = 0;
    }
    reflow(this._element);
    this._element.classList.add(CLASS_NAME_SHOW$4);
    const transitionComplete = () => {
      if (this._config.focus) {
        this._focustrap.activate();
      }
      this._isTransitioning = false;
      EventHandler.trigger(this._element, EVENT_SHOWN$4, {
        relatedTarget
      });
    };
    this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
  }
  _addEventListeners() {
    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event) => {
      if (event.key !== ESCAPE_KEY$1) {
        return;
      }
      if (this._config.keyboard) {
        event.preventDefault();
        this.hide();
        return;
      }
      this._triggerBackdropTransition();
    });
    EventHandler.on(window, EVENT_RESIZE$1, () => {
      if (this._isShown && !this._isTransitioning) {
        this._adjustDialog();
      }
    });
    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event) => {
      EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2) => {
        if (this._element !== event.target || this._element !== event2.target) {
          return;
        }
        if (this._config.backdrop === "static") {
          this._triggerBackdropTransition();
          return;
        }
        if (this._config.backdrop) {
          this.hide();
        }
      });
    });
  }
  _hideModal() {
    this._element.style.display = "none";
    this._element.setAttribute("aria-hidden", true);
    this._element.removeAttribute("aria-modal");
    this._element.removeAttribute("role");
    this._isTransitioning = false;
    this._backdrop.hide(() => {
      document.body.classList.remove(CLASS_NAME_OPEN);
      this._resetAdjustments();
      this._scrollBar.reset();
      EventHandler.trigger(this._element, EVENT_HIDDEN$4);
    });
  }
  _isAnimated() {
    return this._element.classList.contains(CLASS_NAME_FADE$3);
  }
  _triggerBackdropTransition() {
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
    if (hideEvent.defaultPrevented) {
      return;
    }
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
    const initialOverflowY = this._element.style.overflowY;
    if (initialOverflowY === "hidden" || this._element.classList.contains(CLASS_NAME_STATIC)) {
      return;
    }
    if (!isModalOverflowing) {
      this._element.style.overflowY = "hidden";
    }
    this._element.classList.add(CLASS_NAME_STATIC);
    this._queueCallback(() => {
      this._element.classList.remove(CLASS_NAME_STATIC);
      this._queueCallback(() => {
        this._element.style.overflowY = initialOverflowY;
      }, this._dialog);
    }, this._dialog);
    this._element.focus();
  }
  /**
   * The following methods are used to handle overflowing modals
   */
  _adjustDialog() {
    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
    const scrollbarWidth = this._scrollBar.getWidth();
    const isBodyOverflowing = scrollbarWidth > 0;
    if (isBodyOverflowing && !isModalOverflowing) {
      const property = isRTL() ? "paddingLeft" : "paddingRight";
      this._element.style[property] = `${scrollbarWidth}px`;
    }
    if (!isBodyOverflowing && isModalOverflowing) {
      const property = isRTL() ? "paddingRight" : "paddingLeft";
      this._element.style[property] = `${scrollbarWidth}px`;
    }
  }
  _resetAdjustments() {
    this._element.style.paddingLeft = "";
    this._element.style.paddingRight = "";
  }
  // Static
  static jQueryInterface(config, relatedTarget) {
    return this.each(function() {
      const data = Modal.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config](relatedTarget);
    });
  }
};
EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
  const target = getElementFromSelector(this);
  if (["A", "AREA"].includes(this.tagName)) {
    event.preventDefault();
  }
  EventHandler.one(target, EVENT_SHOW$4, (showEvent) => {
    if (showEvent.defaultPrevented) {
      return;
    }
    EventHandler.one(target, EVENT_HIDDEN$4, () => {
      if (isVisible(this)) {
        this.focus();
      }
    });
  });
  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
  if (alreadyOpen) {
    Modal.getInstance(alreadyOpen).hide();
  }
  const data = Modal.getOrCreateInstance(target);
  data.toggle(this);
});
enableDismissTrigger(Modal);
defineJQueryPlugin(Modal);
var NAME$6 = "offcanvas";
var DATA_KEY$3 = "bs.offcanvas";
var EVENT_KEY$3 = `.${DATA_KEY$3}`;
var DATA_API_KEY$1 = ".data-api";
var EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
var ESCAPE_KEY = "Escape";
var CLASS_NAME_SHOW$3 = "show";
var CLASS_NAME_SHOWING$1 = "showing";
var CLASS_NAME_HIDING = "hiding";
var CLASS_NAME_BACKDROP = "offcanvas-backdrop";
var OPEN_SELECTOR = ".offcanvas.show";
var EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
var EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
var EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
var EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
var EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
var EVENT_RESIZE = `resize${EVENT_KEY$3}`;
var EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
var EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
var SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
var Default$5 = {
  backdrop: true,
  keyboard: true,
  scroll: false
};
var DefaultType$5 = {
  backdrop: "(boolean|string)",
  keyboard: "boolean",
  scroll: "boolean"
};
var Offcanvas = class extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._isShown = false;
    this._backdrop = this._initializeBackDrop();
    this._focustrap = this._initializeFocusTrap();
    this._addEventListeners();
  }
  // Getters
  static get Default() {
    return Default$5;
  }
  static get DefaultType() {
    return DefaultType$5;
  }
  static get NAME() {
    return NAME$6;
  }
  // Public
  toggle(relatedTarget) {
    return this._isShown ? this.hide() : this.show(relatedTarget);
  }
  show(relatedTarget) {
    if (this._isShown) {
      return;
    }
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
      relatedTarget
    });
    if (showEvent.defaultPrevented) {
      return;
    }
    this._isShown = true;
    this._backdrop.show();
    if (!this._config.scroll) {
      new ScrollBarHelper().hide();
    }
    this._element.setAttribute("aria-modal", true);
    this._element.setAttribute("role", "dialog");
    this._element.classList.add(CLASS_NAME_SHOWING$1);
    const completeCallBack = () => {
      if (!this._config.scroll || this._config.backdrop) {
        this._focustrap.activate();
      }
      this._element.classList.add(CLASS_NAME_SHOW$3);
      this._element.classList.remove(CLASS_NAME_SHOWING$1);
      EventHandler.trigger(this._element, EVENT_SHOWN$3, {
        relatedTarget
      });
    };
    this._queueCallback(completeCallBack, this._element, true);
  }
  hide() {
    if (!this._isShown) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
    if (hideEvent.defaultPrevented) {
      return;
    }
    this._focustrap.deactivate();
    this._element.blur();
    this._isShown = false;
    this._element.classList.add(CLASS_NAME_HIDING);
    this._backdrop.hide();
    const completeCallback = () => {
      this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
      this._element.removeAttribute("aria-modal");
      this._element.removeAttribute("role");
      if (!this._config.scroll) {
        new ScrollBarHelper().reset();
      }
      EventHandler.trigger(this._element, EVENT_HIDDEN$3);
    };
    this._queueCallback(completeCallback, this._element, true);
  }
  dispose() {
    this._backdrop.dispose();
    this._focustrap.deactivate();
    super.dispose();
  }
  // Private
  _initializeBackDrop() {
    const clickCallback = () => {
      if (this._config.backdrop === "static") {
        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
        return;
      }
      this.hide();
    };
    const isVisible2 = Boolean(this._config.backdrop);
    return new Backdrop({
      className: CLASS_NAME_BACKDROP,
      isVisible: isVisible2,
      isAnimated: true,
      rootElement: this._element.parentNode,
      clickCallback: isVisible2 ? clickCallback : null
    });
  }
  _initializeFocusTrap() {
    return new FocusTrap({
      trapElement: this._element
    });
  }
  _addEventListeners() {
    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event) => {
      if (event.key !== ESCAPE_KEY) {
        return;
      }
      if (!this._config.keyboard) {
        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
        return;
      }
      this.hide();
    });
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Offcanvas.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config](this);
    });
  }
};
EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
  const target = getElementFromSelector(this);
  if (["A", "AREA"].includes(this.tagName)) {
    event.preventDefault();
  }
  if (isDisabled(this)) {
    return;
  }
  EventHandler.one(target, EVENT_HIDDEN$3, () => {
    if (isVisible(this)) {
      this.focus();
    }
  });
  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
  if (alreadyOpen && alreadyOpen !== target) {
    Offcanvas.getInstance(alreadyOpen).hide();
  }
  const data = Offcanvas.getOrCreateInstance(target);
  data.toggle(this);
});
EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
  for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
    Offcanvas.getOrCreateInstance(selector).show();
  }
});
EventHandler.on(window, EVENT_RESIZE, () => {
  for (const element of SelectorEngine.find("[aria-modal][class*=show][class*=offcanvas-]")) {
    if (getComputedStyle(element).position !== "fixed") {
      Offcanvas.getOrCreateInstance(element).hide();
    }
  }
});
enableDismissTrigger(Offcanvas);
defineJQueryPlugin(Offcanvas);
var uriAttributes = /* @__PURE__ */ new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]);
var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i;
var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;
var allowedAttribute = (attribute, allowedAttributeList) => {
  const attributeName = attribute.nodeName.toLowerCase();
  if (allowedAttributeList.includes(attributeName)) {
    if (uriAttributes.has(attributeName)) {
      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue) || DATA_URL_PATTERN.test(attribute.nodeValue));
    }
    return true;
  }
  return allowedAttributeList.filter((attributeRegex) => attributeRegex instanceof RegExp).some((regex) => regex.test(attributeName));
};
var DefaultAllowlist = {
  // Global attributes allowed on any supplied element below.
  "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
  a: ["target", "href", "title", "rel"],
  area: [],
  b: [],
  br: [],
  col: [],
  code: [],
  div: [],
  em: [],
  hr: [],
  h1: [],
  h2: [],
  h3: [],
  h4: [],
  h5: [],
  h6: [],
  i: [],
  img: ["src", "srcset", "alt", "title", "width", "height"],
  li: [],
  ol: [],
  p: [],
  pre: [],
  s: [],
  small: [],
  span: [],
  sub: [],
  sup: [],
  strong: [],
  u: [],
  ul: []
};
function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
  if (!unsafeHtml.length) {
    return unsafeHtml;
  }
  if (sanitizeFunction && typeof sanitizeFunction === "function") {
    return sanitizeFunction(unsafeHtml);
  }
  const domParser = new window.DOMParser();
  const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
  const elements = [].concat(...createdDocument.body.querySelectorAll("*"));
  for (const element of elements) {
    const elementName = element.nodeName.toLowerCase();
    if (!Object.keys(allowList).includes(elementName)) {
      element.remove();
      continue;
    }
    const attributeList = [].concat(...element.attributes);
    const allowedAttributes = [].concat(allowList["*"] || [], allowList[elementName] || []);
    for (const attribute of attributeList) {
      if (!allowedAttribute(attribute, allowedAttributes)) {
        element.removeAttribute(attribute.nodeName);
      }
    }
  }
  return createdDocument.body.innerHTML;
}
var NAME$5 = "TemplateFactory";
var Default$4 = {
  allowList: DefaultAllowlist,
  content: {},
  // { selector : text ,  selector2 : text2 , }
  extraClass: "",
  html: false,
  sanitize: true,
  sanitizeFn: null,
  template: "<div></div>"
};
var DefaultType$4 = {
  allowList: "object",
  content: "object",
  extraClass: "(string|function)",
  html: "boolean",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  template: "string"
};
var DefaultContentType = {
  entry: "(string|element|function|null)",
  selector: "(string|element)"
};
var TemplateFactory = class extends Config {
  constructor(config) {
    super();
    this._config = this._getConfig(config);
  }
  // Getters
  static get Default() {
    return Default$4;
  }
  static get DefaultType() {
    return DefaultType$4;
  }
  static get NAME() {
    return NAME$5;
  }
  // Public
  getContent() {
    return Object.values(this._config.content).map((config) => this._resolvePossibleFunction(config)).filter(Boolean);
  }
  hasContent() {
    return this.getContent().length > 0;
  }
  changeContent(content) {
    this._checkContent(content);
    this._config.content = {
      ...this._config.content,
      ...content
    };
    return this;
  }
  toHtml() {
    const templateWrapper = document.createElement("div");
    templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
    for (const [selector, text] of Object.entries(this._config.content)) {
      this._setContent(templateWrapper, text, selector);
    }
    const template = templateWrapper.children[0];
    const extraClass = this._resolvePossibleFunction(this._config.extraClass);
    if (extraClass) {
      template.classList.add(...extraClass.split(" "));
    }
    return template;
  }
  // Private
  _typeCheckConfig(config) {
    super._typeCheckConfig(config);
    this._checkContent(config.content);
  }
  _checkContent(arg) {
    for (const [selector, content] of Object.entries(arg)) {
      super._typeCheckConfig({
        selector,
        entry: content
      }, DefaultContentType);
    }
  }
  _setContent(template, content, selector) {
    const templateElement = SelectorEngine.findOne(selector, template);
    if (!templateElement) {
      return;
    }
    content = this._resolvePossibleFunction(content);
    if (!content) {
      templateElement.remove();
      return;
    }
    if (isElement(content)) {
      this._putElementInTemplate(getElement(content), templateElement);
      return;
    }
    if (this._config.html) {
      templateElement.innerHTML = this._maybeSanitize(content);
      return;
    }
    templateElement.textContent = content;
  }
  _maybeSanitize(arg) {
    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
  }
  _resolvePossibleFunction(arg) {
    return typeof arg === "function" ? arg(this) : arg;
  }
  _putElementInTemplate(element, templateElement) {
    if (this._config.html) {
      templateElement.innerHTML = "";
      templateElement.append(element);
      return;
    }
    templateElement.textContent = element.textContent;
  }
};
var NAME$4 = "tooltip";
var DISALLOWED_ATTRIBUTES = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]);
var CLASS_NAME_FADE$2 = "fade";
var CLASS_NAME_MODAL = "modal";
var CLASS_NAME_SHOW$2 = "show";
var SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
var SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
var EVENT_MODAL_HIDE = "hide.bs.modal";
var TRIGGER_HOVER = "hover";
var TRIGGER_FOCUS = "focus";
var TRIGGER_CLICK = "click";
var TRIGGER_MANUAL = "manual";
var EVENT_HIDE$2 = "hide";
var EVENT_HIDDEN$2 = "hidden";
var EVENT_SHOW$2 = "show";
var EVENT_SHOWN$2 = "shown";
var EVENT_INSERTED = "inserted";
var EVENT_CLICK$1 = "click";
var EVENT_FOCUSIN$1 = "focusin";
var EVENT_FOCUSOUT$1 = "focusout";
var EVENT_MOUSEENTER = "mouseenter";
var EVENT_MOUSELEAVE = "mouseleave";
var AttachmentMap = {
  AUTO: "auto",
  TOP: "top",
  RIGHT: isRTL() ? "left" : "right",
  BOTTOM: "bottom",
  LEFT: isRTL() ? "right" : "left"
};
var Default$3 = {
  allowList: DefaultAllowlist,
  animation: true,
  boundary: "clippingParents",
  container: false,
  customClass: "",
  delay: 0,
  fallbackPlacements: ["top", "right", "bottom", "left"],
  html: false,
  offset: [0, 0],
  placement: "top",
  popperConfig: null,
  sanitize: true,
  sanitizeFn: null,
  selector: false,
  template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
  title: "",
  trigger: "hover focus"
};
var DefaultType$3 = {
  allowList: "object",
  animation: "boolean",
  boundary: "(string|element)",
  container: "(string|element|boolean)",
  customClass: "(string|function)",
  delay: "(number|object)",
  fallbackPlacements: "array",
  html: "boolean",
  offset: "(array|string|function)",
  placement: "(string|function)",
  popperConfig: "(null|object|function)",
  sanitize: "boolean",
  sanitizeFn: "(null|function)",
  selector: "(string|boolean)",
  template: "string",
  title: "(string|element|function)",
  trigger: "string"
};
var Tooltip = class extends BaseComponent {
  constructor(element, config) {
    if (typeof lib_exports === "undefined") {
      throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
    }
    super(element, config);
    this._isEnabled = true;
    this._timeout = 0;
    this._isHovered = null;
    this._activeTrigger = {};
    this._popper = null;
    this._templateFactory = null;
    this._newContent = null;
    this.tip = null;
    this._setListeners();
    if (!this._config.selector) {
      this._fixTitle();
    }
  }
  // Getters
  static get Default() {
    return Default$3;
  }
  static get DefaultType() {
    return DefaultType$3;
  }
  static get NAME() {
    return NAME$4;
  }
  // Public
  enable() {
    this._isEnabled = true;
  }
  disable() {
    this._isEnabled = false;
  }
  toggleEnabled() {
    this._isEnabled = !this._isEnabled;
  }
  toggle() {
    if (!this._isEnabled) {
      return;
    }
    this._activeTrigger.click = !this._activeTrigger.click;
    if (this._isShown()) {
      this._leave();
      return;
    }
    this._enter();
  }
  dispose() {
    clearTimeout(this._timeout);
    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    if (this._element.getAttribute("data-bs-original-title")) {
      this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title"));
    }
    this._disposePopper();
    super.dispose();
  }
  show() {
    if (this._element.style.display === "none") {
      throw new Error("Please use show on visible elements");
    }
    if (!(this._isWithContent() && this._isEnabled)) {
      return;
    }
    const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
    const shadowRoot = findShadowRoot(this._element);
    const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
    if (showEvent.defaultPrevented || !isInTheDom) {
      return;
    }
    this._disposePopper();
    const tip = this._getTipElement();
    this._element.setAttribute("aria-describedby", tip.getAttribute("id"));
    const {
      container
    } = this._config;
    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
      container.append(tip);
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
    }
    this._popper = this._createPopper(tip);
    tip.classList.add(CLASS_NAME_SHOW$2);
    if ("ontouchstart" in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.on(element, "mouseover", noop);
      }
    }
    const complete = () => {
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
      if (this._isHovered === false) {
        this._leave();
      }
      this._isHovered = false;
    };
    this._queueCallback(complete, this.tip, this._isAnimated());
  }
  hide() {
    if (!this._isShown()) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
    if (hideEvent.defaultPrevented) {
      return;
    }
    const tip = this._getTipElement();
    tip.classList.remove(CLASS_NAME_SHOW$2);
    if ("ontouchstart" in document.documentElement) {
      for (const element of [].concat(...document.body.children)) {
        EventHandler.off(element, "mouseover", noop);
      }
    }
    this._activeTrigger[TRIGGER_CLICK] = false;
    this._activeTrigger[TRIGGER_FOCUS] = false;
    this._activeTrigger[TRIGGER_HOVER] = false;
    this._isHovered = null;
    const complete = () => {
      if (this._isWithActiveTrigger()) {
        return;
      }
      if (!this._isHovered) {
        this._disposePopper();
      }
      this._element.removeAttribute("aria-describedby");
      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
    };
    this._queueCallback(complete, this.tip, this._isAnimated());
  }
  update() {
    if (this._popper) {
      this._popper.update();
    }
  }
  // Protected
  _isWithContent() {
    return Boolean(this._getTitle());
  }
  _getTipElement() {
    if (!this.tip) {
      this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
    }
    return this.tip;
  }
  _createTipElement(content) {
    const tip = this._getTemplateFactory(content).toHtml();
    if (!tip) {
      return null;
    }
    tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
    tip.classList.add(`bs-${this.constructor.NAME}-auto`);
    const tipId = getUID(this.constructor.NAME).toString();
    tip.setAttribute("id", tipId);
    if (this._isAnimated()) {
      tip.classList.add(CLASS_NAME_FADE$2);
    }
    return tip;
  }
  setContent(content) {
    this._newContent = content;
    if (this._isShown()) {
      this._disposePopper();
      this.show();
    }
  }
  _getTemplateFactory(content) {
    if (this._templateFactory) {
      this._templateFactory.changeContent(content);
    } else {
      this._templateFactory = new TemplateFactory({
        ...this._config,
        // the `content` var has to be after `this._config`
        // to override config.content in case of popover
        content,
        extraClass: this._resolvePossibleFunction(this._config.customClass)
      });
    }
    return this._templateFactory;
  }
  _getContentForTemplate() {
    return {
      [SELECTOR_TOOLTIP_INNER]: this._getTitle()
    };
  }
  _getTitle() {
    return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title");
  }
  // Private
  _initializeOnDelegatedTarget(event) {
    return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
  }
  _isAnimated() {
    return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
  }
  _isShown() {
    return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
  }
  _createPopper(tip) {
    const placement = typeof this._config.placement === "function" ? this._config.placement.call(this, tip, this._element) : this._config.placement;
    const attachment = AttachmentMap[placement.toUpperCase()];
    return createPopper(this._element, tip, this._getPopperConfig(attachment));
  }
  _getOffset() {
    const {
      offset
    } = this._config;
    if (typeof offset === "string") {
      return offset.split(",").map((value) => Number.parseInt(value, 10));
    }
    if (typeof offset === "function") {
      return (popperData) => offset(popperData, this._element);
    }
    return offset;
  }
  _resolvePossibleFunction(arg) {
    return typeof arg === "function" ? arg.call(this._element) : arg;
  }
  _getPopperConfig(attachment) {
    const defaultBsPopperConfig = {
      placement: attachment,
      modifiers: [{
        name: "flip",
        options: {
          fallbackPlacements: this._config.fallbackPlacements
        }
      }, {
        name: "offset",
        options: {
          offset: this._getOffset()
        }
      }, {
        name: "preventOverflow",
        options: {
          boundary: this._config.boundary
        }
      }, {
        name: "arrow",
        options: {
          element: `.${this.constructor.NAME}-arrow`
        }
      }, {
        name: "preSetPlacement",
        enabled: true,
        phase: "beforeMain",
        fn: (data) => {
          this._getTipElement().setAttribute("data-popper-placement", data.state.placement);
        }
      }]
    };
    return {
      ...defaultBsPopperConfig,
      ...typeof this._config.popperConfig === "function" ? this._config.popperConfig(defaultBsPopperConfig) : this._config.popperConfig
    };
  }
  _setListeners() {
    const triggers = this._config.trigger.split(" ");
    for (const trigger of triggers) {
      if (trigger === "click") {
        EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event) => {
          const context = this._initializeOnDelegatedTarget(event);
          context.toggle();
        });
      } else if (trigger !== TRIGGER_MANUAL) {
        const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
        const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
        EventHandler.on(this._element, eventIn, this._config.selector, (event) => {
          const context = this._initializeOnDelegatedTarget(event);
          context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
          context._enter();
        });
        EventHandler.on(this._element, eventOut, this._config.selector, (event) => {
          const context = this._initializeOnDelegatedTarget(event);
          context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
          context._leave();
        });
      }
    }
    this._hideModalHandler = () => {
      if (this._element) {
        this.hide();
      }
    };
    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
  }
  _fixTitle() {
    const title = this._element.getAttribute("title");
    if (!title) {
      return;
    }
    if (!this._element.getAttribute("aria-label") && !this._element.textContent.trim()) {
      this._element.setAttribute("aria-label", title);
    }
    this._element.setAttribute("data-bs-original-title", title);
    this._element.removeAttribute("title");
  }
  _enter() {
    if (this._isShown() || this._isHovered) {
      this._isHovered = true;
      return;
    }
    this._isHovered = true;
    this._setTimeout(() => {
      if (this._isHovered) {
        this.show();
      }
    }, this._config.delay.show);
  }
  _leave() {
    if (this._isWithActiveTrigger()) {
      return;
    }
    this._isHovered = false;
    this._setTimeout(() => {
      if (!this._isHovered) {
        this.hide();
      }
    }, this._config.delay.hide);
  }
  _setTimeout(handler, timeout) {
    clearTimeout(this._timeout);
    this._timeout = setTimeout(handler, timeout);
  }
  _isWithActiveTrigger() {
    return Object.values(this._activeTrigger).includes(true);
  }
  _getConfig(config) {
    const dataAttributes = Manipulator.getDataAttributes(this._element);
    for (const dataAttribute of Object.keys(dataAttributes)) {
      if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
        delete dataAttributes[dataAttribute];
      }
    }
    config = {
      ...dataAttributes,
      ...typeof config === "object" && config ? config : {}
    };
    config = this._mergeConfigObj(config);
    config = this._configAfterMerge(config);
    this._typeCheckConfig(config);
    return config;
  }
  _configAfterMerge(config) {
    config.container = config.container === false ? document.body : getElement(config.container);
    if (typeof config.delay === "number") {
      config.delay = {
        show: config.delay,
        hide: config.delay
      };
    }
    if (typeof config.title === "number") {
      config.title = config.title.toString();
    }
    if (typeof config.content === "number") {
      config.content = config.content.toString();
    }
    return config;
  }
  _getDelegateConfig() {
    const config = {};
    for (const key in this._config) {
      if (this.constructor.Default[key] !== this._config[key]) {
        config[key] = this._config[key];
      }
    }
    config.selector = false;
    config.trigger = "manual";
    return config;
  }
  _disposePopper() {
    if (this._popper) {
      this._popper.destroy();
      this._popper = null;
    }
    if (this.tip) {
      this.tip.remove();
      this.tip = null;
    }
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Tooltip.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config]();
    });
  }
};
defineJQueryPlugin(Tooltip);
var NAME$3 = "popover";
var SELECTOR_TITLE = ".popover-header";
var SELECTOR_CONTENT = ".popover-body";
var Default$2 = {
  ...Tooltip.Default,
  content: "",
  offset: [0, 8],
  placement: "right",
  template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
  trigger: "click"
};
var DefaultType$2 = {
  ...Tooltip.DefaultType,
  content: "(null|string|element|function)"
};
var Popover = class extends Tooltip {
  // Getters
  static get Default() {
    return Default$2;
  }
  static get DefaultType() {
    return DefaultType$2;
  }
  static get NAME() {
    return NAME$3;
  }
  // Overrides
  _isWithContent() {
    return this._getTitle() || this._getContent();
  }
  // Private
  _getContentForTemplate() {
    return {
      [SELECTOR_TITLE]: this._getTitle(),
      [SELECTOR_CONTENT]: this._getContent()
    };
  }
  _getContent() {
    return this._resolvePossibleFunction(this._config.content);
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Popover.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (typeof data[config] === "undefined") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config]();
    });
  }
};
defineJQueryPlugin(Popover);
var NAME$2 = "scrollspy";
var DATA_KEY$2 = "bs.scrollspy";
var EVENT_KEY$2 = `.${DATA_KEY$2}`;
var DATA_API_KEY = ".data-api";
var EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
var EVENT_CLICK = `click${EVENT_KEY$2}`;
var EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
var CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
var CLASS_NAME_ACTIVE$1 = "active";
var SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
var SELECTOR_TARGET_LINKS = "[href]";
var SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
var SELECTOR_NAV_LINKS = ".nav-link";
var SELECTOR_NAV_ITEMS = ".nav-item";
var SELECTOR_LIST_ITEMS = ".list-group-item";
var SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
var SELECTOR_DROPDOWN = ".dropdown";
var SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
var Default$1 = {
  offset: null,
  // TODO: v6 @deprecated, keep it for backwards compatibility reasons
  rootMargin: "0px 0px -25%",
  smoothScroll: false,
  target: null,
  threshold: [0.1, 0.5, 1]
};
var DefaultType$1 = {
  offset: "(number|null)",
  // TODO v6 @deprecated, keep it for backwards compatibility reasons
  rootMargin: "string",
  smoothScroll: "boolean",
  target: "element",
  threshold: "array"
};
var ScrollSpy = class extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._targetLinks = /* @__PURE__ */ new Map();
    this._observableSections = /* @__PURE__ */ new Map();
    this._rootElement = getComputedStyle(this._element).overflowY === "visible" ? null : this._element;
    this._activeTarget = null;
    this._observer = null;
    this._previousScrollData = {
      visibleEntryTop: 0,
      parentScrollTop: 0
    };
    this.refresh();
  }
  // Getters
  static get Default() {
    return Default$1;
  }
  static get DefaultType() {
    return DefaultType$1;
  }
  static get NAME() {
    return NAME$2;
  }
  // Public
  refresh() {
    this._initializeTargetsAndObservables();
    this._maybeEnableSmoothScroll();
    if (this._observer) {
      this._observer.disconnect();
    } else {
      this._observer = this._getNewObserver();
    }
    for (const section of this._observableSections.values()) {
      this._observer.observe(section);
    }
  }
  dispose() {
    this._observer.disconnect();
    super.dispose();
  }
  // Private
  _configAfterMerge(config) {
    config.target = getElement(config.target) || document.body;
    config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin;
    if (typeof config.threshold === "string") {
      config.threshold = config.threshold.split(",").map((value) => Number.parseFloat(value));
    }
    return config;
  }
  _maybeEnableSmoothScroll() {
    if (!this._config.smoothScroll) {
      return;
    }
    EventHandler.off(this._config.target, EVENT_CLICK);
    EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event) => {
      const observableSection = this._observableSections.get(event.target.hash);
      if (observableSection) {
        event.preventDefault();
        const root = this._rootElement || window;
        const height = observableSection.offsetTop - this._element.offsetTop;
        if (root.scrollTo) {
          root.scrollTo({
            top: height,
            behavior: "smooth"
          });
          return;
        }
        root.scrollTop = height;
      }
    });
  }
  _getNewObserver() {
    const options = {
      root: this._rootElement,
      threshold: this._config.threshold,
      rootMargin: this._config.rootMargin
    };
    return new IntersectionObserver((entries) => this._observerCallback(entries), options);
  }
  // The logic of selection
  _observerCallback(entries) {
    const targetElement = (entry) => this._targetLinks.get(`#${entry.target.id}`);
    const activate = (entry) => {
      this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
      this._process(targetElement(entry));
    };
    const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
    const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
    this._previousScrollData.parentScrollTop = parentScrollTop;
    for (const entry of entries) {
      if (!entry.isIntersecting) {
        this._activeTarget = null;
        this._clearActiveClass(targetElement(entry));
        continue;
      }
      const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
      if (userScrollsDown && entryIsLowerThanPrevious) {
        activate(entry);
        if (!parentScrollTop) {
          return;
        }
        continue;
      }
      if (!userScrollsDown && !entryIsLowerThanPrevious) {
        activate(entry);
      }
    }
  }
  _initializeTargetsAndObservables() {
    this._targetLinks = /* @__PURE__ */ new Map();
    this._observableSections = /* @__PURE__ */ new Map();
    const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
    for (const anchor of targetLinks) {
      if (!anchor.hash || isDisabled(anchor)) {
        continue;
      }
      const observableSection = SelectorEngine.findOne(anchor.hash, this._element);
      if (isVisible(observableSection)) {
        this._targetLinks.set(anchor.hash, anchor);
        this._observableSections.set(anchor.hash, observableSection);
      }
    }
  }
  _process(target) {
    if (this._activeTarget === target) {
      return;
    }
    this._clearActiveClass(this._config.target);
    this._activeTarget = target;
    target.classList.add(CLASS_NAME_ACTIVE$1);
    this._activateParents(target);
    EventHandler.trigger(this._element, EVENT_ACTIVATE, {
      relatedTarget: target
    });
  }
  _activateParents(target) {
    if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
      return;
    }
    for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
      for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
        item.classList.add(CLASS_NAME_ACTIVE$1);
      }
    }
  }
  _clearActiveClass(parent) {
    parent.classList.remove(CLASS_NAME_ACTIVE$1);
    const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
    for (const node of activeNodes) {
      node.classList.remove(CLASS_NAME_ACTIVE$1);
    }
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = ScrollSpy.getOrCreateInstance(this, config);
      if (typeof config !== "string") {
        return;
      }
      if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config]();
    });
  }
};
EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
  for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
    ScrollSpy.getOrCreateInstance(spy);
  }
});
defineJQueryPlugin(ScrollSpy);
var NAME$1 = "tab";
var DATA_KEY$1 = "bs.tab";
var EVENT_KEY$1 = `.${DATA_KEY$1}`;
var EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
var EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
var EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
var EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
var EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
var EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
var EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
var ARROW_LEFT_KEY = "ArrowLeft";
var ARROW_RIGHT_KEY = "ArrowRight";
var ARROW_UP_KEY = "ArrowUp";
var ARROW_DOWN_KEY = "ArrowDown";
var CLASS_NAME_ACTIVE = "active";
var CLASS_NAME_FADE$1 = "fade";
var CLASS_NAME_SHOW$1 = "show";
var CLASS_DROPDOWN = "dropdown";
var SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
var SELECTOR_DROPDOWN_MENU = ".dropdown-menu";
var NOT_SELECTOR_DROPDOWN_TOGGLE = ":not(.dropdown-toggle)";
var SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
var SELECTOR_OUTER = ".nav-item, .list-group-item";
var SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
var SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
var SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
var SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
var Tab = class extends BaseComponent {
  constructor(element) {
    super(element);
    this._parent = this._element.closest(SELECTOR_TAB_PANEL);
    if (!this._parent) {
      return;
    }
    this._setInitialAttributes(this._parent, this._getChildren());
    EventHandler.on(this._element, EVENT_KEYDOWN, (event) => this._keydown(event));
  }
  // Getters
  static get NAME() {
    return NAME$1;
  }
  // Public
  show() {
    const innerElem = this._element;
    if (this._elemIsActive(innerElem)) {
      return;
    }
    const active = this._getActiveElem();
    const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
      relatedTarget: innerElem
    }) : null;
    const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
      relatedTarget: active
    });
    if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
      return;
    }
    this._deactivate(active, innerElem);
    this._activate(innerElem, active);
  }
  // Private
  _activate(element, relatedElem) {
    if (!element) {
      return;
    }
    element.classList.add(CLASS_NAME_ACTIVE);
    this._activate(getElementFromSelector(element));
    const complete = () => {
      if (element.getAttribute("role") !== "tab") {
        element.classList.add(CLASS_NAME_SHOW$1);
        return;
      }
      element.removeAttribute("tabindex");
      element.setAttribute("aria-selected", true);
      this._toggleDropDown(element, true);
      EventHandler.trigger(element, EVENT_SHOWN$1, {
        relatedTarget: relatedElem
      });
    };
    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
  }
  _deactivate(element, relatedElem) {
    if (!element) {
      return;
    }
    element.classList.remove(CLASS_NAME_ACTIVE);
    element.blur();
    this._deactivate(getElementFromSelector(element));
    const complete = () => {
      if (element.getAttribute("role") !== "tab") {
        element.classList.remove(CLASS_NAME_SHOW$1);
        return;
      }
      element.setAttribute("aria-selected", false);
      element.setAttribute("tabindex", "-1");
      this._toggleDropDown(element, false);
      EventHandler.trigger(element, EVENT_HIDDEN$1, {
        relatedTarget: relatedElem
      });
    };
    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
  }
  _keydown(event) {
    if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)) {
      return;
    }
    event.stopPropagation();
    event.preventDefault();
    const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
    const nextActiveElement = getNextActiveElement(this._getChildren().filter((element) => !isDisabled(element)), event.target, isNext, true);
    if (nextActiveElement) {
      nextActiveElement.focus({
        preventScroll: true
      });
      Tab.getOrCreateInstance(nextActiveElement).show();
    }
  }
  _getChildren() {
    return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
  }
  _getActiveElem() {
    return this._getChildren().find((child) => this._elemIsActive(child)) || null;
  }
  _setInitialAttributes(parent, children) {
    this._setAttributeIfNotExists(parent, "role", "tablist");
    for (const child of children) {
      this._setInitialAttributesOnChild(child);
    }
  }
  _setInitialAttributesOnChild(child) {
    child = this._getInnerElement(child);
    const isActive = this._elemIsActive(child);
    const outerElem = this._getOuterElement(child);
    child.setAttribute("aria-selected", isActive);
    if (outerElem !== child) {
      this._setAttributeIfNotExists(outerElem, "role", "presentation");
    }
    if (!isActive) {
      child.setAttribute("tabindex", "-1");
    }
    this._setAttributeIfNotExists(child, "role", "tab");
    this._setInitialAttributesOnTargetPanel(child);
  }
  _setInitialAttributesOnTargetPanel(child) {
    const target = getElementFromSelector(child);
    if (!target) {
      return;
    }
    this._setAttributeIfNotExists(target, "role", "tabpanel");
    if (child.id) {
      this._setAttributeIfNotExists(target, "aria-labelledby", `#${child.id}`);
    }
  }
  _toggleDropDown(element, open) {
    const outerElem = this._getOuterElement(element);
    if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
      return;
    }
    const toggle = (selector, className) => {
      const element2 = SelectorEngine.findOne(selector, outerElem);
      if (element2) {
        element2.classList.toggle(className, open);
      }
    };
    toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
    toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
    outerElem.setAttribute("aria-expanded", open);
  }
  _setAttributeIfNotExists(element, attribute, value) {
    if (!element.hasAttribute(attribute)) {
      element.setAttribute(attribute, value);
    }
  }
  _elemIsActive(elem) {
    return elem.classList.contains(CLASS_NAME_ACTIVE);
  }
  // Try to get the inner element (usually the .nav-link)
  _getInnerElement(elem) {
    return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
  }
  // Try to get the outer element (usually the .nav-item)
  _getOuterElement(elem) {
    return elem.closest(SELECTOR_OUTER) || elem;
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Tab.getOrCreateInstance(this);
      if (typeof config !== "string") {
        return;
      }
      if (data[config] === void 0 || config.startsWith("_") || config === "constructor") {
        throw new TypeError(`No method named "${config}"`);
      }
      data[config]();
    });
  }
};
EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
  if (["A", "AREA"].includes(this.tagName)) {
    event.preventDefault();
  }
  if (isDisabled(this)) {
    return;
  }
  Tab.getOrCreateInstance(this).show();
});
EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
  for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
    Tab.getOrCreateInstance(element);
  }
});
defineJQueryPlugin(Tab);
var NAME = "toast";
var DATA_KEY = "bs.toast";
var EVENT_KEY = `.${DATA_KEY}`;
var EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
var EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
var EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
var EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
var EVENT_HIDE = `hide${EVENT_KEY}`;
var EVENT_HIDDEN = `hidden${EVENT_KEY}`;
var EVENT_SHOW = `show${EVENT_KEY}`;
var EVENT_SHOWN = `shown${EVENT_KEY}`;
var CLASS_NAME_FADE = "fade";
var CLASS_NAME_HIDE = "hide";
var CLASS_NAME_SHOW = "show";
var CLASS_NAME_SHOWING = "showing";
var DefaultType = {
  animation: "boolean",
  autohide: "boolean",
  delay: "number"
};
var Default = {
  animation: true,
  autohide: true,
  delay: 5e3
};
var Toast = class extends BaseComponent {
  constructor(element, config) {
    super(element, config);
    this._timeout = null;
    this._hasMouseInteraction = false;
    this._hasKeyboardInteraction = false;
    this._setListeners();
  }
  // Getters
  static get Default() {
    return Default;
  }
  static get DefaultType() {
    return DefaultType;
  }
  static get NAME() {
    return NAME;
  }
  // Public
  show() {
    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
    if (showEvent.defaultPrevented) {
      return;
    }
    this._clearTimeout();
    if (this._config.animation) {
      this._element.classList.add(CLASS_NAME_FADE);
    }
    const complete = () => {
      this._element.classList.remove(CLASS_NAME_SHOWING);
      EventHandler.trigger(this._element, EVENT_SHOWN);
      this._maybeScheduleHide();
    };
    this._element.classList.remove(CLASS_NAME_HIDE);
    reflow(this._element);
    this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
    this._queueCallback(complete, this._element, this._config.animation);
  }
  hide() {
    if (!this.isShown()) {
      return;
    }
    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
    if (hideEvent.defaultPrevented) {
      return;
    }
    const complete = () => {
      this._element.classList.add(CLASS_NAME_HIDE);
      this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
      EventHandler.trigger(this._element, EVENT_HIDDEN);
    };
    this._element.classList.add(CLASS_NAME_SHOWING);
    this._queueCallback(complete, this._element, this._config.animation);
  }
  dispose() {
    this._clearTimeout();
    if (this.isShown()) {
      this._element.classList.remove(CLASS_NAME_SHOW);
    }
    super.dispose();
  }
  isShown() {
    return this._element.classList.contains(CLASS_NAME_SHOW);
  }
  // Private
  _maybeScheduleHide() {
    if (!this._config.autohide) {
      return;
    }
    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
      return;
    }
    this._timeout = setTimeout(() => {
      this.hide();
    }, this._config.delay);
  }
  _onInteraction(event, isInteracting) {
    switch (event.type) {
      case "mouseover":
      case "mouseout": {
        this._hasMouseInteraction = isInteracting;
        break;
      }
      case "focusin":
      case "focusout": {
        this._hasKeyboardInteraction = isInteracting;
        break;
      }
    }
    if (isInteracting) {
      this._clearTimeout();
      return;
    }
    const nextElement = event.relatedTarget;
    if (this._element === nextElement || this._element.contains(nextElement)) {
      return;
    }
    this._maybeScheduleHide();
  }
  _setListeners() {
    EventHandler.on(this._element, EVENT_MOUSEOVER, (event) => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_MOUSEOUT, (event) => this._onInteraction(event, false));
    EventHandler.on(this._element, EVENT_FOCUSIN, (event) => this._onInteraction(event, true));
    EventHandler.on(this._element, EVENT_FOCUSOUT, (event) => this._onInteraction(event, false));
  }
  _clearTimeout() {
    clearTimeout(this._timeout);
    this._timeout = null;
  }
  // Static
  static jQueryInterface(config) {
    return this.each(function() {
      const data = Toast.getOrCreateInstance(this, config);
      if (typeof config === "string") {
        if (typeof data[config] === "undefined") {
          throw new TypeError(`No method named "${config}"`);
        }
        data[config](this);
      }
    });
  }
};
enableDismissTrigger(Toast);
defineJQueryPlugin(Toast);

// node_modules/bootstrap-vue-next/dist/bootstrap-vue-next.es.js
var Vn = Object.defineProperty;
var An = (e, t, a) => t in e ? Vn(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var me = (e, t, a) => (An(e, typeof t != "symbol" ? t + "" : t, a), a);
var Dn = (e) => typeof e == "boolean" || e === "" || e === "true" || e === "false";
var dl = (e) => typeof e == "boolean" ? e : e === "" ? true : e === "true";
var De = class {
  constructor(t, a = {}) {
    me(this, "cancelable", true);
    me(this, "componentId", null);
    me(this, "_defaultPrevented", false);
    me(this, "eventType", "");
    me(this, "nativeEvent", null);
    me(this, "_preventDefault");
    me(this, "relatedTarget", null);
    me(this, "target", null);
    if (!t)
      throw new TypeError(
        `Failed to construct '${this.constructor.name}'. 1 argument required, ${arguments.length} given.`
      );
    Object.assign(this, De.Defaults, a, { eventType: t }), this._preventDefault = function() {
      this.cancelable && (this.defaultPrevented = true);
    };
  }
  get defaultPrevented() {
    return this._defaultPrevented;
  }
  set defaultPrevented(t) {
    this._defaultPrevented = t;
  }
  get preventDefault() {
    return this._preventDefault;
  }
  set preventDefault(t) {
    this._preventDefault = t;
  }
  static get Defaults() {
    return {
      cancelable: true,
      componentId: null,
      eventType: "",
      nativeEvent: null,
      relatedTarget: null,
      target: null
    };
  }
};
var oa = class extends De {
  constructor(a, l = {}) {
    super(a, l);
    me(this, "trigger", null);
    Object.assign(this, De.Defaults, l, { eventType: a });
  }
  static get Defaults() {
    return {
      ...super.Defaults,
      trigger: null
    };
  }
};
var cl = class extends De {
  constructor(a, l) {
    super(a, l);
    me(this, "from");
    me(this, "to");
    me(this, "direction");
    Object.assign(this, De.Defaults, l, { eventType: a });
    const { from: n, direction: r, to: d } = l;
    this.from = n, this.to = d, this.direction = r;
  }
  static get Defaults() {
    return {
      ...super.Defaults
    };
  }
};
var Rt = (e) => e !== null && typeof e == "object";
var fl = (e) => /^[0-9]*\.?[0-9]+$/.test(String(e));
var Hn = (e) => Object.prototype.toString.call(e) === "[object Object]";
var ze = (e) => e === null;
var vl = /_/g;
var ml = /([a-z])([A-Z])/g;
var Mn = /(\s|^)(\w)/g;
var Rn = /(\s|^)(\w)/;
var pt = /\s+/;
var jn = /^#/;
var qn = /^#[A-Za-z]+[\w\-:.]*$/;
var Gn = /-u-.+/;
var Bt = (e, t = 2) => typeof e == "string" ? e : e == null ? "" : Array.isArray(e) || Hn(e) && e.toString === Object.prototype.toString ? JSON.stringify(e, null, t) : String(e);
var ma = (e) => e.replace(vl, " ").replace(ml, (t, a, l) => `${a} ${l}`).replace(Rn, (t, a, l) => a + l.toUpperCase());
var pa = (e) => e.replace(vl, " ").replace(ml, (t, a, l) => `${a} ${l}`).replace(Mn, (t, a, l) => a + l.toUpperCase());
var Un = (e) => {
  const t = e.trim();
  return t.charAt(0).toUpperCase() + t.slice(1);
};
var zt = (e) => `\\${e}`;
var Wn = (e) => {
  const t = Bt(e), { length: a } = t, l = t.charCodeAt(0);
  return t.split("").reduce((n, r, d) => {
    const c = t.charCodeAt(d);
    return c === 0 ? `${n}�` : c === 127 || c >= 1 && c <= 31 || d === 0 && c >= 48 && c <= 57 || d === 1 && c >= 48 && c <= 57 && l === 45 ? n + zt(`${c.toString(16)} `) : d === 0 && c === 45 && a === 1 ? n + zt(r) : c >= 128 || c === 45 || c === 95 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 ? n + r : n + zt(r);
  }, "");
};
var pl = typeof window < "u";
var bl = typeof document < "u";
var Kn = typeof Element < "u";
var gl = typeof navigator < "u";
var Tt = pl && bl && gl;
var Ke = pl ? window : {};
var Vt = bl ? document : {};
var hl = gl ? navigator : {};
var yl = (hl.userAgent || "").toLowerCase();
yl.indexOf("jsdom") > 0;
/msie|trident/.test(yl);
(() => {
  let e = false;
  if (Tt)
    try {
      const t = {
        get passive() {
          return e = true, e;
        }
      };
      Ke.addEventListener("test", t, t), Ke.removeEventListener("test", t, t);
    } catch {
      e = false;
    }
  return e;
})();
Tt && ("ontouchstart" in Vt.documentElement || hl.maxTouchPoints > 0);
Tt && Boolean(Ke.PointerEvent || Ke.MSPointerEvent);
Tt && "IntersectionObserver" in Ke && "IntersectionObserverEntry" in Ke && "intersectionRatio" in Ke.IntersectionObserverEntry.prototype;
var sa = typeof window < "u";
var Xn = typeof document < "u";
var Jn = typeof navigator < "u";
var Bl = sa && Xn && Jn;
var ba = sa ? window : {};
var Qn = (() => {
  let e = false;
  if (Bl)
    try {
      const t = {
        get passive() {
          e = true;
        }
      };
      ba.addEventListener("test", t, t), ba.removeEventListener("test", t, t);
    } catch {
      e = false;
    }
  return e;
})();
var Oe = Kn ? Element.prototype : void 0;
var Yn = (Oe == null ? void 0 : Oe.matches) || (Oe == null ? void 0 : Oe.msMatchesSelector) || (Oe == null ? void 0 : Oe.webkitMatchesSelector);
var Le = (e) => !!(e && e.nodeType === Node.ELEMENT_NODE);
var Zn = (e) => Le(e) ? e.getBoundingClientRect() : null;
var eo = (e = []) => {
  const { activeElement: t } = document;
  return t && !e.some((a) => a === t) ? t : null;
};
var to = (e) => Le(e) && e === eo();
var ao = (e, t = {}) => {
  try {
    e.focus(t);
  } catch (a) {
    console.error(a);
  }
  return to(e);
};
var lo = (e, t) => t && Le(e) && e.getAttribute(t) || null;
var no = (e) => {
  if (lo(e, "display") === "none")
    return false;
  const t = Zn(e);
  return !!(t && t.height > 0 && t.width > 0);
};
var we = (e) => {
  var t;
  return ((t = e == null ? void 0 : e()) != null ? t : []).length === 0;
};
var $l = (e, t) => (Le(t) ? t : Vt).querySelector(e) || null;
var oo = (e, t) => Array.from([(Le(t) ? t : Vt).querySelectorAll(e)]);
var ra = (e, t) => t && Le(e) ? e.getAttribute(t) : null;
var so = (e) => Vt.getElementById(/^#/.test(e) ? e.slice(1) : e) || null;
var ro = (e, t, a) => {
  t && Le(e) && e.setAttribute(t, a);
};
var io = (e, t) => {
  t && Le(e) && e.removeAttribute(t);
};
var uo = (e, t) => Bt(e).toLowerCase() === Bt(t).toLowerCase();
var ft = sa ? window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || ((e) => setTimeout(e, 16)) : (e) => setTimeout(e, 0);
var kl = (e, t) => Le(e) ? Yn.call(e, t) : false;
var co = (Oe == null ? void 0 : Oe.closest) || function(e) {
  let t = this;
  if (!t)
    return null;
  do {
    if (kl(t, e))
      return t;
    t = t.parentElement || t.parentNode;
  } while (t !== null && t.nodeType === Node.ELEMENT_NODE);
  return null;
};
var ga = (e, t, a = false) => {
  if (!Le(t))
    return null;
  const l = co.call(t, e);
  return a ? l : l === t ? null : l;
};
var At = (e, t, a) => t.concat(["sm", "md", "lg", "xl", "xxl"]).reduce((l, n) => (l[e ? `${e}${n.charAt(0).toUpperCase() + n.slice(1)}` : n] = a, l), /* @__PURE__ */ Object.create(null));
var Sl = (e, t, a, l = a) => Object.keys(t).reduce((n, r) => (e[r] && n.push(
  [l, r.replace(a, ""), e[r]].filter((d) => d && typeof d != "boolean").join("-").toLowerCase()
), n), []);
var Re = (e = "") => `__BVID__${Math.random().toString().slice(2, 8)}___BV_${e}__`;
var it = (e) => !!(e.href || e.to);
var Nt = (e) => !!e && typeof e == "object" && e.constructor === Object;
var jt = (e, t, a = true) => {
  const l = e instanceof Date && typeof e.getMonth == "function" ? new Date(e.getTime()) : Object.assign({}, e);
  return Nt(e) && Nt(t) && Object.keys(t).forEach((n) => {
    Nt(t[n]) ? n in e ? l[n] = jt(e[n], t[n], a) : Object.assign(l, { [n]: t[n] }) : Array.isArray(t[n]) && Array.isArray(e[n]) ? Object.assign(l, {
      [n]: a ? e[n].concat(
        t[n].filter((r) => !e[n].includes(r))
      ) : t[n]
    }) : Object.assign(l, { [n]: t[n] });
  }), l;
};
var Pe = (e, t = {}, a = {}) => {
  const l = [e];
  let n;
  for (let r = 0; r < l.length && !n; r++) {
    const d = l[r];
    n = a[d];
  }
  return n && typeof n == "function" ? n(t) : n;
};
var je = (e, t = NaN) => Number.isInteger(e) ? e : t;
var ot = (e, t = NaN) => {
  const a = Number.parseInt(e, 10);
  return Number.isNaN(a) ? t : a;
};
var rt = (e, t = NaN) => {
  const a = Number.parseFloat(e.toString());
  return Number.isNaN(a) ? t : a;
};
var Ot = (e, t) => Object.keys(e).filter((a) => !t.includes(a)).reduce((a, l) => ({ ...a, [l]: e[l] }), {});
var $t = (e) => Array.isArray(e) ? e.map((t) => $t(t)) : e instanceof Date ? new Date(e.getTime()) : e && typeof e == "object" ? Object.getOwnPropertyNames(e).reduce((t, a) => {
  var l;
  return Object.defineProperty(t, a, (l = Object.getOwnPropertyDescriptor(e, a)) != null ? l : {}), t[a] = $t(e[a]), t;
}, Object.create(Object.getPrototypeOf(e))) : e;
var qt = (e) => new Promise((t) => t($t(e)));
var ha = (e, t) => t + (e ? Un(e) : "");
var ia = (e, t) => (Array.isArray(t) ? t.slice() : Object.keys(t)).reduce(
  (a, l) => (a[l] = e[l], a),
  {}
);
var xt = (e, t) => e === true || e === "true" || e === "" ? "true" : e === "grammar" || e === "spelling" ? e : t === false ? "true" : e === false || e === "false" ? "false" : void 0;
var Cl = Symbol();
var wl = Symbol();
var _l = Symbol();
var Tl = Symbol();
var Vl = Symbol();
var Al = Symbol();
var Ol = Symbol();
var Gt = (e, t) => {
  var a;
  return ((a = e == null ? void 0 : e()) != null ? a : []).reduce((l, n) => (typeof n.type == "symbol" ? l = l.concat(n.children) : l.push(n), l), []).filter((l) => {
    var n;
    return ((n = l.type) == null ? void 0 : n.__name) === t;
  });
};
var fo = Object.defineProperty;
var vo = Object.defineProperties;
var mo = Object.getOwnPropertyDescriptors;
var ya = Object.getOwnPropertySymbols;
var po = Object.prototype.hasOwnProperty;
var bo = Object.prototype.propertyIsEnumerable;
var Ba = (e, t, a) => t in e ? fo(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var go = (e, t) => {
  for (var a in t || (t = {}))
    po.call(t, a) && Ba(e, a, t[a]);
  if (ya)
    for (var a of ya(t))
      bo.call(t, a) && Ba(e, a, t[a]);
  return e;
};
var ho = (e, t) => vo(e, mo(t));
function xl(e, t) {
  var a;
  const l = shallowRef();
  return watchEffect(() => {
    l.value = e();
  }, ho(go({}, t), {
    flush: (a = t == null ? void 0 : t.flush) != null ? a : "sync"
  })), readonly(l);
}
var $a;
var kt = typeof window < "u";
var Pl = (e) => typeof e == "function";
var yo = (e) => typeof e == "string";
var Bo = () => {
};
kt && (($a = window == null ? void 0 : window.navigator) == null ? void 0 : $a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function We(e) {
  return typeof e == "function" ? e() : unref(e);
}
function $o(e, t) {
  function a(...l) {
    return new Promise((n, r) => {
      Promise.resolve(e(() => t.apply(this, l), { fn: t, thisArg: this, args: l })).then(n).catch(r);
    });
  }
  return a;
}
var Il = (e) => e();
function ko(e = Il) {
  const t = ref(true);
  function a() {
    t.value = false;
  }
  function l() {
    t.value = true;
  }
  return { isActive: t, pause: a, resume: l, eventFilter: (...r) => {
    t.value && e(...r);
  } };
}
function So(e) {
  return e;
}
function St(e) {
  return getCurrentScope() ? (onScopeDispose(e), true) : false;
}
function Co(e) {
  return typeof e == "function" ? computed(e) : ref(e);
}
function Fl(e, t = true) {
  getCurrentInstance() ? onMounted(e) : t ? e() : nextTick(e);
}
function El(e, t = 1e3, a = {}) {
  const {
    immediate: l = true,
    immediateCallback: n = false
  } = a;
  let r = null;
  const d = ref(false);
  function c() {
    r && (clearInterval(r), r = null);
  }
  function v() {
    d.value = false, c();
  }
  function m() {
    unref(t) <= 0 || (d.value = true, n && e(), c(), r = setInterval(e, We(t)));
  }
  if (l && kt && m(), isRef(t) || Pl(t)) {
    const C = watch(t, () => {
      d.value && kt && m();
    });
    St(C);
  }
  return St(v), {
    isActive: d,
    pause: v,
    resume: m
  };
}
var ka = Object.getOwnPropertySymbols;
var wo = Object.prototype.hasOwnProperty;
var _o = Object.prototype.propertyIsEnumerable;
var To = (e, t) => {
  var a = {};
  for (var l in e)
    wo.call(e, l) && t.indexOf(l) < 0 && (a[l] = e[l]);
  if (e != null && ka)
    for (var l of ka(e))
      t.indexOf(l) < 0 && _o.call(e, l) && (a[l] = e[l]);
  return a;
};
function Vo(e, t, a = {}) {
  const l = a, {
    eventFilter: n = Il
  } = l, r = To(l, [
    "eventFilter"
  ]);
  return watch(e, $o(n, t), r);
}
var Ao = Object.defineProperty;
var Oo = Object.defineProperties;
var xo = Object.getOwnPropertyDescriptors;
var Ct = Object.getOwnPropertySymbols;
var Ll = Object.prototype.hasOwnProperty;
var zl = Object.prototype.propertyIsEnumerable;
var Sa = (e, t, a) => t in e ? Ao(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var Po = (e, t) => {
  for (var a in t || (t = {}))
    Ll.call(t, a) && Sa(e, a, t[a]);
  if (Ct)
    for (var a of Ct(t))
      zl.call(t, a) && Sa(e, a, t[a]);
  return e;
};
var Io = (e, t) => Oo(e, xo(t));
var Fo = (e, t) => {
  var a = {};
  for (var l in e)
    Ll.call(e, l) && t.indexOf(l) < 0 && (a[l] = e[l]);
  if (e != null && Ct)
    for (var l of Ct(e))
      t.indexOf(l) < 0 && zl.call(e, l) && (a[l] = e[l]);
  return a;
};
function Eo(e, t, a = {}) {
  const l = a, {
    eventFilter: n
  } = l, r = Fo(l, [
    "eventFilter"
  ]), { eventFilter: d, pause: c, resume: v, isActive: m } = ko(n);
  return { stop: Vo(e, t, Io(Po({}, r), {
    eventFilter: d
  })), pause: c, resume: v, isActive: m };
}
function Lo(e) {
  var t;
  const a = We(e);
  return (t = a == null ? void 0 : a.$el) != null ? t : a;
}
var ut = kt ? window : void 0;
function zo(...e) {
  let t, a, l, n;
  if (yo(e[0]) || Array.isArray(e[0]) ? ([a, l, n] = e, t = ut) : [t, a, l, n] = e, !t)
    return Bo;
  Array.isArray(a) || (a = [a]), Array.isArray(l) || (l = [l]);
  const r = [], d = () => {
    r.forEach((C) => C()), r.length = 0;
  }, c = (C, p, g) => (C.addEventListener(p, g, n), () => C.removeEventListener(p, g, n)), v = watch(() => Lo(t), (C) => {
    d(), C && r.push(...a.flatMap((p) => l.map((g) => c(C, p, g))));
  }, { immediate: true, flush: "post" }), m = () => {
    v(), d();
  };
  return St(m), m;
}
function No(e, t = false) {
  const a = ref(), l = () => a.value = Boolean(e());
  return l(), Fl(l, t), a;
}
function Do(e, t = {}) {
  const { window: a = ut } = t, l = No(() => a && "matchMedia" in a && typeof a.matchMedia == "function");
  let n;
  const r = ref(false), d = () => {
    !n || ("removeEventListener" in n ? n.removeEventListener("change", c) : n.removeListener(c));
  }, c = () => {
    !l.value || (d(), n = a.matchMedia(Co(e).value), r.value = n.matches, "addEventListener" in n ? n.addEventListener("change", c) : n.addListener(c));
  };
  return watchEffect(c), St(() => d()), r;
}
var Ut = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var Wt = "__vueuse_ssr_handlers__";
Ut[Wt] = Ut[Wt] || {};
var Ho = Ut[Wt];
function Nl(e, t) {
  return Ho[e] || t;
}
function Mo(e) {
  return e == null ? "any" : e instanceof Set ? "set" : e instanceof Map ? "map" : e instanceof Date ? "date" : typeof e == "boolean" ? "boolean" : typeof e == "string" ? "string" : typeof e == "object" ? "object" : Number.isNaN(e) ? "any" : "number";
}
var Ro = Object.defineProperty;
var Ca = Object.getOwnPropertySymbols;
var jo = Object.prototype.hasOwnProperty;
var qo = Object.prototype.propertyIsEnumerable;
var wa = (e, t, a) => t in e ? Ro(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var _a = (e, t) => {
  for (var a in t || (t = {}))
    jo.call(t, a) && wa(e, a, t[a]);
  if (Ca)
    for (var a of Ca(t))
      qo.call(t, a) && wa(e, a, t[a]);
  return e;
};
var Go = {
  boolean: {
    read: (e) => e === "true",
    write: (e) => String(e)
  },
  object: {
    read: (e) => JSON.parse(e),
    write: (e) => JSON.stringify(e)
  },
  number: {
    read: (e) => Number.parseFloat(e),
    write: (e) => String(e)
  },
  any: {
    read: (e) => e,
    write: (e) => String(e)
  },
  string: {
    read: (e) => e,
    write: (e) => String(e)
  },
  map: {
    read: (e) => new Map(JSON.parse(e)),
    write: (e) => JSON.stringify(Array.from(e.entries()))
  },
  set: {
    read: (e) => new Set(JSON.parse(e)),
    write: (e) => JSON.stringify(Array.from(e))
  },
  date: {
    read: (e) => new Date(e),
    write: (e) => e.toISOString()
  }
};
function Uo(e, t, a, l = {}) {
  var n;
  const {
    flush: r = "pre",
    deep: d = true,
    listenToStorageChanges: c = true,
    writeDefaults: v = true,
    mergeDefaults: m = false,
    shallow: C,
    window: p = ut,
    eventFilter: g,
    onError: A = (O) => {
      console.error(O);
    }
  } = l, w = (C ? shallowRef : ref)(t);
  if (!a)
    try {
      a = Nl("getDefaultStorage", () => {
        var O;
        return (O = ut) == null ? void 0 : O.localStorage;
      })();
    } catch (O) {
      A(O);
    }
  if (!a)
    return w;
  const B = We(t), S = Mo(B), h2 = (n = l.serializer) != null ? n : Go[S], { pause: $, resume: F } = Eo(w, () => I(w.value), { flush: r, deep: d, eventFilter: g });
  return p && c && zo(p, "storage", _), _(), w;
  function I(O) {
    try {
      if (O == null)
        a.removeItem(e);
      else {
        const b = h2.write(O), x = a.getItem(e);
        x !== b && (a.setItem(e, b), p && (p == null || p.dispatchEvent(new StorageEvent("storage", {
          key: e,
          oldValue: x,
          newValue: b,
          storageArea: a
        }))));
      }
    } catch (b) {
      A(b);
    }
  }
  function V(O) {
    const b = O ? O.newValue : a.getItem(e);
    if (b == null)
      return v && B !== null && a.setItem(e, h2.write(B)), B;
    if (!O && m) {
      const x = h2.read(b);
      return Pl(m) ? m(x, B) : S === "object" && !Array.isArray(x) ? _a(_a({}, B), x) : x;
    } else
      return typeof b != "string" ? b : h2.read(b);
  }
  function _(O) {
    if (!(O && O.storageArea !== a)) {
      if (O && O.key == null) {
        w.value = B;
        return;
      }
      if (!(O && O.key !== e)) {
        $();
        try {
          w.value = V(O);
        } catch (b) {
          A(b);
        } finally {
          O ? nextTick(F) : F();
        }
      }
    }
  }
}
function Wo(e) {
  return Do("(prefers-color-scheme: dark)", e);
}
var Ko = Object.defineProperty;
var Ta = Object.getOwnPropertySymbols;
var Xo = Object.prototype.hasOwnProperty;
var Jo = Object.prototype.propertyIsEnumerable;
var Va = (e, t, a) => t in e ? Ko(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var Qo = (e, t) => {
  for (var a in t || (t = {}))
    Xo.call(t, a) && Va(e, a, t[a]);
  if (Ta)
    for (var a of Ta(t))
      Jo.call(t, a) && Va(e, a, t[a]);
  return e;
};
function Yo(e = {}) {
  const {
    selector: t = "html",
    attribute: a = "class",
    initialValue: l = "auto",
    window: n = ut,
    storage: r,
    storageKey: d = "vueuse-color-scheme",
    listenToStorageChanges: c = true,
    storageRef: v,
    emitAuto: m
  } = e, C = Qo({
    auto: "",
    light: "light",
    dark: "dark"
  }, e.modes || {}), p = Wo({ window: n }), g = computed(() => p.value ? "dark" : "light"), A = v || (d == null ? ref(l) : Uo(d, l, r, { window: n, listenToStorageChanges: c })), w = computed({
    get() {
      return A.value === "auto" && !m ? g.value : A.value;
    },
    set($) {
      A.value = $;
    }
  }), B = Nl("updateHTMLAttrs", ($, F, I) => {
    const V = n == null ? void 0 : n.document.querySelector($);
    if (!!V)
      if (F === "class") {
        const _ = I.split(/\s/g);
        Object.values(C).flatMap((O) => (O || "").split(/\s/g)).filter(Boolean).forEach((O) => {
          _.includes(O) ? V.classList.add(O) : V.classList.remove(O);
        });
      } else
        V.setAttribute(F, I);
  });
  function S($) {
    var F;
    const I = $ === "auto" ? g.value : $;
    B(t, a, (F = C[I]) != null ? F : I);
  }
  function h2($) {
    e.onChanged ? e.onChanged($, S) : S($);
  }
  return watch(w, h2, { flush: "post", immediate: true }), m && watch(g, () => h2(w.value), { flush: "post" }), Fl(() => h2(w.value)), w;
}
var Aa;
(function(e) {
  e.UP = "UP", e.RIGHT = "RIGHT", e.DOWN = "DOWN", e.LEFT = "LEFT", e.NONE = "NONE";
})(Aa || (Aa = {}));
var Zo = Object.defineProperty;
var Oa = Object.getOwnPropertySymbols;
var es = Object.prototype.hasOwnProperty;
var ts = Object.prototype.propertyIsEnumerable;
var xa = (e, t, a) => t in e ? Zo(e, t, { enumerable: true, configurable: true, writable: true, value: a }) : e[t] = a;
var as = (e, t) => {
  for (var a in t || (t = {}))
    es.call(t, a) && xa(e, a, t[a]);
  if (Oa)
    for (var a of Oa(t))
      ts.call(t, a) && xa(e, a, t[a]);
  return e;
};
var ls = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
as({
  linear: So
}, ls);
var dt = (e) => xl(() => e.value ? `justify-content-${e.value}` : "");
function u(e) {
  return xl(
    () => e.value === void 0 || e.value === null ? e.value : dl(e.value)
  );
}
var Dl = {
  items: reactive([]),
  reset() {
    this.items = reactive([]);
  }
};
var ns = (e) => {
  e.provide(_l, Dl);
};
var Hl = () => {
  var e;
  return (e = inject(_l)) != null ? e : Dl;
};
var qe = (e, t, a) => {
  onMounted(() => {
    var l;
    (l = e == null ? void 0 : e.value) == null || l.addEventListener(t, a);
  }), onBeforeUnmount(() => {
    var l;
    (l = e == null ? void 0 : e.value) == null || l.removeEventListener(t, a);
  });
};
var Ml = (e) => computed(() => ({
  "form-check": e.plain === false && e.button === false,
  "form-check-inline": e.inline === true,
  "form-switch": e.switch === true,
  [`form-control-${e.size}`]: e.size !== void 0 && e.size !== "md"
}));
var Rl = (e) => computed(() => ({
  "form-check-input": e.plain === false && e.button === false,
  "is-valid": e.state === true,
  "is-invalid": e.state === false,
  "btn-check": e.button === true
}));
var jl = (e) => computed(() => ({
  "form-check-label": e.plain === false && e.button === false,
  btn: e.button === true,
  [`btn-${e.buttonVariant}`]: e.button === true && e.buttonVariant !== void 0,
  [`btn-${e.size}`]: e.button && e.size && e.size !== "md"
}));
var ql = (e) => computed(() => ({
  "aria-invalid": xt(e.ariaInvalid, e.state),
  "aria-required": e.required === true ? true : void 0
}));
var Gl = (e) => computed(() => ({
  "was-validated": e.validated === true,
  "btn-group": e.buttons === true && e.stacked === false,
  "btn-group-vertical": e.stacked === true,
  [`btn-group-${e.size}`]: e.size !== void 0
}));
var wt = (e, t, a) => e.reduce(
  (l, n) => n.type.toString() === "Symbol(Fragment)" ? l.concat(n.children) : l.concat([n]),
  []
).filter((l) => l.type.__name === t || l.type.name === t).map((l) => {
  const n = (l.children.default ? l.children.default() : []).find(
    (r) => r.type.toString() === "Symbol(Text)"
  );
  return {
    props: {
      disabled: a,
      ...l.props
    },
    text: n ? n.children : ""
  };
});
var Ul = (e, t) => typeof e == "string" ? {
  props: {
    value: e,
    disabled: t.disabled
  },
  text: e
} : {
  props: {
    value: e[t.valueField],
    disabled: t.disabled || e[t.disabledField],
    ...e.props
  },
  text: e[t.textField],
  html: e[t.htmlField]
};
var Wl = (e, t, a, l, n) => ({
  ...e,
  props: {
    "button-variant": a.buttonVariant,
    form: a.form,
    name: l.value,
    id: `${n.value}_option_${t}`,
    button: a.buttons,
    state: a.state,
    plain: a.plain,
    size: a.size,
    inline: !a.stacked,
    required: a.required,
    ...e.props
  }
});
var $e = (e, t) => computed(() => (e == null ? void 0 : e.value) || Re(t));
var Kl = {
  ariaInvalid: {
    type: [Boolean, String],
    default: void 0
  },
  autocomplete: { type: String, required: false },
  autofocus: { type: Boolean, default: false },
  disabled: { type: Boolean, default: false },
  form: { type: String, required: false },
  formatter: { type: Function, required: false },
  id: { type: String, required: false },
  lazy: { type: Boolean, default: false },
  lazyFormatter: { type: Boolean, default: false },
  list: { type: String, required: false },
  modelValue: { type: [String, Number], default: "" },
  name: { type: String, required: false },
  number: { type: Boolean, default: false },
  placeholder: { type: String, required: false },
  plaintext: { type: Boolean, default: false },
  readonly: { type: Boolean, default: false },
  required: { type: Boolean, default: false },
  size: { type: String, required: false },
  state: { type: Boolean, default: null },
  trim: { type: Boolean, default: false }
};
var Xl = (e, t) => {
  const a = ref();
  let l = null, n = true;
  const r = $e(toRef(e, "id"), "input"), d = (B, S, h2 = false) => (B = String(B), typeof e.formatter == "function" && (!e.lazyFormatter || h2) ? (n = false, e.formatter(B, S)) : B), c = (B) => e.trim ? B.trim() : e.number ? Number.parseFloat(B) : B, v = () => {
    var B;
    e.autofocus && ((B = a.value) == null || B.focus());
  };
  onMounted(() => {
    a.value && (a.value.value = e.modelValue), nextTick(() => {
      v();
    });
  }), onActivated(() => {
    nextTick(() => {
    });
  });
  const m = computed(
    () => {
      var B;
      return xt(e.ariaInvalid, (B = e.state) != null ? B : void 0);
    }
  ), C = (B) => {
    const { value: S } = B.target, h2 = d(S, B);
    if (h2 === false || B.defaultPrevented) {
      B.preventDefault();
      return;
    }
    if (e.lazy)
      return;
    const $ = c(h2);
    e.modelValue !== $ && (l = S, t("update:modelValue", $)), t("input", h2);
  }, p = (B) => {
    const { value: S } = B.target, h2 = d(S, B);
    if (h2 === false || B.defaultPrevented) {
      B.preventDefault();
      return;
    }
    if (!e.lazy)
      return;
    l = S, t("update:modelValue", h2);
    const $ = c(h2);
    e.modelValue !== $ && t("change", h2);
  }, g = (B) => {
    if (t("blur", B), !e.lazy && !e.lazyFormatter)
      return;
    const { value: S } = B.target, h2 = d(S, B, true);
    l = S, t("update:modelValue", h2);
  }, A = () => {
    var B;
    e.disabled || (B = a.value) == null || B.focus();
  }, w = () => {
    var B;
    e.disabled || (B = a.value) == null || B.blur();
  };
  return watch(
    () => e.modelValue,
    (B) => {
      !a.value || (a.value.value = l && n ? l : B, l = null, n = true);
    }
  ), {
    input: a,
    computedId: r,
    computedAriaInvalid: m,
    onInput: C,
    onChange: p,
    onBlur: g,
    focus: A,
    blur: w
  };
};
var Ye = (e, t) => {
  if (!e)
    return e;
  if (t in e)
    return e[t];
  const a = t.split(".");
  return Ye(e[a[0]], a.splice(1).join("."));
};
var Dt = (e, t = null, a, l) => {
  if (Object.prototype.toString.call(e) === "[object Object]") {
    const n = Ye(e, l.valueField), r = Ye(e, l.textField), d = Ye(e, l.htmlField), c = Ye(e, l.disabledField), v = e[l.optionsField] || null;
    return v !== null ? {
      label: String(Ye(e, l.labelField) || r),
      options: ua(v, a, l)
    } : {
      value: typeof n > "u" ? t || r : n,
      text: String(typeof r > "u" ? t : r),
      html: d,
      disabled: Boolean(c)
    };
  }
  return {
    value: t || e,
    text: String(e),
    disabled: false
  };
};
var ua = (e, t, a) => Array.isArray(e) ? e.map((l) => Dt(l, null, t, a)) : Object.prototype.toString.call(e) === "[object Object]" ? (console.warn(
  `[BootstrapVue warn]: ${t} - Setting prop "options" to an object is deprecated. Use the array format instead.`
), Object.keys(e).map((l) => {
  const n = e[l];
  switch (typeof n) {
    case "object":
      return Dt(n.text, String(n.value), t, a);
    default:
      return Dt(n, String(l), t, a);
  }
})) : [];
var os = (e = false, t = {}) => {
  var n, r;
  const a = "data-bs-theme", l = "body";
  return Yo({
    attribute: a,
    selector: l,
    storageKey: e ? `${(n = t.attribute) != null ? n : a}-${(r = t.selector) != null ? r : l}` : null,
    ...t
  });
};
var ss = ["id"];
var rs = defineComponent({
  __name: "BAccordion",
  props: {
    flush: { default: false },
    free: { default: false },
    id: null
  },
  setup(e) {
    const t = e, a = $e(toRef(t, "id"), "accordion"), l = u(toRef(t, "flush")), n = u(toRef(t, "free")), r = computed(() => ({
      "accordion-flush": l.value
    }));
    return n.value || provide(Ol, a.value), (d, c) => (openBlock(), createElementBlock("div", {
      id: unref(a),
      class: normalizeClass(["accordion", unref(r)])
    }, [
      renderSlot(d.$slots, "default")
    ], 10, ss));
  }
});
var Jl = defineComponent({
  __name: "BCollapse",
  props: {
    accordion: null,
    id: null,
    modelValue: { default: false },
    tag: { default: "div" },
    toggle: { default: false },
    visible: { default: false },
    isNav: { default: false }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden"],
  setup(e, { emit: t }) {
    const a = e, l = u(toRef(a, "modelValue")), n = u(toRef(a, "toggle")), r = u(toRef(a, "visible")), d = u(toRef(a, "isNav")), c = $e(toRef(a, "id"), "collapse"), v = ref(), m = ref(), C = computed(() => ({
      show: l.value,
      "navbar-collapse": d.value
    })), p = () => t("update:modelValue", false);
    return watch(l, (g) => {
      var A, w;
      g ? (A = m.value) == null || A.show() : (w = m.value) == null || w.hide();
    }), watch(r, (g) => {
      var A, w;
      g ? (t("update:modelValue", !!g), (A = m.value) == null || A.show()) : (t("update:modelValue", !!g), (w = m.value) == null || w.hide());
    }), qe(v, "show.bs.collapse", () => {
      t("show"), t("update:modelValue", true);
    }), qe(v, "hide.bs.collapse", () => {
      t("hide"), t("update:modelValue", false);
    }), qe(v, "shown.bs.collapse", () => t("shown")), qe(v, "hidden.bs.collapse", () => t("hidden")), onMounted(() => {
      var g;
      m.value = new Collapse(v.value, {
        parent: a.accordion ? `#${a.accordion}` : void 0,
        toggle: n.value
      }), (r.value || l.value) && (t("update:modelValue", true), (g = m.value) == null || g.show());
    }), (g, A) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: unref(c),
      ref_key: "element",
      ref: v,
      class: normalizeClass(["collapse", unref(C)]),
      "data-bs-parent": e.accordion || null,
      "is-nav": unref(d)
    }, {
      default: withCtx(() => [
        renderSlot(g.$slots, "default", {
          visible: unref(l),
          close: p
        })
      ]),
      _: 3
    }, 8, ["id", "class", "data-bs-parent", "is-nav"]));
  }
});
var Pa = (e, t) => e.setAttribute("data-bs-theme", t);
var is = {
  mounted(e, t) {
    Pa(e, t.value);
  },
  updated(e, t) {
    Pa(e, t.value);
  }
};
var us = {
  mounted(e, t) {
    const a = t.modifiers.left ? "left" : t.modifiers.right ? "right" : t.modifiers.bottom ? "bottom" : t.modifiers.top ? "top" : "right", l = [];
    t.modifiers.manual ? l.push("manual") : (t.modifiers.click && l.push("click"), t.modifiers.hover && l.push("hover"), t.modifiers.focus && l.push("focus")), e.setAttribute("data-bs-toggle", "popover"), new Popover(e, {
      trigger: l.length === 0 ? "click" : l.join(" "),
      placement: a,
      content: t.value,
      html: t.modifiers.html
    });
  },
  unmounted(e) {
    const t = Popover.getInstance(e);
    t !== null && t.dispose();
  }
};
var ds = (e) => {
  if (e.classList.contains("offcanvas"))
    return "offcanvas";
  if (e.classList.contains("collapse"))
    return "collapse";
  throw Error("Couldn't resolve toggle type");
};
var cs = (e, t) => {
  const { modifiers: a, arg: l, value: n } = e, r = Object.keys(a || {}), d = typeof n == "string" ? n.split(pt) : n;
  if (uo(t.tagName, "a")) {
    const c = ra(t, "href") || "";
    qn.test(c) && r.push(c.replace(jn, ""));
  }
  return Array.prototype.concat.apply([], [l, d]).forEach((c) => typeof c == "string" && r.push(c)), r.filter((c, v, m) => c && m.indexOf(c) === v);
};
var da = {
  mounted(e, t) {
    const a = cs(t, e), l = [], n = e.tagName === "a" ? "href" : "data-bs-target";
    a.forEach((r) => {
      const d = document.getElementById(r);
      d !== null && (e.setAttribute("data-bs-toggle", ds(d)), l.push(`#${r}`));
    }), l.length > 0 && e.setAttribute(n, l.join(","));
  }
};
var fs = (e, t) => {
  if (t != null && t.trigger)
    return t.trigger;
  if (e.manual)
    return "manual";
  const a = [];
  return e.click && a.push("click"), e.hover && a.push("hover"), e.focus && a.push("focus"), a.length > 0 ? a.join(" ") : "hover focus";
};
var vs = (e, t) => t != null && t.placement ? t.placement : e.left ? "left" : e.right ? "right" : e.bottom ? "bottom" : "top";
var ms = (e) => e != null && e.delay ? e.delay : 0;
var Ia = (e) => typeof e > "u" ? (console.warn(
  "Review tooltip directive usage. Some uses are not defining a title in root component or a value like `v-b-tooltip='{title: \"my title\"}'` nor `v-b-tooltip=\"'my title'\"` to define a title"
), "") : typeof e == "object" ? e == null ? void 0 : e.title : e;
var ps = {
  beforeMount(e, t) {
    e.setAttribute("data-bs-toggle", "tooltip"), e.getAttribute("title") || e.setAttribute("title", Ia(t.value).toString());
    const a = /<("[^"]*"|'[^']*'|[^'">])*>/.test(e.title), l = fs(t.modifiers, t.value), n = vs(t.modifiers, t.value), r = ms(t.value), d = e.getAttribute("title");
    new Tooltip(e, {
      trigger: l,
      placement: n,
      delay: r,
      html: a
    }), d && e.setAttribute("data-bs-original-title", d);
  },
  updated(e, t) {
    e.getAttribute("title") || e.setAttribute("title", Ia(t.value).toString());
    const a = e.getAttribute("title"), l = e.getAttribute("data-bs-original-title"), n = Tooltip.getInstance(e);
    e.removeAttribute("title"), a && a !== l && (n == null || n.setContent({ ".tooltip-inner": a }), e.setAttribute("data-bs-original-title", a));
  },
  unmounted(e) {
    const t = Tooltip.getInstance(e);
    t !== null && t.dispose();
  }
};
var bt = /* @__PURE__ */ new Map();
var bs = class {
  constructor(t, a, l, n, r) {
    me(this, "element");
    me(this, "margin");
    me(this, "once");
    me(this, "callback");
    me(this, "instance");
    me(this, "observer");
    me(this, "doneOnce");
    me(this, "visible");
    this.element = t, this.margin = a, this.once = l, this.callback = n, this.instance = r, this.createObserver();
  }
  createObserver() {
    if (this.observer && this.stop(), !(this.doneOnce || typeof this.callback != "function")) {
      try {
        this.observer = new IntersectionObserver(this.handler.bind(this), {
          root: null,
          rootMargin: this.margin,
          threshold: 0
        });
      } catch {
        console.error("Intersection Observer not supported"), this.doneOnce = true, this.observer = void 0, this.callback(null);
        return;
      }
      this.instance.$nextTick(() => {
        this.observer && this.observer.observe(this.element);
      });
    }
  }
  handler(t) {
    const [a] = t, l = Boolean(a.isIntersecting || a.intersectionRatio > 0);
    l !== this.visible && (this.visible = l, this.callback(l), this.once && this.visible && (this.doneOnce = true, this.stop()));
  }
  stop() {
    this.observer && this.observer.disconnect(), this.observer = null;
  }
};
var Ql = (e) => {
  if (bt.has(e)) {
    const t = bt.get(e);
    t && t.stop && t.stop(), bt.delete(e);
  }
};
var Fa = (e, t) => {
  const a = {
    margin: "0px",
    once: false,
    callback: t.value
  };
  Object.keys(t.modifiers).forEach((n) => {
    Number.isInteger(n) ? a.margin = `${n}px` : n.toLowerCase() === "once" && (a.once = true);
  }), Ql(e);
  const l = new bs(
    e,
    a.margin,
    a.once,
    a.callback,
    t.instance
  );
  bt.set(e, l);
};
var gs = {
  beforeMount(e, t) {
    Fa(e, t);
  },
  updated(e, t) {
    Fa(e, t);
  },
  unmounted(e) {
    Ql(e);
  }
};
var hs = { class: "accordion-item" };
var ys = ["id"];
var Bs = ["aria-expanded", "aria-controls"];
var $s = { class: "accordion-body" };
var ks = defineComponent({
  __name: "BAccordionItem",
  props: {
    id: null,
    title: null,
    visible: { default: false }
  },
  setup(e) {
    const t = e, a = inject(Ol), l = $e(toRef(t, "id"), "accordion_item"), n = u(toRef(t, "visible"));
    return (r, d) => (openBlock(), createElementBlock("div", hs, [
      createBaseVNode("h2", {
        id: `${unref(l)}heading`,
        class: "accordion-header"
      }, [
        withDirectives((openBlock(), createElementBlock("button", {
          class: normalizeClass(["accordion-button", { collapsed: !unref(n) }]),
          type: "button",
          "aria-expanded": unref(n) ? "true" : "false",
          "aria-controls": unref(l)
        }, [
          renderSlot(r.$slots, "title", {}, () => [
            createTextVNode(toDisplayString(e.title), 1)
          ])
        ], 10, Bs)), [
          [unref(da), void 0, unref(l)]
        ])
      ], 8, ys),
      createVNode(Jl, {
        id: unref(l),
        class: "accordion-collapse",
        visible: e.visible,
        accordion: unref(a),
        "aria-labelledby": `heading${unref(l)}`
      }, {
        default: withCtx(() => [
          createBaseVNode("div", $s, [
            renderSlot(r.$slots, "default")
          ])
        ]),
        _: 3
      }, 8, ["id", "visible", "accordion", "aria-labelledby"])
    ]));
  }
});
var lt = defineComponent({
  __name: "BTransition",
  props: {
    appear: { default: false },
    mode: null,
    noFade: { default: false },
    transProps: null
  },
  setup(e) {
    const t = e, a = u(toRef(t, "appear")), l = u(toRef(t, "noFade")), n = computed(() => {
      const c = {
        name: "",
        enterActiveClass: "",
        enterToClass: "",
        leaveActiveClass: "",
        leaveToClass: "showing",
        enterFromClass: "showing",
        leaveFromClass: ""
      }, v = {
        ...c,
        enterActiveClass: "fade showing",
        leaveActiveClass: "fade showing"
      };
      return l.value ? c : v;
    }), r = computed(() => ({ mode: t.mode, css: true, ...n.value })), d = computed(
      () => t.transProps !== void 0 ? {
        ...r.value,
        ...t.transProps
      } : a.value ? {
        ...r.value,
        appear: true,
        appearActiveClass: n.value.enterActiveClass,
        appearToClass: n.value.enterToClass
      } : r.value
    );
    return (c, v) => (openBlock(), createBlock(Transition, normalizeProps(guardReactiveProps(unref(d))), {
      default: withCtx(() => [
        renderSlot(c.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var Ss = ["type", "disabled", "aria-label"];
var nt = defineComponent({
  __name: "BCloseButton",
  props: {
    ariaLabel: { default: "Close" },
    disabled: { default: false },
    white: { default: false },
    type: { default: "button" }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = u(toRef(a, "disabled")), n = u(toRef(a, "white")), r = computed(() => ({
      "btn-close-white": n.value
    }));
    return (d, c) => (openBlock(), createElementBlock("button", {
      type: e.type,
      class: normalizeClass(["btn-close", unref(r)]),
      disabled: unref(l),
      "aria-label": e.ariaLabel,
      onClick: c[0] || (c[0] = (v) => t("click", v))
    }, null, 10, Ss));
  }
});
var Cs = {
  key: 0,
  class: "visually-hidden"
};
var Pt = defineComponent({
  __name: "BSpinner",
  props: {
    label: null,
    role: { default: "status" },
    small: { default: false },
    tag: { default: "span" },
    type: { default: "border" },
    variant: null
  },
  setup(e) {
    const t = e, a = useSlots(), l = u(toRef(t, "small")), n = computed(() => ({
      "spinner-border": t.type === "border",
      "spinner-border-sm": t.type === "border" && l.value,
      "spinner-grow": t.type === "grow",
      "spinner-grow-sm": t.type === "grow" && l.value,
      [`text-${t.variant}`]: t.variant !== void 0
    })), r = computed(() => !we(a.label));
    return (d, c) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(n)),
      role: e.label || unref(r) ? e.role : null,
      "aria-hidden": e.label || unref(r) ? null : true
    }, {
      default: withCtx(() => [
        e.label || unref(r) ? (openBlock(), createElementBlock("span", Cs, [
          renderSlot(d.$slots, "label", {}, () => [
            createTextVNode(toDisplayString(e.label), 1)
          ])
        ])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["class", "role", "aria-hidden"]));
  }
});
var Je = {
  active: { type: [Boolean, String], default: false },
  activeClass: { type: String, default: "router-link-active" },
  append: { type: [Boolean, String], default: false },
  disabled: { type: [Boolean, String], default: false },
  event: { type: [String, Array], default: "click" },
  exact: { type: [Boolean, String], default: false },
  exactActiveClass: { type: String, default: "router-link-exact-active" },
  href: { type: String },
  rel: { type: String, default: null },
  replace: { type: [Boolean, String], default: false },
  routerComponentName: { type: String, default: "router-link" },
  routerTag: { type: String, default: "a" },
  target: { type: String, default: "_self" },
  to: { type: [String, Object], default: null }
};
var ws = defineComponent({
  props: Je,
  emits: ["click"],
  setup(e, { emit: t, attrs: a }) {
    const l = u(toRef(e, "active")), n = u(toRef(e, "append")), r = u(toRef(e, "disabled")), d = u(toRef(e, "exact")), c = u(toRef(e, "replace")), v = getCurrentInstance(), m = ref(null), C = computed(() => {
      const B = e.routerComponentName.split("-").map((h2) => h2.charAt(0).toUpperCase() + h2.slice(1)).join("");
      return !((v == null ? void 0 : v.appContext.app.component(B)) !== void 0) || r.value || !e.to ? "a" : e.routerComponentName;
    }), p = computed(() => {
      const B = "#";
      if (e.href)
        return e.href;
      if (typeof e.to == "string")
        return e.to || B;
      const S = e.to;
      if (Object.prototype.toString.call(S) === "[object Object]" && (S.path || S.query || S.hash)) {
        const h2 = S.path || "", $ = S.query ? `?${Object.keys(S.query).map((I) => `${I}=${S.query[I]}`).join("=")}` : "", F = !S.hash || S.hash.charAt(0) === "#" ? S.hash || "" : `#${S.hash}`;
        return `${h2}${$}${F}` || B;
      }
      return B;
    }), g = computed(() => ({
      to: e.to,
      href: p.value,
      target: e.target,
      rel: e.target === "_blank" && e.rel === null ? "noopener" : e.rel || null,
      tabindex: r.value ? "-1" : typeof a.tabindex > "u" ? null : a.tabindex,
      "aria-disabled": r.value ? "true" : null
    }));
    return {
      computedLinkClasses: computed(() => ({
        active: l.value,
        disabled: r.value
      })),
      tag: C,
      routerAttr: g,
      link: m,
      clicked: (B) => {
        if (r.value) {
          B.preventDefault(), B.stopImmediatePropagation();
          return;
        }
        t("click", B);
      },
      activeBoolean: l,
      appendBoolean: n,
      disabledBoolean: r,
      replaceBoolean: c,
      exactBoolean: d
    };
  }
});
var Te = (e, t) => {
  const a = e.__vccOpts || e;
  for (const [l, n] of t)
    a[l] = n;
  return a;
};
function _s(e, t, a, l, n, r) {
  return e.tag === "router-link" ? (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({ key: 0 }, e.routerAttr, { custom: "" }), {
    default: withCtx(({ href: d, navigate: c, isActive: v, isExactActive: m }) => [
      (openBlock(), createBlock(resolveDynamicComponent(e.routerTag), mergeProps({
        ref: "link",
        href: d,
        class: [
          (v || e.activeBoolean) && e.activeClass,
          (m || e.exactBoolean) && e.exactActiveClass
        ]
      }, e.$attrs, { onClick: c }), {
        default: withCtx(() => [
          renderSlot(e.$slots, "default")
        ]),
        _: 2
      }, 1040, ["href", "class", "onClick"]))
    ]),
    _: 3
  }, 16)) : (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({
    key: 1,
    ref: "link",
    class: e.computedLinkClasses
  }, e.routerAttr, { onClick: e.clicked }), {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 16, ["class", "onClick"]));
}
var Ve = Te(ws, [["render", _s]]);
var Ts = defineComponent({
  components: { BLink: Ve, BSpinner: Pt },
  props: {
    ...Je,
    active: { type: [Boolean, String], default: false },
    disabled: { type: [Boolean, String], default: false },
    href: { type: String, required: false },
    pill: { type: [Boolean, String], default: false },
    pressed: { type: [Boolean, String], default: false },
    rel: { type: String, default: void 0 },
    size: { type: String, default: "md" },
    squared: { type: [Boolean, String], default: false },
    tag: { type: String, default: "button" },
    target: { type: String, default: "_self" },
    type: { type: String, default: "button" },
    variant: { type: String, default: "secondary" },
    loading: { type: [Boolean, String], default: false },
    loadingMode: { type: String, default: "inline" }
  },
  emits: ["click", "update:pressed"],
  setup(e, { emit: t }) {
    const a = u(toRef(e, "active")), l = u(toRef(e, "disabled")), n = u(toRef(e, "pill")), r = u(toRef(e, "pressed")), d = u(toRef(e, "squared")), c = u(toRef(e, "loading")), v = computed(() => r.value === true), m = computed(
      () => e.tag === "button" && e.href === void 0 && e.to === null
    ), C = computed(() => it(e)), p = computed(() => e.to !== null), g = computed(
      () => e.href !== void 0 ? false : !m.value
    ), A = computed(() => [
      [`btn-${e.variant}`],
      [`btn-${e.size}`],
      {
        active: a.value || r.value,
        "rounded-pill": n.value,
        "rounded-0": d.value,
        disabled: l.value
      }
    ]), w = computed(() => ({
      "aria-disabled": g.value ? l.value : null,
      "aria-pressed": v.value ? r.value : null,
      autocomplete: v.value ? "off" : null,
      disabled: m.value ? l.value : null,
      href: e.href,
      rel: C.value ? e.rel : null,
      role: g.value || C.value ? "button" : null,
      target: C.value ? e.target : null,
      type: m.value ? e.type : null,
      to: m.value ? null : e.to,
      append: C.value ? e.append : null,
      activeClass: p.value ? e.activeClass : null,
      event: p.value ? e.event : null,
      exact: p.value ? e.exact : null,
      exactActiveClass: p.value ? e.exactActiveClass : null,
      replace: p.value ? e.replace : null,
      routerComponentName: p.value ? e.routerComponentName : null,
      routerTag: p.value ? e.routerTag : null
    })), B = computed(
      () => p.value ? Ve : e.href ? "a" : e.tag
    );
    return {
      computedClasses: A,
      computedAttrs: w,
      computedTag: B,
      clicked: (h2) => {
        if (l.value) {
          h2.preventDefault(), h2.stopPropagation();
          return;
        }
        t("click", h2), v.value && t("update:pressed", !r.value);
      },
      loadingBoolean: c
    };
  }
});
function Vs(e, t, a, l, n, r) {
  const d = resolveComponent("b-spinner");
  return openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({
    class: ["btn", e.computedClasses]
  }, e.computedAttrs, { onClick: e.clicked }), {
    default: withCtx(() => [
      e.loadingBoolean ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["btn-loading", { "mode-fill": e.loadingMode === "fill", "mode-inline": e.loadingMode === "inline" }])
      }, [
        renderSlot(e.$slots, "loading", {}, () => [
          createVNode(d, {
            class: "btn-spinner",
            small: e.size !== "lg"
          }, null, 8, ["small"])
        ])
      ], 2)) : createCommentVNode("", true),
      createBaseVNode("div", {
        class: normalizeClass(["btn-content", { "btn-loading-fill": e.loadingBoolean && e.loadingMode === "fill" }])
      }, [
        renderSlot(e.$slots, "default")
      ], 2)
    ]),
    _: 3
  }, 16, ["class", "onClick"]);
}
var et = Te(Ts, [["render", Vs]]);
var As = (e, t = ref(1e3), a = {}) => {
  const l = ref(false), n = ref(0), r = ref(We(e)), d = ref(We(t)), c = computed(() => Math.ceil(r.value / d.value)), v = computed(
    () => p.value || l.value ? Math.round(r.value - n.value * d.value) : 0
  ), { pause: m, resume: C, isActive: p } = El(
    () => n.value = n.value + 1,
    t,
    a
  ), g = () => {
    l.value = false, n.value = 0, C();
  }, A = () => {
    l.value = false, n.value = c.value;
  };
  watchEffect(() => {
    const S = We(e), h2 = r.value;
    S !== h2 && (r.value = S, A(), g());
  }), watchEffect(() => {
    const S = We(t), h2 = d.value;
    S !== h2 && (d.value = S, A(), g());
  }), watchEffect(() => {
    n.value > c.value && (n.value = c.value), n.value === c.value && m();
  });
  const w = () => {
    p.value !== false && (l.value = true, m());
  }, B = () => {
    n.value !== c.value && (l.value = false, C());
  };
  return {
    isActive: readonly(p),
    isPaused: readonly(l),
    restart: g,
    stop: A,
    pause: w,
    resume: B,
    value: v
  };
};
var Os = ["onMouseenter"];
var xs = defineComponent({
  __name: "BAlert",
  props: {
    noHoverPause: { default: false },
    dismissLabel: { default: "Close" },
    dismissible: { default: false },
    fade: { default: false },
    modelValue: { type: [Boolean, Number], default: false },
    variant: { default: "info" },
    closeContent: null,
    immediate: { default: true },
    interval: { default: 1e3 },
    showOnPause: { default: true }
  },
  emits: ["closed", "close-countdown", "update:modelValue"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = u(toRef(l, "dismissible")), r = u(toRef(l, "fade")), d = u(toRef(l, "immediate")), c = u(toRef(l, "showOnPause")), v = u(toRef(l, "noHoverPause")), m = useSlots(), C = computed(() => !we(m.close)), p = computed(() => [
      [`alert-${l.variant}`],
      {
        "alert-dismissible": n.value
      }
    ]), {
      isActive: g,
      pause: A,
      restart: w,
      resume: B,
      stop: S,
      isPaused: h2,
      value: $
    } = As(
      typeof l.modelValue == "boolean" ? 0 : toRef(l, "modelValue"),
      toRef(l, "interval"),
      {
        immediate: typeof l.modelValue == "number" && d.value
      }
    ), F = computed(
      () => typeof l.modelValue == "boolean" ? l.modelValue : g.value || c.value && h2.value
    );
    watchEffect(() => a("close-countdown", $.value));
    const I = () => {
      typeof l.modelValue == "boolean" ? a("update:modelValue", false) : (a("update:modelValue", 0), S()), a("closed");
    }, V = () => {
      v.value || A();
    };
    return onBeforeUnmount(S), t({ pause: A, resume: B, restart: w, stop: S }), (_, O) => (openBlock(), createBlock(lt, {
      "no-fade": !unref(r),
      "trans-props": { enterToClass: "show" }
    }, {
      default: withCtx(() => [
        unref(F) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["alert", unref(p)]),
          role: "alert",
          "aria-live": "polite",
          "aria-atomic": "true",
          onMouseenter: withModifiers(V, ["stop"]),
          onMouseleave: O[0] || (O[0] = withModifiers(
            (...b) => unref(B) && unref(B)(...b),
            ["stop"]
          ))
        }, [
          renderSlot(_.$slots, "default"),
          unref(n) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            unref(C) || e.closeContent ? (openBlock(), createBlock(et, {
              key: 0,
              type: "button",
              onClick: I
            }, {
              default: withCtx(() => [
                renderSlot(_.$slots, "close", {}, () => [
                  createTextVNode(toDisplayString(e.closeContent), 1)
                ])
              ]),
              _: 3
            })) : (openBlock(), createBlock(nt, {
              key: 1,
              "aria-label": e.dismissLabel,
              onClick: I
            }, null, 8, ["aria-label"]))
          ], 64)) : createCommentVNode("", true)
        ], 42, Os)) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["no-fade"]));
  }
});
var Ps = {
  key: 0,
  class: "b-avatar-custom"
};
var Is = {
  key: 1,
  class: "b-avatar-img"
};
var Fs = ["src", "alt"];
var Kt = (e) => {
  const t = typeof e == "string" && fl(e) ? rt(e, 0) : e;
  return typeof t == "number" ? `${t}px` : t || null;
};
var Es = defineComponent({
  __name: "BAvatar",
  props: {
    alt: { default: "avatar" },
    ariaLabel: null,
    badge: { type: [Boolean, String], default: false },
    badgeLeft: { default: false },
    badgeOffset: null,
    badgeTop: { default: false },
    badgeVariant: { default: "primary" },
    button: { default: false },
    buttonType: { default: "button" },
    disabled: { default: false },
    icon: null,
    rounded: { type: [Boolean, String], default: "circle" },
    size: null,
    square: { default: false },
    src: null,
    text: null,
    textVariant: null,
    variant: { default: "secondary" }
  },
  emits: ["click", "img-error"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = inject(Al), r = ["sm", null, "lg"], d = 0.4, c = d * 0.7, v = u(toRef(a, "badgeLeft")), m = u(toRef(a, "badgeTop")), C = u(toRef(a, "button")), p = u(toRef(a, "disabled")), g = u(toRef(a, "square")), A = computed(() => !we(l.default)), w = computed(() => !we(l.badge)), B = computed(() => !!a.badge || a.badge === "" || w.value), S = computed(
      () => n != null && n.size ? n.size : Kt(a.size)
    ), h2 = computed(
      () => n != null && n.variant ? n.variant : a.variant
    ), $ = computed(
      () => n != null && n.rounded ? n.rounded : a.rounded
    ), F = computed(() => ({
      type: C.value ? a.buttonType : void 0,
      "aria-label": a.ariaLabel || null,
      disabled: p.value || null
    })), I = computed(() => [`bg-${a.badgeVariant}`]), V = computed(() => a.badge === true ? "" : a.badge), _ = computed(() => [[`text-${oe(a.badgeVariant)}`]]), O = computed(() => ({
      [`b-avatar-${a.size}`]: !!a.size && r.indexOf(Kt(a.size)) !== -1,
      [`bg-${h2.value}`]: !!h2.value,
      badge: !C.value && h2.value && A.value,
      rounded: $.value === "" || $.value === true,
      ["rounded-circle"]: !g.value && $.value === "circle",
      ["rounded-0"]: g.value || $.value === "0",
      ["rounded-1"]: !g.value && $.value === "sm",
      ["rounded-3"]: !g.value && $.value === "lg",
      ["rounded-top"]: !g.value && $.value === "top",
      ["rounded-bottom"]: !g.value && $.value === "bottom",
      ["rounded-start"]: !g.value && $.value === "left",
      ["rounded-end"]: !g.value && $.value === "right",
      btn: C.value,
      [`btn-${h2.value}`]: C.value ? !!h2.value : false
    })), b = computed(() => [
      [`text-${a.textVariant || oe(h2.value)}`]
    ]), x = computed(() => {
      const ae = a.badgeOffset || "0px";
      return {
        fontSize: (r.indexOf(S.value || null) === -1 ? `calc(${S.value} * ${c})` : "") || "",
        top: m.value ? ae : "",
        bottom: m.value ? "" : ae,
        left: v.value ? ae : "",
        right: v.value ? "" : ae
      };
    }), H = computed(() => {
      const ae = r.indexOf(S.value || null) === -1 ? `calc(${S.value} * ${d})` : null;
      return ae ? { fontSize: ae } : {};
    }), j = computed(() => {
      var ye;
      const ae = ((ye = n == null ? void 0 : n.overlapScale) == null ? void 0 : ye.value) || 0, pe = S.value && ae ? `calc(${S.value} * -${ae})` : null;
      return pe ? { marginLeft: pe, marginRight: pe } : {};
    }), q = computed(() => C.value ? "button" : "span"), K = computed(() => ({
      ...j.value,
      width: S.value,
      height: S.value
    })), oe = (ae) => ae === "light" || ae === "warning" ? "dark" : "light", Z = (ae) => {
      !p.value && C.value && t("click", ae);
    }, ge = (ae) => t("img-error", ae);
    return (ae, pe) => (openBlock(), createBlock(resolveDynamicComponent(unref(q)), mergeProps({
      class: ["b-avatar", unref(O)],
      style: unref(K)
    }, unref(F), { onClick: Z }), {
      default: withCtx(() => [
        unref(A) ? (openBlock(), createElementBlock("span", Ps, [
          renderSlot(ae.$slots, "default")
        ])) : e.src ? (openBlock(), createElementBlock("span", Is, [
          createBaseVNode("img", {
            src: e.src,
            alt: e.alt,
            onError: ge
          }, null, 40, Fs)
        ])) : e.text ? (openBlock(), createElementBlock("span", {
          key: 2,
          class: normalizeClass(["b-avatar-text", unref(b)]),
          style: normalizeStyle(unref(H))
        }, toDisplayString(e.text), 7)) : createCommentVNode("", true),
        unref(B) ? (openBlock(), createElementBlock("span", {
          key: 3,
          class: normalizeClass(["b-avatar-badge", unref(I)]),
          style: normalizeStyle(unref(x))
        }, [
          unref(w) ? renderSlot(ae.$slots, "badge", { key: 0 }) : (openBlock(), createElementBlock("span", {
            key: 1,
            class: normalizeClass(unref(_))
          }, toDisplayString(unref(V)), 3))
        ], 6)) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16, ["class", "style"]));
  }
});
var Ls = defineComponent({
  __name: "BAvatarGroup",
  props: {
    overlap: { default: 0.3 },
    rounded: { type: [Boolean, String], default: false },
    size: null,
    square: { default: false },
    tag: { default: "div" },
    variant: null
  },
  setup(e) {
    const t = e, a = u(toRef(t, "square")), l = computed(() => Kt(t.size)), n = computed(
      () => Math.min(Math.max(d(t.overlap), 0), 1) / 2
    ), r = computed(() => {
      const c = l.value ? `calc(${l.value} * ${n.value})` : null;
      return c ? { paddingLeft: c, paddingRight: c } : {};
    }), d = (c) => typeof c == "string" && fl(c) ? rt(c, 0) : c || 0;
    return provide(Al, {
      overlapScale: n,
      size: t.size,
      square: a.value,
      rounded: t.rounded,
      variant: t.variant
    }), (c, v) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: "b-avatar-group",
      role: "group"
    }, {
      default: withCtx(() => [
        createBaseVNode("div", {
          class: "b-avatar-group-inner",
          style: normalizeStyle(unref(r))
        }, [
          renderSlot(c.$slots, "default")
        ], 4)
      ]),
      _: 3
    }));
  }
});
var Ea = Ot(Je, ["event", "routerTag"]);
var zs = defineComponent({
  components: { BLink: Ve },
  props: {
    pill: { type: [Boolean, String], default: false },
    tag: { type: String, default: "span" },
    variant: { type: String, default: "secondary" },
    textIndicator: { type: [Boolean, String], default: false },
    dotIndicator: { type: [Boolean, String], default: false },
    ...Ea
  },
  setup(e) {
    const t = u(toRef(e, "pill")), a = u(toRef(e, "textIndicator")), l = u(toRef(e, "dotIndicator")), n = u(toRef(e, "active")), r = u(toRef(e, "disabled")), d = computed(() => it(e)), c = computed(
      () => d.value ? Ve : e.tag
    ), v = computed(() => [
      [`bg-${e.variant}`],
      {
        active: n.value,
        disabled: r.value,
        "text-dark": ["warning", "info", "light"].includes(e.variant),
        "rounded-pill": t.value,
        "position-absolute top-0 start-100 translate-middle": a.value || l.value,
        "p-2 border border-light rounded-circle": l.value,
        "text-decoration-none": d.value
      }
    ]), m = computed(
      () => d.value ? ia(e, Ea) : {}
    );
    return {
      computedClasses: v,
      computedLinkProps: m,
      computedTag: c
    };
  }
});
function Ns(e, t, a, l, n, r) {
  return openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({
    class: ["badge", e.computedClasses]
  }, e.computedLinkProps), {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 16, ["class"]);
}
var Ds = Te(zs, [["render", Ns]]);
var La = Ot(Je, ["event", "routerTag"]);
var Hs = defineComponent({
  components: { BLink: Ve },
  props: {
    ...La,
    active: { type: [Boolean, String], default: false },
    ariaCurrent: { type: String, default: "location" },
    disabled: { type: [Boolean, String], default: false },
    text: { type: String, required: false }
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = u(toRef(e, "active")), l = u(toRef(e, "disabled")), n = computed(() => ({
      active: a.value
    })), r = computed(
      () => a.value ? "span" : Ve
    ), d = computed(
      () => a.value ? e.ariaCurrent : void 0
    );
    return {
      computedLinkProps: computed(
        () => r.value !== "span" ? ia(e, La) : {}
      ),
      computedClasses: n,
      computedTag: r,
      computedAriaCurrent: d,
      clicked: (m) => {
        if (l.value || a.value) {
          m.preventDefault(), m.stopImmediatePropagation();
          return;
        }
        l.value || t("click", m);
      }
    };
  }
});
function Ms(e, t, a, l, n, r) {
  return openBlock(), createElementBlock("li", {
    class: normalizeClass(["breadcrumb-item", e.computedClasses])
  }, [
    (openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({ "aria-current": e.computedAriaCurrent }, e.computedLinkProps, { onClick: e.clicked }), {
      default: withCtx(() => [
        renderSlot(e.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16, ["aria-current", "onClick"]))
  ], 2);
}
var Yl = Te(Hs, [["render", Ms]]);
var Rs = { "aria-label": "breadcrumb" };
var js = { class: "breadcrumb" };
var qs = defineComponent({
  __name: "BBreadcrumb",
  props: {
    items: null
  },
  setup(e) {
    const t = e, a = Hl(), l = computed(() => {
      const n = t.items || (a == null ? void 0 : a.items) || [];
      let r = false;
      return n.map((c, v) => (typeof c == "string" && (c = { text: c }, v < n.length - 1 && (c.href = "#")), c.active && (r = true), !c.active && !r && (c.active = v + 1 === n.length), c));
    });
    return (n, r) => (openBlock(), createElementBlock("nav", Rs, [
      createBaseVNode("ol", js, [
        renderSlot(n.$slots, "prepend"),
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l), (d, c) => (openBlock(), createBlock(Yl, mergeProps({ key: c }, d), {
          default: withCtx(() => [
            createTextVNode(toDisplayString(d.text), 1)
          ]),
          _: 2
        }, 1040))), 128)),
        renderSlot(n.$slots, "default"),
        renderSlot(n.$slots, "append")
      ])
    ]));
  }
});
var Gs = defineComponent({
  __name: "BButtonGroup",
  props: {
    ariaLabel: { default: "Group" },
    size: null,
    tag: { default: "div" },
    vertical: { default: false }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "vertical")), l = computed(() => ({
      "btn-group": !a.value,
      [`btn-group-${t.size}`]: t.size !== void 0,
      "btn-group-vertical": a.value
    }));
    return (n, r) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(l)),
      role: "group",
      "aria-label": e.ariaLabel
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default")
      ]),
      _: 3
    }, 8, ["class", "aria-label"]));
  }
});
var Us = ["role", "aria-label"];
var Ws = defineComponent({
  __name: "BButtonToolbar",
  props: {
    ariaLabel: { default: "Group" },
    justify: { default: false },
    role: { default: "toolbar" }
  },
  setup(e) {
    const a = u(toRef(e, "justify")), l = computed(() => ({
      "justify-content-between": a.value
    }));
    return (n, r) => (openBlock(), createElementBlock("div", {
      class: normalizeClass([unref(l), "btn-toolbar"]),
      role: e.role,
      "aria-label": e.ariaLabel
    }, [
      renderSlot(n.$slots, "default")
    ], 10, Us));
  }
});
var ca = defineComponent({
  __name: "BImg",
  props: {
    alt: null,
    blank: { default: false },
    blankColor: { default: "transparent" },
    block: { default: false },
    center: { default: false },
    fluid: { default: false },
    lazy: { default: false },
    fluidGrow: { default: false },
    height: null,
    left: { default: false },
    start: { default: false },
    right: { default: false },
    end: { default: false },
    rounded: { type: [Boolean, String], default: false },
    sizes: null,
    src: null,
    srcset: null,
    thumbnail: { default: false },
    width: null
  },
  emits: ["load"],
  setup(e, { emit: t }) {
    const a = e, l = '<svg width="%{w}" height="%{h}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 %{w} %{h}" preserveAspectRatio="none"><rect width="100%" height="100%" style="fill:%{f};"></rect></svg>', n = u(toRef(a, "lazy")), r = u(toRef(a, "blank")), d = u(toRef(a, "block")), c = u(toRef(a, "center")), v = u(toRef(a, "fluid")), m = u(toRef(a, "fluidGrow")), C = u(toRef(a, "left")), p = u(toRef(a, "start")), g = u(toRef(a, "right")), A = u(toRef(a, "end")), w = u(toRef(a, "thumbnail")), B = computed(
      () => typeof a.srcset == "string" ? a.srcset.split(",").filter((O) => O).join(",") : Array.isArray(a.srcset) ? a.srcset.filter((O) => O).join(",") : void 0
    ), S = computed(
      () => typeof a.sizes == "string" ? a.sizes.split(",").filter((O) => O).join(",") : Array.isArray(a.sizes) ? a.sizes.filter((O) => O).join(",") : void 0
    ), h2 = computed(() => {
      const O = (H) => H === void 0 ? void 0 : typeof H == "number" ? H : Number.parseInt(H, 10) || void 0, b = O(a.width), x = O(a.height);
      if (r.value) {
        if (b !== void 0 && x === void 0)
          return { height: b, width: b };
        if (b === void 0 && x !== void 0)
          return { height: x, width: x };
        if (b === void 0 && x === void 0)
          return { height: 1, width: 1 };
      }
      return {
        width: b,
        height: x
      };
    }), $ = computed(
      () => _(h2.value.width, h2.value.height, a.blankColor)
    ), F = computed(() => ({
      src: r.value ? $.value : a.src,
      alt: a.alt,
      width: h2.value.width || void 0,
      height: h2.value.height || void 0,
      srcset: r.value ? void 0 : B.value,
      sizes: r.value ? void 0 : S.value,
      loading: n.value ? "lazy" : "eager"
    })), I = computed(
      () => C.value || p.value ? "float-start" : g.value || A.value ? "float-end" : c.value ? "mx-auto" : void 0
    ), V = computed(() => ({
      "img-thumbnail": w.value,
      "img-fluid": v.value || m.value,
      "w-100": m.value,
      rounded: a.rounded === "" || a.rounded === true,
      [`rounded-${a.rounded}`]: typeof a.rounded == "string" && a.rounded !== "",
      [`${I.value}`]: I.value !== void 0,
      "d-block": d.value || c.value
    })), _ = (O, b, x) => `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(
      l.replace("%{w}", String(O)).replace("%{h}", String(b)).replace("%{f}", x)
    )}`;
    return (O, b) => (openBlock(), createElementBlock("img", mergeProps({ class: unref(V) }, unref(F), {
      onLoad: b[0] || (b[0] = (x) => t("load", x))
    }), null, 16));
  }
});
var _t = defineComponent({
  __name: "BCardImg",
  props: {
    alt: null,
    blank: { default: false },
    blankColor: null,
    bottom: { default: false },
    lazy: { default: false },
    height: null,
    left: { default: false },
    start: { default: false },
    right: { default: false },
    end: { default: false },
    sizes: null,
    src: null,
    srcset: null,
    top: { default: false },
    width: null
  },
  emits: ["load"],
  setup(e, { emit: t }) {
    const a = e, l = u(toRef(a, "bottom")), n = u(toRef(a, "end")), r = u(toRef(a, "left")), d = u(toRef(a, "right")), c = u(toRef(a, "start")), v = u(toRef(a, "top")), m = computed(
      () => v.value ? "card-img-top" : d.value || n.value ? "card-img-right" : l.value ? "card-img-bottom" : r.value || c.value ? "card-img-left" : "card-img"
    ), C = computed(() => ({
      alt: a.alt,
      height: a.height,
      src: a.src,
      lazy: a.lazy,
      width: a.width,
      blank: a.blank,
      blankColor: a.blankColor,
      sizes: a.sizes,
      srcset: a.srcset
    }));
    return (p, g) => (openBlock(), createBlock(ca, mergeProps({ class: unref(m) }, unref(C), {
      onLoad: g[0] || (g[0] = (A) => t("load", A))
    }), null, 16, ["class"]));
  }
});
var Ks = ["innerHTML"];
var Zl = defineComponent({
  __name: "BCardHeadFoot",
  props: {
    text: null,
    bgVariant: null,
    borderVariant: null,
    html: null,
    tag: { default: "div" },
    textVariant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`text-${t.textVariant}`]: t.textVariant !== void 0,
      [`bg-${t.bgVariant}`]: t.bgVariant !== void 0,
      [`border-${t.borderVariant}`]: t.borderVariant !== void 0
    }));
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(a))
    }, {
      default: withCtx(() => [
        e.html ? (openBlock(), createElementBlock("div", {
          key: 0,
          innerHTML: e.html
        }, null, 8, Ks)) : renderSlot(l.$slots, "default", { key: 1 }, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var en = defineComponent({
  __name: "BCardHeader",
  props: {
    text: null,
    bgVariant: null,
    borderVariant: null,
    html: null,
    tag: { default: "div" },
    textVariant: null
  },
  setup(e) {
    const t = e;
    return (a, l) => (openBlock(), createBlock(Zl, mergeProps({ class: "card-header" }, t), {
      default: withCtx(() => [
        renderSlot(a.$slots, "default")
      ]),
      _: 3
    }, 16));
  }
});
var tn = defineComponent({
  __name: "BCardTitle",
  props: {
    text: null,
    tag: { default: "h4" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "card-title" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var an = defineComponent({
  __name: "BCardSubtitle",
  props: {
    text: null,
    tag: { default: "h6" },
    textVariant: { default: "muted" }
  },
  setup(e) {
    const t = e, a = computed(() => [`text-${t.textVariant}`]);
    return (l, n) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["card-subtitle mb-2", unref(a)])
    }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var ln = defineComponent({
  __name: "BCardBody",
  props: {
    bodyBgVariant: null,
    bodyTag: { default: "div" },
    bodyTextVariant: null,
    overlay: { default: false },
    subtitle: null,
    subtitleTag: { default: "h4" },
    subtitleTextVariant: null,
    title: null,
    titleTag: { default: "h4" },
    text: null
  },
  setup(e) {
    const t = e, a = useSlots(), l = u(toRef(t, "overlay")), n = computed(() => !we(a.title)), r = computed(() => !we(a.subtitle)), d = computed(() => ({
      "card-img-overlay": l.value,
      [`text-${t.bodyTextVariant}`]: t.bodyTextVariant !== void 0,
      [`bg-${t.bodyBgVariant}`]: t.bodyBgVariant !== void 0
    }));
    return (c, v) => (openBlock(), createBlock(resolveDynamicComponent(e.bodyTag), {
      class: normalizeClass(["card-body", unref(d)])
    }, {
      default: withCtx(() => [
        !!e.title || unref(n) ? (openBlock(), createBlock(tn, {
          key: 0,
          tag: e.titleTag
        }, {
          default: withCtx(() => [
            renderSlot(c.$slots, "title", {}, () => [
              createTextVNode(toDisplayString(e.title), 1)
            ])
          ]),
          _: 3
        }, 8, ["tag"])) : createCommentVNode("", true),
        !!e.subtitle || unref(r) ? (openBlock(), createBlock(an, {
          key: 1,
          tag: e.subtitleTag,
          "text-variant": e.subtitleTextVariant
        }, {
          default: withCtx(() => [
            renderSlot(c.$slots, "subtitle", {}, () => [
              createTextVNode(toDisplayString(e.subtitle), 1)
            ])
          ]),
          _: 3
        }, 8, ["tag", "text-variant"])) : createCommentVNode("", true),
        renderSlot(c.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var nn = defineComponent({
  __name: "BCardFooter",
  props: {
    text: null,
    bgVariant: null,
    borderVariant: null,
    html: null,
    tag: { default: "div" },
    textVariant: null
  },
  setup(e) {
    const t = e;
    return (a, l) => (openBlock(), createBlock(Zl, mergeProps({ class: "card-footer" }, t), {
      default: withCtx(() => [
        renderSlot(a.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16));
  }
});
var on = defineComponent({
  __name: "BCard",
  props: {
    align: null,
    bgVariant: null,
    bodyBgVariant: null,
    bodyClass: null,
    bodyTag: { default: "div" },
    bodyTextVariant: null,
    borderVariant: null,
    footer: null,
    footerBgVariant: null,
    footerBorderVariant: null,
    footerClass: null,
    footerHtml: { default: "" },
    footerTag: { default: "div" },
    footerTextVariant: null,
    header: null,
    headerBgVariant: null,
    headerBorderVariant: null,
    headerClass: null,
    headerHtml: { default: "" },
    headerTag: { default: "div" },
    headerTextVariant: null,
    imgAlt: null,
    imgBottom: { default: false },
    imgEnd: { default: false },
    imgHeight: null,
    imgLeft: { default: false },
    imgRight: { default: false },
    imgSrc: null,
    imgStart: { default: false },
    imgTop: { default: false },
    imgWidth: null,
    noBody: { default: false },
    overlay: { default: false },
    subtitle: null,
    subtitleTag: { default: "h6" },
    subtitleTextVariant: { default: "muted" },
    tag: { default: "div" },
    textVariant: null,
    title: null,
    titleTag: { default: "h4" },
    bodyText: { default: "" }
  },
  setup(e) {
    const t = e, a = useSlots(), l = u(toRef(t, "imgBottom")), n = u(toRef(t, "imgEnd")), r = u(toRef(t, "imgLeft")), d = u(toRef(t, "imgRight")), c = u(toRef(t, "imgStart")), v = u(toRef(t, "noBody")), m = computed(() => !we(a.header)), C = computed(() => !we(a.footer)), p = computed(() => ({
      [`text-${t.align}`]: t.align !== void 0,
      [`text-${t.textVariant}`]: t.textVariant !== void 0,
      [`bg-${t.bgVariant}`]: t.bgVariant !== void 0,
      [`border-${t.borderVariant}`]: t.borderVariant !== void 0,
      "flex-row": r.value || c.value,
      "flex-row-reverse": n.value || d.value
    })), g = computed(() => ({
      bgVariant: t.headerBgVariant,
      borderVariant: t.headerBorderVariant,
      html: t.headerHtml,
      tag: t.headerTag,
      textVariant: t.headerTextVariant
    })), A = computed(() => ({
      overlay: t.overlay,
      bodyBgVariant: t.bodyBgVariant,
      bodyTag: t.bodyTag,
      bodyTextVariant: t.bodyTextVariant,
      subtitle: t.subtitle,
      subtitleTag: t.subtitleTag,
      subtitleTextVariant: t.subtitleTextVariant,
      title: t.title,
      titleTag: t.titleTag
    })), w = computed(() => ({
      bgVariant: t.footerBgVariant,
      borderVariant: t.footerBorderVariant,
      html: t.footerHtml,
      tag: t.footerTag,
      textVariant: t.footerTextVariant
    })), B = computed(() => ({
      src: t.imgSrc,
      alt: t.imgAlt,
      height: t.imgHeight,
      width: t.imgWidth,
      bottom: t.imgBottom,
      end: t.imgEnd,
      left: t.imgLeft,
      right: t.imgRight,
      start: t.imgStart,
      top: t.imgTop
    }));
    return (S, h2) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["card", unref(p)])
    }, {
      default: withCtx(() => [
        unref(l) ? createCommentVNode("", true) : renderSlot(S.$slots, "img", { key: 0 }, () => [
          e.imgSrc ? (openBlock(), createBlock(_t, normalizeProps(mergeProps({ key: 0 }, unref(B))), null, 16)) : createCommentVNode("", true)
        ]),
        e.header || unref(m) || e.headerHtml ? (openBlock(), createBlock(en, mergeProps({ key: 1 }, unref(g), { class: e.headerClass }), {
          default: withCtx(() => [
            renderSlot(S.$slots, "header", {}, () => [
              createTextVNode(toDisplayString(e.header), 1)
            ])
          ]),
          _: 3
        }, 16, ["class"])) : createCommentVNode("", true),
        unref(v) ? renderSlot(S.$slots, "default", { key: 3 }, () => [
          createTextVNode(toDisplayString(e.bodyText), 1)
        ]) : (openBlock(), createBlock(ln, mergeProps({ key: 2 }, unref(A), { class: e.bodyClass }), {
          default: withCtx(() => [
            renderSlot(S.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(e.bodyText), 1)
            ])
          ]),
          _: 3
        }, 16, ["class"])),
        e.footer || unref(C) || e.footerHtml ? (openBlock(), createBlock(nn, mergeProps({ key: 4 }, unref(w), { class: e.footerClass }), {
          default: withCtx(() => [
            renderSlot(S.$slots, "footer", {}, () => [
              createTextVNode(toDisplayString(e.footer), 1)
            ])
          ]),
          _: 3
        }, 16, ["class"])) : createCommentVNode("", true),
        unref(l) ? renderSlot(S.$slots, "img", { key: 5 }, () => [
          e.imgSrc ? (openBlock(), createBlock(_t, normalizeProps(mergeProps({ key: 0 }, unref(B))), null, 16)) : createCommentVNode("", true)
        ]) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Xs = defineComponent({
  __name: "BCardGroup",
  props: {
    columns: { default: false },
    deck: { default: false },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "columns")), l = u(toRef(t, "deck")), n = computed(
      () => l.value ? "card-deck" : a.value ? "card-columns" : "card-group"
    ), r = computed(() => [n.value]);
    return (d, c) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(unref(r))
    }, {
      default: withCtx(() => [
        renderSlot(d.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Js = defineComponent({
  __name: "BCardText",
  props: {
    text: null,
    tag: { default: "p" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "card-text" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var Qs = ["id", "onMouseenter", "onMouseleave"];
var Ys = {
  key: 0,
  class: "carousel-indicators"
};
var Zs = ["aria-current", "aria-label", "onClick"];
var er = { class: "carousel-inner" };
var tr = createBaseVNode("span", {
  class: "carousel-control-prev-icon",
  "aria-hidden": "true"
}, null, -1);
var ar = { class: "visually-hidden" };
var lr = createBaseVNode("span", {
  class: "carousel-control-next-icon",
  "aria-hidden": "true"
}, null, -1);
var nr = { class: "visually-hidden" };
var or = defineComponent({
  __name: "BCarousel",
  props: {
    ride: { type: [Boolean, String], default: false },
    noHoverPause: { default: false },
    rideReverse: { default: false },
    fade: { default: false },
    id: null,
    imgHeight: null,
    imgWidth: null,
    background: null,
    modelValue: { default: 0 },
    controls: { default: false },
    indicators: { default: false },
    interval: { default: 5e3 },
    noTouch: { default: false },
    noWrap: { default: false },
    controlsPrevText: { default: "Previous" },
    controlsNextText: { default: "Next" },
    indicatorsButtonLabel: { default: "Slide" },
    keyboard: { default: true }
  },
  emits: ["slid", "slide", "update:modelValue"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = useSlots(), r = $e(toRef(l, "id"), "carousel"), d = u(toRef(l, "keyboard")), c = u(toRef(l, "rideReverse")), v = u(toRef(l, "noHoverPause")), m = u(toRef(l, "fade")), C = u(toRef(l, "controls")), p = u(toRef(l, "indicators")), g = u(toRef(l, "noTouch")), A = u(toRef(l, "noWrap"));
    let w = null, B = null;
    const S = ref(false), h2 = ref(false), $ = ref(true), F = ref(null), I = ref(null), V = computed(
      () => Dn(l.ride) ? dl(l.ride) : l.ride
    ), { pause: _, resume: O } = El(
      () => {
        c.value ? K() : oe();
      },
      toRef(l, "interval"),
      { immediate: V.value === "carousel" }
    ), b = computed(
      () => V.value === true && h2.value === true || V.value === "carousel"
    ), x = computed(() => Gt(n.default, "BCarouselSlide")), H = computed(() => [
      "carousel",
      "slide",
      "pointer-event",
      { "carousel-fade": m.value }
    ]), j = (E, N) => {
      var J, Q;
      return new cl(E, {
        componentId: r.value,
        cancelable: false,
        target: I.value,
        direction: $.value ? "right" : "left",
        from: N,
        to: l.modelValue,
        relatedTarget: (Q = (J = F.value) == null ? void 0 : J.children[l.modelValue]) != null ? Q : null
      });
    }, q = (E) => {
      if (S.value !== true) {
        if (V.value === true && (h2.value = true), b.value === true && O(), $.value = !(E < l.modelValue), E >= x.value.length) {
          if (A.value)
            return;
          a("update:modelValue", 0);
          return;
        }
        if (E < 0) {
          if (A.value)
            return;
          a("update:modelValue", x.value.length - 1);
          return;
        }
        a("update:modelValue", E);
      }
    }, K = () => q(l.modelValue - 1), oe = () => q(l.modelValue + 1), Z = (E) => {
      d.value !== false && E();
    }, ge = () => {
      v.value || _();
    }, ae = () => {
      !b.value || O();
    }, pe = (E) => {
      g.value || (w = E.touches[0].clientX, B = E.touches[0].clientY, _());
    }, ye = (E) => {
      if (!w || !B)
        return;
      const N = E.touches[0].clientX, J = E.touches[0].clientY, Q = w - N, be = B - J;
      Math.abs(Q) > Math.abs(be) && (Q > 0 ? oe() : K()), w = null, B = null, b.value !== false && O();
    }, he = (E) => {
      a("slide", j("slide", E)), S.value = true;
    }, re = (E) => {
      a("slid", j("slid", E)), S.value = false;
    };
    return watch(
      () => l.ride,
      () => h2.value = false
    ), t({ pause: _, resume: O, prev: K, next: oe }), provide(Cl, {
      background: l.background,
      width: l.imgWidth,
      height: l.imgHeight
    }), (E, N) => (openBlock(), createElementBlock("div", {
      id: unref(r),
      ref_key: "target",
      ref: I,
      class: normalizeClass(unref(H)),
      onKeydown: [
        N[0] || (N[0] = withKeys((J) => Z(K), ["left"])),
        N[1] || (N[1] = withKeys((J) => Z(oe), ["right"]))
      ],
      onMouseenter: withModifiers(ge, ["stop"]),
      onMouseleave: withModifiers(ae, ["stop"]),
      onTouchstartPassive: pe,
      onTouchendPassive: ye
    }, [
      unref(p) ? (openBlock(), createElementBlock("div", Ys, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(x).length, (J, Q) => (openBlock(), createElementBlock("button", {
          key: Q,
          type: "button",
          "data-bs-target": "",
          class: normalizeClass(Q === e.modelValue ? "active" : ""),
          "aria-current": Q === e.modelValue ? "true" : void 0,
          "aria-label": `${e.indicatorsButtonLabel} ${Q}`,
          onClick: (be) => q(Q)
        }, null, 10, Zs))), 128))
      ])) : createCommentVNode("", true),
      createBaseVNode("div", {
        ref_key: "relatedTarget",
        ref: F,
        class: "carousel-inner"
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(x), (J, Q) => (openBlock(), createBlock(Transition, {
          key: Q,
          "enter-from-class": `carousel-item-next carousel-item-${$.value ? "end" : "start"}`,
          "leave-active-class": "active",
          "leave-to-class": `carousel-item-prev carousel-item-${$.value ? "start" : "end"}`,
          onBeforeLeave: he,
          onAfterLeave: re
        }, {
          default: withCtx(() => [
            withDirectives((openBlock(), createBlock(resolveDynamicComponent(J), {
              class: normalizeClass({ active: Q === e.modelValue })
            }, null, 8, ["class"])), [
              [vShow, Q === e.modelValue]
            ])
          ]),
          _: 2
        }, 1032, ["enter-from-class", "leave-to-class"]))), 128))
      ], 512),
      createBaseVNode("div", er, [
        renderSlot(E.$slots, "default")
      ]),
      unref(C) ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        createBaseVNode("button", {
          class: "carousel-control-prev",
          type: "button",
          onClick: K
        }, [
          tr,
          createBaseVNode("span", ar, toDisplayString(e.controlsPrevText), 1)
        ]),
        createBaseVNode("button", {
          class: "carousel-control-next",
          type: "button",
          onClick: oe
        }, [
          lr,
          createBaseVNode("span", nr, toDisplayString(e.controlsNextText), 1)
        ])
      ], 64)) : createCommentVNode("", true)
    ], 42, Qs));
  }
});
var sr = ["innerHTML"];
var rr = { key: 1 };
var ir = ["innerHTML"];
var ur = { key: 1 };
var dr = defineComponent({
  __name: "BCarouselSlide",
  props: {
    imgSrc: null,
    imgHeight: null,
    imgWidth: null,
    interval: null,
    background: null,
    caption: null,
    captionHtml: null,
    captionTag: { default: "h3" },
    contentTag: { default: "div" },
    contentVisibleUp: null,
    id: null,
    imgAlt: null,
    imgBlank: { default: false },
    imgBlankColor: { default: "transparent" },
    text: null,
    textHtml: null,
    textTag: { default: "p" }
  },
  setup(e) {
    const t = e, a = useSlots(), l = inject(Cl), n = computed(() => t.text || t.textHtml || !we(a.text)), r = computed(() => t.caption || t.captionHtml || !we(a.caption)), d = computed(() => n.value || r.value || !we(a.default)), c = computed(() => ({
      background: `${t.background || (l == null ? void 0 : l.background) || "rgb(171, 171, 171)"} none repeat scroll 0% 0%`
    })), v = computed(() => ({
      "d-none": t.contentVisibleUp !== void 0,
      [`d-${t.contentVisibleUp}-block`]: t.contentVisibleUp !== void 0
    }));
    return (m, C) => (openBlock(), createElementBlock("div", {
      class: "carousel-item",
      style: normalizeStyle(unref(c))
    }, [
      renderSlot(m.$slots, "img", {}, () => {
        var p, g;
        return [
          createVNode(ca, {
            class: "d-block w-100",
            alt: e.imgAlt,
            src: e.imgSrc,
            width: e.imgWidth || ((p = unref(l)) == null ? void 0 : p.width),
            height: e.imgHeight || ((g = unref(l)) == null ? void 0 : g.height),
            blank: e.imgBlank,
            "blank-color": e.imgBlankColor
          }, null, 8, ["alt", "src", "width", "height", "blank", "blank-color"])
        ];
      }),
      unref(d) ? (openBlock(), createBlock(resolveDynamicComponent(e.contentTag), {
        key: 0,
        class: normalizeClass(["carousel-caption", unref(v)])
      }, {
        default: withCtx(() => [
          unref(r) ? (openBlock(), createBlock(resolveDynamicComponent(e.captionTag), { key: 0 }, {
            default: withCtx(() => [
              renderSlot(m.$slots, "caption", {}, () => [
                e.captionHtml ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: e.captionHtml
                }, null, 8, sr)) : (openBlock(), createElementBlock("span", rr, toDisplayString(e.caption), 1))
              ])
            ]),
            _: 3
          })) : createCommentVNode("", true),
          unref(n) ? (openBlock(), createBlock(resolveDynamicComponent(e.textTag), { key: 1 }, {
            default: withCtx(() => [
              renderSlot(m.$slots, "text", {}, () => [
                e.textHtml ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: e.textHtml
                }, null, 8, ir)) : (openBlock(), createElementBlock("span", ur, toDisplayString(e.text), 1))
              ])
            ]),
            _: 3
          })) : createCommentVNode("", true),
          renderSlot(m.$slots, "default")
        ]),
        _: 3
      }, 8, ["class"])) : createCommentVNode("", true)
    ], 4));
  }
});
var za = At("", [], { type: [Boolean, String, Number], default: false });
var Na = At("offset", [""], { type: [String, Number], default: null });
var Da = At("order", [""], { type: [String, Number], default: null });
var cr = defineComponent({
  name: "BCol",
  props: {
    col: { type: [Boolean, String], default: false },
    cols: { type: [String, Number], default: null },
    ...za,
    offset: { type: [String, Number], default: null },
    ...Na,
    order: { type: [String, Number], default: null },
    ...Da,
    alignSelf: { type: String, default: null },
    tag: { type: String, default: "div" }
  },
  setup(e) {
    const t = [
      { content: za, propPrefix: "cols", classPrefix: "col" },
      { content: Na, propPrefix: "offset" },
      { content: Da, propPrefix: "order" }
    ], a = u(toRef(e, "col")), l = computed(
      () => t.flatMap((r) => Sl(e, r.content, r.propPrefix, r.classPrefix))
    );
    return {
      computedClasses: computed(() => [
        l.value,
        {
          col: a.value || !l.value.some((r) => /^col-/.test(r)) && !e.cols,
          [`col-${e.cols}`]: !!e.cols,
          [`offset-${e.offset}`]: !!e.offset,
          [`order-${e.order}`]: !!e.order,
          [`align-self-${e.alignSelf}`]: !!e.alignSelf
        }
      ])
    };
  }
});
function fr(e, t, a, l, n, r) {
  return openBlock(), createBlock(resolveDynamicComponent(e.tag), {
    class: normalizeClass(e.computedClasses)
  }, {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var st = Te(cr, [["render", fr]]);
var Qe = {
  autoHide: true,
  delay: 5e3,
  noCloseButton: false,
  pos: "top-right",
  value: true
};
var Ha = class {
  constructor(t) {
    me(this, "vm");
    me(this, "containerPositions");
    isReactive(t) ? this.vm = t : this.vm = reactive(t), this.containerPositions = computed(() => {
      const a = /* @__PURE__ */ new Set([]);
      return this.vm.toasts.map((l) => {
        l.options.pos && a.add(l.options.pos);
      }), a;
    });
  }
  toasts(t) {
    return t ? computed(
      () => this.vm.toasts.filter((a) => {
        if (a.options.pos === t && a.options.value)
          return a;
      })
    ) : computed(() => this.vm.toasts);
  }
  remove(...t) {
    this.vm.toasts = this.vm.toasts.filter((a) => {
      if (a.options.id && !t.includes(a.options.id))
        return a;
    });
  }
  isRoot() {
    var t;
    return (t = this.vm.root) != null ? t : false;
  }
  show(t, a = Qe) {
    const l = { id: Re(), ...Qe, ...a }, n = {
      options: reactive(l),
      content: t
    };
    return this.vm.toasts.push(n), n;
  }
  info(t, a = Qe) {
    return this.show(t, { variant: "info", ...a });
  }
  danger(t, a = Qe) {
    return this.show(t, { variant: "danger", ...a });
  }
  warning(t, a = Qe) {
    return this.show(t, { variant: "warning", ...a });
  }
  success(t, a = Qe) {
    return this.show(t, { variant: "success", ...a });
  }
  hide() {
  }
};
var vr = class {
  constructor() {
    me(this, "vms");
    me(this, "rootInstance");
    me(this, "useToast", rn);
    this.vms = {};
  }
  getOrCreateViewModel(t) {
    if (!t) {
      if (this.rootInstance)
        return this.vms[this.rootInstance];
      const a = { root: true, toasts: [], container: void 0, id: Symbol("toast") };
      return this.rootInstance = a.id, this.vms[a.id] = a, a;
    }
    if (t.root) {
      if (this.rootInstance)
        return this.vms[this.rootInstance];
      this.rootInstance = t.id;
    }
    return this.vms[t.id] = t, t;
  }
  getVM(t) {
    if (!t && this.rootInstance)
      return this.vms[this.rootInstance];
    if (t)
      return this.vms[t];
  }
};
var Xt = Symbol();
var sn = Symbol();
var mr = {
  container: void 0,
  toasts: [],
  root: false
};
function pr() {
  return inject(sn);
}
function rn(e, t = Xt) {
  const a = inject(pr());
  if (!e)
    return new Ha(a.getOrCreateViewModel());
  const l = { id: Symbol("toastInstance") }, n = { ...mr, ...l, ...e }, r = a.getOrCreateViewModel(n);
  return new Ha(r);
}
var br = {
  install: (e, t = {}) => {
    var a, l, n, r;
    e.provide(sn, (l = (a = t == null ? void 0 : t.BToast) == null ? void 0 : a.injectkey) != null ? l : Xt), e.provide((r = (n = t == null ? void 0 : t.BToast) == null ? void 0 : n.injectkey) != null ? r : Xt, new vr());
  }
};
var gr = "toast-title";
var Ma = 1e3;
var un = defineComponent({
  components: { BLink: Ve },
  props: {
    ...Je,
    delay: { type: Number, default: 5e3 },
    bodyClass: { type: String },
    body: { type: [Object, String] },
    headerClass: { type: String },
    headerTag: { type: String, default: "div" },
    animation: { type: [Boolean, String], default: true },
    id: { type: String },
    isStatus: { type: [Boolean, String], default: false },
    autoHide: { type: [Boolean, String], default: true },
    noCloseButton: { type: [Boolean, String], default: false },
    noFade: { type: [Boolean, String], default: false },
    noHoverPause: { type: [Boolean, String], default: false },
    solid: { type: [Boolean, String], default: false },
    static: { type: [Boolean, String], default: false },
    title: { type: String },
    modelValue: { type: [Boolean, String], default: false },
    toastClass: { type: Array },
    variant: { type: String }
  },
  emits: ["destroyed", "update:modelValue"],
  setup(e, { emit: t, slots: a }) {
    u(toRef(e, "animation"));
    const l = u(toRef(e, "isStatus")), n = u(toRef(e, "autoHide")), r = u(toRef(e, "noCloseButton")), d = u(toRef(e, "noFade")), c = u(toRef(e, "noHoverPause"));
    u(toRef(e, "solid")), u(toRef(e, "static"));
    const v = u(toRef(e, "modelValue")), m = ref(false), C = ref(false), p = ref(false), g = computed(() => ({
      [`b-toast-${e.variant}`]: e.variant !== void 0,
      show: p.value || m.value
    }));
    let A, w, B;
    const S = () => {
      typeof A > "u" || (clearTimeout(A), A = void 0);
    }, h2 = computed(
      () => Math.max(je(e.delay, 0), Ma)
    ), $ = () => {
      v.value && (w = B = 0, S(), C.value = true, ft(() => {
        p.value = false;
      }));
    }, F = () => {
      S(), t("update:modelValue", true), w = B = 0, C.value = false, nextTick(() => {
        ft(() => {
          p.value = true;
        });
      });
    }, I = () => {
      if (!n.value || c.value || !A || B)
        return;
      const q = Date.now() - w;
      q > 0 && (S(), B = Math.max(h2.value - q, Ma));
    }, V = () => {
      (!n.value || c.value || !B) && (B = w = 0), _();
    };
    watch(v, (q) => {
      q ? F() : $();
    });
    const _ = () => {
      S(), n.value && (A = setTimeout($, B || h2.value), w = Date.now(), B = 0);
    }, O = () => {
      m.value = true, t("update:modelValue", true);
    }, b = () => {
      m.value = false, _();
    }, x = () => {
      m.value = true;
    }, H = () => {
      m.value = false, B = w = 0, t("update:modelValue", false);
    };
    onUnmounted(() => {
      S(), n.value && t("destroyed", e.id);
    }), onMounted(() => {
      nextTick(() => {
        v.value && ft(() => {
          F();
        });
      });
    });
    const j = () => {
      nextTick(() => {
        ft(() => {
          $();
        });
      });
    };
    return () => {
      const q = () => {
        const K = [], oe = Pe(gr, { hide: $ }, a);
        oe ? K.push(h(oe)) : e.title && K.push(h("strong", { class: "me-auto" }, e.title)), !r.value && K.length !== 0 && K.push(
          h(nt, {
            class: ["btn-close"],
            onClick: () => {
              $();
            }
          })
        );
        const Z = [];
        if (K.length > 0 && Z.push(
          h(
            e.headerTag,
            {
              class: "toast-header"
            },
            { default: () => K }
          )
        ), Pe("default", { hide: $ }, a) || e.body) {
          const ge = h(
            it(e) ? "b-link" : "div",
            {
              class: ["toast-body", e.bodyClass],
              onClick: it(e) ? { click: j } : {}
            },
            Pe("default", { hide: $ }, a) || e.body
          );
          Z.push(ge);
        }
        return h(
          "div",
          {
            class: ["toast", e.toastClass, g.value],
            tabindex: "0"
          },
          Z
        );
      };
      return h(
        "div",
        {
          class: ["b-toast"],
          id: e.id,
          role: C.value ? null : l.value ? "status" : "alert",
          "aria-live": C.value ? null : l.value ? "polite" : "assertive",
          "aria-atomic": C.value ? null : "true",
          onmouseenter: I,
          onmouseleave: V
        },
        [
          h(
            lt,
            {
              noFade: d.value,
              onAfterEnter: b,
              onBeforeEnter: O,
              onAfterLeave: H,
              onBeforeLeave: x
            },
            () => [p.value ? q() : ""]
          )
        ]
      );
    };
  }
});
var Jt = defineComponent({
  __name: "BToaster",
  props: {
    position: { default: "top-right" },
    instance: null
  },
  setup(e) {
    const t = e, a = {
      "top-left": "top-0 start-0",
      "top-center": "top-0 start-50 translate-middle-x",
      "top-right": "top-0 end-0",
      "middle-left": "top-50 start-0 translate-middle-y",
      "middle-center": "top-50 start-50 translate-middle",
      "middle-right": "top-50 end-0 translate-middle-y",
      "bottom-left": "bottom-0 start-0",
      "bottom-center": "bottom-0 start-50 translate-middle-x",
      "bottom-right": "bottom-0 end-0"
    }, l = computed(() => a[t.position]), n = (r) => {
      var d;
      (d = t.instance) == null || d.remove(r);
    };
    return (r, d) => {
      var c;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([[unref(l)], "b-toaster position-fixed p-3"]),
        style: { "z-index": "11" }
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList((c = e.instance) == null ? void 0 : c.toasts(e.position).value, (v) => (openBlock(), createBlock(un, {
          id: v.options.id,
          key: v.options.id,
          modelValue: v.options.value,
          "onUpdate:modelValue": (m) => v.options.value = m,
          "auto-hide": v.options.autoHide,
          delay: v.options.delay,
          "no-close-button": v.options.noCloseButton,
          title: v.content.title,
          body: v.content.body,
          component: v.content.body,
          variant: v.options.variant,
          onDestroyed: n
        }, null, 8, ["id", "modelValue", "onUpdate:modelValue", "auto-hide", "delay", "no-close-button", "title", "body", "component", "variant"]))), 128))
      ], 2);
    };
  }
});
var hr = defineComponent({
  props: {
    gutterX: { type: String, default: null },
    gutterY: { type: String, default: null },
    fluid: { type: [Boolean, String], default: false },
    toast: { type: Object },
    position: { type: String, required: false }
  },
  setup(e, { slots: t, expose: a }) {
    const l = ref();
    let n;
    const r = computed(() => ({
      container: !e.fluid,
      ["container-fluid"]: typeof e.fluid == "boolean" && e.fluid,
      [`container-${e.fluid}`]: typeof e.fluid == "string",
      [`gx-${e.gutterX}`]: e.gutterX !== null,
      [`gy-${e.gutterY}`]: e.gutterY !== null
    }));
    return onMounted(() => {
      e.toast;
    }), e.toast && (n = rn({ container: l, root: e.toast.root }), a({})), () => {
      var c;
      const d = [];
      return n == null || n.containerPositions.value.forEach((v) => {
        d.push(h(Jt, { key: v, instance: n, position: v }));
      }), h("div", { class: [r.value, e.position], ref: l }, [
        ...d,
        (c = t.default) == null ? void 0 : c.call(t)
      ]);
    };
  },
  methods: {}
});
var yr = { class: "visually-hidden" };
var Br = ["aria-labelledby", "role"];
var dn = defineComponent({
  __name: "BDropdown",
  props: {
    id: null,
    menuClass: null,
    size: null,
    splitClass: null,
    splitVariant: null,
    text: null,
    toggleClass: null,
    autoClose: { type: [Boolean, String], default: true },
    block: { default: false },
    boundary: { default: "clippingParents" },
    dark: { default: false },
    disabled: { default: false },
    isNav: { default: false },
    dropup: { default: false },
    dropright: { default: false },
    dropleft: { default: false },
    noFlip: { default: false },
    offset: { default: 0 },
    popperOpts: { default: () => ({}) },
    right: { default: false },
    role: { default: "menu" },
    split: { default: false },
    splitButtonType: { default: "button" },
    splitHref: { default: void 0 },
    noCaret: { default: false },
    toggleText: { default: "Toggle dropdown" },
    variant: { default: "secondary" }
  },
  emits: ["show", "shown", "hide", "hidden", "click", "toggle"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = $e(toRef(l, "id"), "dropdown"), r = u(toRef(l, "block")), d = u(toRef(l, "dark")), c = u(toRef(l, "dropup")), v = u(toRef(l, "dropright")), m = u(toRef(l, "isNav")), C = u(toRef(l, "dropleft")), p = u(toRef(l, "right")), g = u(toRef(l, "split")), A = u(toRef(l, "noCaret")), w = ref(), B = ref(), S = ref(), h2 = computed(() => ({
      "d-grid": r.value,
      "d-flex": r.value && g.value
    })), $ = computed(() => [
      g.value ? l.splitClass : l.toggleClass,
      {
        "nav-link": m.value,
        "dropdown-toggle": !g.value,
        "dropdown-toggle-no-caret": A.value && !g.value,
        "w-100": g.value && r.value
      }
    ]), F = computed(() => [
      l.menuClass,
      {
        "dropdown-menu-dark": d.value,
        "dropdown-menu-end": p.value
      }
    ]), I = computed(() => ({
      "data-bs-toggle": g.value ? void 0 : "dropdown",
      "aria-expanded": g.value ? void 0 : false,
      ref: g.value ? void 0 : B,
      href: g.value ? l.splitHref : void 0
    })), V = computed(() => ({
      ref: g.value ? B : void 0
    })), _ = () => {
      var b;
      (b = S.value) == null || b.hide();
    }, O = (b) => {
      g.value && a("click", b);
    };
    return qe(w, "show.bs.dropdown", () => a("show")), qe(w, "shown.bs.dropdown", () => a("shown")), qe(w, "hide.bs.dropdown", () => a("hide")), qe(w, "hidden.bs.dropdown", () => a("hidden")), onMounted(() => {
      var b;
      S.value = new Dropdown((b = B.value) == null ? void 0 : b.$el, {
        autoClose: l.autoClose,
        boundary: l.boundary,
        offset: l.offset ? l.offset.toString() : "",
        reference: l.offset || g.value ? "parent" : "toggle",
        popperConfig: (x) => {
          const H = {
            placement: "bottom-start",
            modifiers: l.noFlip ? [
              {
                name: "flip",
                options: {
                  fallbackPlacements: []
                }
              }
            ] : []
          };
          return c.value ? H.placement = p.value ? "top-end" : "top-start" : v.value ? H.placement = "right-start" : C.value ? H.placement = "left-start" : p.value && (H.placement = "bottom-end"), jt(x, jt(H, l.popperOpts));
        }
      });
    }), t({
      hide: _
    }), (b, x) => (openBlock(), createElementBlock("div", {
      ref_key: "parent",
      ref: w,
      class: normalizeClass([unref(h2), "btn-group"])
    }, [
      createVNode(et, mergeProps({
        id: unref(n),
        variant: e.splitVariant || e.variant,
        size: e.size,
        class: unref($),
        disabled: e.disabled,
        type: e.splitButtonType
      }, unref(I), { onClick: O }), {
        default: withCtx(() => [
          renderSlot(b.$slots, "button-content", {}, () => [
            createTextVNode(toDisplayString(e.text), 1)
          ])
        ]),
        _: 3
      }, 16, ["id", "variant", "size", "class", "disabled", "type"]),
      unref(g) ? (openBlock(), createBlock(et, mergeProps({
        key: 0,
        variant: e.variant,
        size: e.size,
        disabled: e.disabled
      }, unref(V), {
        class: [e.toggleClass, "dropdown-toggle-split dropdown-toggle"],
        "data-bs-toggle": "dropdown",
        "aria-expanded": "false",
        onClick: x[0] || (x[0] = (H) => a("toggle"))
      }), {
        default: withCtx(() => [
          createBaseVNode("span", yr, [
            renderSlot(b.$slots, "toggle-text", {}, () => [
              createTextVNode(toDisplayString(e.toggleText), 1)
            ])
          ])
        ]),
        _: 3
      }, 16, ["variant", "size", "disabled", "class"])) : createCommentVNode("", true),
      createBaseVNode("ul", {
        class: normalizeClass(["dropdown-menu", unref(F)]),
        "aria-labelledby": unref(n),
        role: e.role
      }, [
        renderSlot(b.$slots, "default")
      ], 10, Br)
    ], 2));
  }
});
var $r = { role: "presentation" };
var kr = defineComponent({
  __name: "BDropdownDivider",
  props: {
    tag: { default: "hr" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("li", $r, [
      (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
        class: "dropdown-divider",
        role: "separator",
        "aria-orientation": "horizontal"
      }))
    ]));
  }
});
var Sr = {};
var Cr = { role: "presentation" };
var wr = { class: "px-4 py-3" };
function _r(e, t) {
  return openBlock(), createElementBlock("li", Cr, [
    createBaseVNode("form", wr, [
      renderSlot(e.$slots, "default")
    ])
  ]);
}
var Tr = Te(Sr, [["render", _r]]);
var Vr = { role: "presentation" };
var Ar = ["id", "aria-describedby"];
var Or = {
  inheritAttrs: false
};
var xr = defineComponent({
  ...Or,
  __name: "BDropdownGroup",
  props: {
    id: null,
    ariaDescribedby: null,
    header: null,
    headerClass: null,
    headerTag: { default: "header" },
    headerVariant: null
  },
  setup(e) {
    const t = e, a = computed(
      () => t.id ? `${t.id}_group_dd_header` : void 0
    ), l = computed(
      () => t.headerTag === "header" ? void 0 : "heading"
    ), n = computed(() => [
      t.headerClass,
      {
        [`text-${t.headerVariant}`]: t.headerVariant !== void 0
      }
    ]);
    return (r, d) => (openBlock(), createElementBlock("li", Vr, [
      (openBlock(), createBlock(resolveDynamicComponent(e.headerTag), {
        id: unref(a),
        class: normalizeClass(["dropdown-header", unref(n)]),
        role: unref(l)
      }, {
        default: withCtx(() => [
          renderSlot(r.$slots, "header", {}, () => [
            createTextVNode(toDisplayString(e.header), 1)
          ])
        ]),
        _: 3
      }, 8, ["id", "class", "role"])),
      createBaseVNode("ul", mergeProps({
        id: e.id,
        role: "group",
        class: "list-unstyled"
      }, r.$attrs, {
        "aria-describedby": e.ariaDescribedby || unref(a)
      }), [
        renderSlot(r.$slots, "default")
      ], 16, Ar)
    ]));
  }
});
var Pr = {};
var Ir = { class: "dropdown-header" };
function Fr(e, t) {
  return openBlock(), createElementBlock("li", null, [
    createBaseVNode("h6", Ir, [
      renderSlot(e.$slots, "default")
    ])
  ]);
}
var Er = Te(Pr, [["render", Fr]]);
var Lr = {
  inheritAttrs: false
};
var zr = defineComponent({
  ...Lr,
  __name: "BDropdownItem",
  props: {
    href: null,
    linkClass: null,
    active: { default: false },
    disabled: { default: false },
    rel: { default: void 0 },
    target: { default: "_self" },
    variant: null
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = u(toRef(a, "active")), n = u(toRef(a, "disabled")), r = useAttrs(), d = computed(() => [
      a.linkClass,
      {
        active: l.value,
        disabled: n.value,
        [`text-${a.variant}`]: a.variant !== void 0
      }
    ]), c = computed(
      () => a.href ? "a" : r.to ? Ve : "button"
    ), v = computed(() => ({
      disabled: n.value,
      "aria-current": l.value ? "true" : null,
      href: c.value === "a" ? a.href : null,
      rel: a.rel,
      type: c.value === "button" ? "button" : null,
      target: a.target,
      ...r.to ? { activeClass: "active", ...r } : {}
    })), m = (C) => t("click", C);
    return (C, p) => (openBlock(), createElementBlock("li", {
      role: "presentation",
      class: normalizeClass(C.$attrs.class)
    }, [
      (openBlock(), createBlock(resolveDynamicComponent(unref(c)), mergeProps({
        class: ["dropdown-item", unref(d)]
      }, unref(v), { onClick: m }), {
        default: withCtx(() => [
          renderSlot(C.$slots, "default")
        ]),
        _: 3
      }, 16, ["class"]))
    ], 2));
  }
});
var Nr = ["disabled"];
var Dr = {
  inheritAttrs: false
};
var Hr = defineComponent({
  ...Dr,
  __name: "BDropdownItemButton",
  props: {
    buttonClass: null,
    active: { default: false },
    activeClass: { default: "active" },
    disabled: { default: false },
    variant: null
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = u(toRef(a, "active")), n = u(toRef(a, "disabled")), r = computed(() => [
      a.buttonClass,
      {
        [a.activeClass]: l.value,
        disabled: n.value,
        [`text-${a.variant}`]: a.variant !== void 0
      }
    ]), d = (c) => t("click", c);
    return (c, v) => (openBlock(), createElementBlock("li", {
      role: "presentation",
      class: normalizeClass(c.$attrs.class)
    }, [
      createBaseVNode("button", {
        role: "menu",
        type: "button",
        class: normalizeClass(["dropdown-item", unref(r)]),
        disabled: unref(n),
        onClick: d
      }, [
        renderSlot(c.$slots, "default")
      ], 10, Nr)
    ], 2));
  }
});
var Mr = { role: "presentation" };
var Rr = { class: "px-4 py-1 mb-0 text-muted" };
var jr = defineComponent({
  __name: "BDropdownText",
  props: {
    text: { default: "" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("li", Mr, [
      createBaseVNode("p", Rr, [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ])
    ]));
  }
});
var qr = ["id", "novalidate", "onSubmit"];
var cn = defineComponent({
  __name: "BForm",
  props: {
    id: null,
    floating: { default: false },
    novalidate: { default: false },
    validated: { default: false }
  },
  emits: ["submit"],
  setup(e, { emit: t }) {
    const a = e, l = u(toRef(a, "floating")), n = u(toRef(a, "novalidate")), r = u(toRef(a, "validated")), d = computed(() => ({
      "form-floating": l.value,
      "was-validated": r.value
    })), c = (v) => t("submit", v);
    return (v, m) => (openBlock(), createElementBlock("form", {
      id: e.id,
      novalidate: unref(n),
      class: normalizeClass(unref(d)),
      onSubmit: withModifiers(c, ["prevent"])
    }, [
      renderSlot(v.$slots, "default")
    ], 42, qr));
  }
});
var Gr = { class: "form-floating" };
var Ur = ["for"];
var Wr = defineComponent({
  __name: "BFormFloatingLabel",
  props: {
    labelFor: null,
    label: null,
    text: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("div", Gr, [
      renderSlot(t.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(e.text), 1)
      ]),
      createBaseVNode("label", { for: e.labelFor }, [
        renderSlot(t.$slots, "label", {}, () => [
          createTextVNode(toDisplayString(e.label), 1)
        ])
      ], 8, Ur)
    ]));
  }
});
var Qt = defineComponent({
  __name: "BFormInvalidFeedback",
  props: {
    ariaLive: null,
    forceShow: { default: false },
    id: null,
    text: null,
    role: null,
    state: { default: void 0 },
    tag: { default: "div" },
    tooltip: { default: false }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "forceShow")), l = u(toRef(t, "state")), n = u(toRef(t, "tooltip")), r = computed(
      () => a.value === true || l.value === false
    ), d = computed(() => ({
      "d-block": r.value,
      "invalid-feedback": !n.value,
      "invalid-tooltip": n.value
    })), c = computed(() => ({
      id: t.id,
      role: t.role,
      "aria-live": t.ariaLive,
      "aria-atomic": t.ariaLive ? "true" : void 0
    }));
    return (v, m) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), mergeProps({ class: unref(d) }, unref(c)), {
      default: withCtx(() => [
        renderSlot(v.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 16, ["class"]));
  }
});
var gt = defineComponent({
  __name: "BFormRow",
  props: {
    tag: { default: "div" }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "row d-flex flex-wrap" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }));
  }
});
var Yt = defineComponent({
  __name: "BFormText",
  props: {
    id: null,
    inline: { default: false },
    tag: { default: "small" },
    text: null,
    textVariant: { default: "muted" }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "inline")), l = computed(() => [
      [`text-${t.textVariant}`],
      {
        "form-text": !a.value
      }
    ]);
    return (n, r) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      class: normalizeClass(unref(l))
    }, {
      default: withCtx(() => [
        renderSlot(n.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var Zt = defineComponent({
  __name: "BFormValidFeedback",
  props: {
    ariaLive: null,
    forceShow: { default: false },
    id: null,
    role: null,
    text: null,
    state: { default: void 0 },
    tag: { default: "div" },
    tooltip: { default: false }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "forceShow")), l = u(toRef(t, "state")), n = u(toRef(t, "tooltip")), r = computed(
      () => a.value === true || l.value === true
    ), d = computed(() => ({
      "d-block": r.value,
      "valid-feedback": !n.value,
      "valid-tooltip": n.value
    })), c = computed(() => t.ariaLive ? "true" : void 0);
    return (v, m) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      role: e.role,
      "aria-live": e.ariaLive,
      "aria-atomic": unref(c),
      class: normalizeClass(unref(d))
    }, {
      default: withCtx(() => [
        renderSlot(v.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }, 8, ["id", "role", "aria-live", "aria-atomic", "class"]));
  }
});
var Kr = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "aria-required", "value", "indeterminate"];
var Xr = ["for"];
var Jr = {
  inheritAttrs: false
};
var fn = defineComponent({
  ...Jr,
  __name: "BFormCheckbox",
  props: {
    ariaLabel: null,
    ariaLabelledBy: null,
    form: null,
    indeterminate: null,
    name: null,
    id: { default: void 0 },
    autofocus: { default: false },
    plain: { default: false },
    button: { default: false },
    switch: { default: false },
    disabled: { default: false },
    buttonVariant: { default: "secondary" },
    inline: { default: false },
    required: { default: void 0 },
    size: { default: "md" },
    state: { default: void 0 },
    uncheckedValue: { type: [Array, Set, Boolean, String, Object, Number], default: false },
    value: { type: [Array, Set, Boolean, String, Object, Number], default: true },
    modelValue: { type: [Array, Set, Boolean, String, Object, Number], default: void 0 }
  },
  emits: ["update:modelValue", "input", "change"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = $e(toRef(a, "id"), "form-check"), r = u(toRef(a, "indeterminate")), d = u(toRef(a, "autofocus")), c = u(toRef(a, "plain")), v = u(toRef(a, "button")), m = u(toRef(a, "switch")), C = u(toRef(a, "disabled")), p = u(toRef(a, "inline")), g = u(toRef(a, "required")), A = u(toRef(a, "state")), w = ref(null), B = ref(false), S = computed(() => !we(l.default)), h2 = computed({
      get: () => a.uncheckedValue ? Array.isArray(a.modelValue) ? a.modelValue.indexOf(a.value) > -1 : a.modelValue === a.value : a.modelValue,
      set: (O) => {
        let b = O;
        Array.isArray(a.modelValue) ? a.uncheckedValue && (b = a.modelValue, O ? (b.indexOf(a.uncheckedValue) > -1 && b.splice(b.indexOf(a.uncheckedValue), 1), b.push(a.value)) : (b.indexOf(a.value) > -1 && b.splice(b.indexOf(a.value), 1), b.push(a.uncheckedValue))) : b = O ? a.value : a.uncheckedValue, t("input", b), t("update:modelValue", b), t("change", b);
      }
    }), $ = computed(() => Array.isArray(a.modelValue) ? a.modelValue.indexOf(a.value) > -1 : JSON.stringify(a.modelValue) === JSON.stringify(a.value)), F = reactive({
      plain: toRef(c, "value"),
      button: toRef(v, "value"),
      inline: toRef(p, "value"),
      switch: toRef(m, "value"),
      size: toRef(a, "size"),
      state: toRef(A, "value"),
      buttonVariant: toRef(a, "buttonVariant")
    }), I = Ml(F), V = Rl(F), _ = jl(F);
    return onMounted(() => {
      d.value && w.value.focus();
    }), (O, b) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(unref(I))
    }, [
      withDirectives(createBaseVNode("input", mergeProps({ id: unref(n) }, O.$attrs, {
        ref_key: "input",
        ref: w,
        "onUpdate:modelValue": b[0] || (b[0] = (x) => isRef(h2) ? h2.value = x : null),
        class: unref(V),
        type: "checkbox",
        disabled: unref(C),
        required: !!e.name && !!unref(g),
        name: e.name,
        form: e.form,
        "aria-label": e.ariaLabel,
        "aria-labelledby": e.ariaLabelledBy,
        "aria-required": e.name && unref(g) ? "true" : void 0,
        value: e.value,
        indeterminate: unref(r),
        onFocus: b[1] || (b[1] = (x) => B.value = true),
        onBlur: b[2] || (b[2] = (x) => B.value = false)
      }), null, 16, Kr), [
        [vModelCheckbox, unref(h2)]
      ]),
      unref(S) || !unref(c) ? (openBlock(), createElementBlock("label", {
        key: 0,
        for: unref(n),
        class: normalizeClass([unref(_), { active: unref($), focus: B.value }])
      }, [
        renderSlot(O.$slots, "default")
      ], 10, Xr)) : createCommentVNode("", true)
    ], 2));
  }
});
var Qr = ["id"];
var Yr = ["innerHTML"];
var Zr = ["textContent"];
var ei = defineComponent({
  __name: "BFormCheckboxGroup",
  props: {
    id: null,
    form: null,
    modelValue: { default: () => [] },
    ariaInvalid: { default: void 0 },
    autofocus: { default: false },
    buttonVariant: { default: "secondary" },
    buttons: { default: false },
    disabled: { default: false },
    disabledField: { default: "disabled" },
    htmlField: { default: "html" },
    name: null,
    options: { default: () => [] },
    plain: { default: false },
    required: { default: false },
    size: null,
    stacked: { default: false },
    state: { default: void 0 },
    switches: { default: false },
    textField: { default: "text" },
    validated: { default: false },
    valueField: { default: "value" }
  },
  emits: ["input", "update:modelValue", "change"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = "BFormCheckbox", r = $e(toRef(a, "id"), "checkbox"), d = $e(toRef(a, "name"), "checkbox");
    u(toRef(a, "autofocus"));
    const c = u(toRef(a, "buttons")), v = u(toRef(a, "disabled"));
    u(toRef(a, "plain"));
    const m = u(toRef(a, "required")), C = u(toRef(a, "stacked")), p = u(toRef(a, "state")), g = u(toRef(a, "switches")), A = u(toRef(a, "validated")), w = computed({
      get: () => a.modelValue,
      set: (F) => {
        if (JSON.stringify(F) === JSON.stringify(a.modelValue))
          return;
        const I = a.options.filter(
          (V) => F.map((_) => JSON.stringify(_)).includes(JSON.stringify(typeof V == "string" ? V : V[a.valueField]))
        ).map((V) => typeof V == "string" ? V : V[a.valueField]);
        t("input", I), t("update:modelValue", I), t("change", I);
      }
    }), B = computed(
      () => (l.first ? wt(l.first(), n, v.value) : []).concat(a.options.map((F) => Ul(F, a))).concat(l.default ? wt(l.default(), n, v.value) : []).map((F, I) => Wl(F, I, a, d, r)).map((F) => ({
        ...F,
        props: {
          switch: g.value,
          ...F.props
        }
      }))
    ), S = reactive({
      required: toRef(m, "value"),
      ariaInvalid: toRef(a, "ariaInvalid"),
      state: toRef(p, "value"),
      validated: toRef(A, "value"),
      buttons: toRef(c, "value"),
      stacked: toRef(C, "value"),
      size: toRef(a, "size")
    }), h2 = ql(S), $ = Gl(S);
    return (F, I) => (openBlock(), createElementBlock("div", mergeProps(unref(h2), {
      id: unref(r),
      role: "group",
      class: [unref($), "bv-no-focus-ring"],
      tabindex: "-1"
    }), [
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(B), (V, _) => (openBlock(), createBlock(fn, mergeProps({
        key: _,
        modelValue: unref(w),
        "onUpdate:modelValue": I[0] || (I[0] = (O) => isRef(w) ? w.value = O : null)
      }, V.props), {
        default: withCtx(() => [
          V.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: V.html
          }, null, 8, Yr)) : (openBlock(), createElementBlock("span", {
            key: 1,
            textContent: toDisplayString(V.text)
          }, null, 8, Zr))
        ]),
        _: 2
      }, 1040, ["modelValue"]))), 128))
    ], 16, Qr));
  }
});
var vn = ["input", "select", "textarea"];
var ti = vn.map((e) => `${e}:not([disabled])`).join();
var ai = [...vn, "a", "button", "label"];
var li = "label";
var ni = "invalid-feedback";
var oi = "valid-feedback";
var si = "description";
var ri = "default";
var ii = defineComponent({
  components: { BCol: st, BFormInvalidFeedback: Qt, BFormRow: gt, BFormText: Yt, BFormValidFeedback: Zt },
  props: {
    contentCols: { type: [Boolean, String, Number], required: false },
    contentColsLg: { type: [Boolean, String, Number], required: false },
    contentColsMd: { type: [Boolean, String, Number], required: false },
    contentColsSm: { type: [Boolean, String, Number], required: false },
    contentColsXl: { type: [Boolean, String, Number], required: false },
    description: { type: [String], required: false },
    disabled: { type: [Boolean, String], default: false },
    feedbackAriaLive: { type: String, default: "assertive" },
    id: { type: String, required: false },
    invalidFeedback: { type: String, required: false },
    label: { type: String, required: false },
    labelAlign: { type: [Boolean, String, Number], required: false },
    labelAlignLg: { type: [Boolean, String, Number], required: false },
    labelAlignMd: { type: [Boolean, String, Number], required: false },
    labelAlignSm: { type: [Boolean, String, Number], required: false },
    labelAlignXl: { type: [Boolean, String, Number], required: false },
    labelClass: { type: [Array, Object, String], required: false },
    labelCols: { type: [Boolean, String, Number], required: false },
    labelColsLg: { type: [Boolean, String, Number], required: false },
    labelColsMd: { type: [Boolean, String, Number], required: false },
    labelColsSm: { type: [Boolean, String, Number], required: false },
    labelColsXl: { type: [Boolean, String, Number], required: false },
    labelFor: { type: String, required: false },
    labelSize: { type: String, required: false },
    labelSrOnly: { type: [Boolean, String], default: false },
    state: { type: [Boolean, String], default: null },
    tooltip: { type: [Boolean, String], default: false },
    validFeedback: { type: String, required: false },
    validated: { type: [Boolean, String], default: false },
    floating: { type: [Boolean, String], default: false }
  },
  setup(e, { attrs: t }) {
    const a = u(toRef(e, "disabled")), l = u(toRef(e, "labelSrOnly")), n = u(toRef(e, "state")), r = u(toRef(e, "tooltip")), d = u(toRef(e, "validated")), c = u(toRef(e, "floating")), v = null, m = ["xs", "sm", "md", "lg", "xl"], C = (_, O) => m.reduce((b, x) => {
      const H = ha(x === "xs" ? "" : x, `${O}Align`), j = _[H] || null;
      return j && (x === "xs" ? b.push(`text-${j}`) : b.push(`text-${x}-${j}`)), b;
    }, []), p = (_, O) => m.reduce((b, x) => {
      const H = ha(x === "xs" ? "" : x, `${O}Cols`);
      let j = _[H];
      return j = j === "" ? true : j || false, typeof j != "boolean" && j !== "auto" && (j = ot(j, 0), j = j > 0 ? j : false), j && (x === "xs" ? b.cols = j : b[x || (typeof j == "boolean" ? "col" : "cols")] = j), b;
    }, {}), g = ref(), A = (_, O = null) => {
      if (Bl && e.labelFor) {
        const b = $l(`#${Wn(e.labelFor)}`, g);
        if (b) {
          const x = "aria-describedby", H = (_ || "").split(pt), j = (O || "").split(pt), q = (ra(b, x) || "").split(pt).filter((K) => !j.includes(K)).concat(H).filter((K, oe, Z) => Z.indexOf(K) === oe).filter((K) => K).join(" ").trim();
          q ? ro(b, x, q) : io(b, x);
        }
      }
    }, w = computed(() => p(e, "content")), B = computed(() => C(e, "label")), S = computed(() => p(e, "label")), h2 = computed(
      () => Object.keys(w.value).length > 0 || Object.keys(S.value).length > 0
    ), $ = computed(
      () => typeof n.value == "boolean" ? n.value : null
    ), F = computed(() => {
      const _ = $.value;
      return _ === true ? "is-valid" : _ === false ? "is-invalid" : null;
    }), I = computed(
      () => xt(t.ariaInvalid, n.value)
    );
    return watch(
      () => v,
      (_, O) => {
        _ !== O && A(_, O);
      }
    ), onMounted(() => {
      nextTick(() => {
        A(v);
      });
    }), {
      disabledBoolean: a,
      labelSrOnlyBoolean: l,
      stateBoolean: n,
      tooltipBoolean: r,
      validatedBoolean: d,
      floatingBoolean: c,
      ariaDescribedby: v,
      computedAriaInvalid: I,
      contentColProps: w,
      isHorizontal: h2,
      labelAlignClasses: B,
      labelColProps: S,
      onLegendClick: (_) => {
        if (e.labelFor)
          return;
        const { target: O } = _, b = O ? O.tagName : "";
        if (ai.indexOf(b) !== -1)
          return;
        const x = oo(ti, g).filter(no);
        x.length === 1 && ao(x[0]);
      },
      stateClass: F
    };
  },
  render() {
    const e = this.$props, t = this.$slots, a = $e(), l = !e.labelFor;
    let n = null;
    const r = Pe(li, {}, t) || e.label, d = r ? Re("_BV_label_") : null;
    if (r || this.isHorizontal) {
      const I = l ? "legend" : "label";
      if (this.labelSrOnlyBoolean)
        r && (n = h(
          I,
          {
            class: "visually-hidden",
            id: d,
            for: e.labelFor || null
          },
          r
        )), this.isHorizontal ? n = h(st, this.labelColProps, { default: () => n }) : n = h("div", {}, [n]);
      else {
        const V = {
          onClick: l ? this.onLegendClick : null,
          ...this.isHorizontal ? this.labelColProps : {},
          tag: this.isHorizontal ? I : null,
          id: d,
          for: e.labelFor || null,
          tabIndex: l ? "-1" : null,
          class: [
            this.isHorizontal ? "col-form-label" : "form-label",
            {
              "bv-no-focus-ring": l,
              "col-form-label": this.isHorizontal || l,
              "pt-0": !this.isHorizontal && l,
              "d-block": !this.isHorizontal && !l,
              [`col-form-label-${e.labelSize}`]: !!e.labelSize
            },
            this.labelAlignClasses,
            e.labelClass
          ]
        };
        this.isHorizontal ? n = h(st, V, { default: () => r }) : n = h(I, V, r);
      }
    }
    let c = null;
    const v = Pe(ni, {}, t) || this.invalidFeedback, m = v ? Re("_BV_feedback_invalid_") : void 0;
    v && (c = h(
      Qt,
      {
        ariaLive: e.feedbackAriaLive,
        id: m,
        state: this.stateBoolean,
        tooltip: this.tooltipBoolean
      },
      { default: () => v }
    ));
    let C = null;
    const p = Pe(oi, {}, t) || this.validFeedback, g = p ? Re("_BV_feedback_valid_") : void 0;
    p && (C = h(
      Zt,
      {
        ariaLive: e.feedbackAriaLive,
        id: g,
        state: this.stateBoolean,
        tooltip: this.tooltipBoolean
      },
      { default: () => p }
    ));
    let A = null;
    const w = Pe(si, {}, t) || this.description, B = w ? Re("_BV_description_") : void 0;
    w && (A = h(
      Yt,
      {
        id: B
      },
      { default: () => w }
    ));
    const S = this.ariaDescribedby = [
      B,
      this.stateBoolean === false ? m : null,
      this.stateBoolean === true ? g : null
    ].filter((I) => I).join(" ") || null, h2 = [
      Pe(ri, { ariaDescribedby: S, descriptionId: B, id: a, labelId: d }, t) || "",
      c,
      C,
      A
    ];
    !this.isHorizontal && this.floatingBoolean && h2.push(n);
    let $ = h(
      "div",
      {
        ref: "content",
        class: [
          {
            "form-floating": !this.isHorizontal && this.floatingBoolean
          }
        ]
      },
      h2
    );
    this.isHorizontal && ($ = h(st, { ref: "content", ...this.contentColProps }, { default: () => h2 }));
    const F = {
      class: [
        "mb-3",
        this.stateClass,
        {
          "was-validated": this.validatedBoolean
        }
      ],
      id: $e(toRef(e, "id")).value,
      disabled: l ? this.disabledBoolean : null,
      role: l ? null : "group",
      "aria-invalid": this.computedAriaInvalid,
      "aria-labelledby": l && this.isHorizontal ? d : null
    };
    return this.isHorizontal && !l ? h(gt, F, { default: () => [n, $] }) : h(
      l ? "fieldset" : "div",
      F,
      this.isHorizontal && l ? [h(gt, null, { default: () => [n, $] })] : this.isHorizontal || !this.floatingBoolean ? [n, $] : [$]
    );
  }
});
var Ra = [
  "text",
  "number",
  "email",
  "password",
  "search",
  "url",
  "tel",
  "date",
  "time",
  "range",
  "color"
];
var ui = defineComponent({
  props: {
    ...Kl,
    max: { type: [String, Number], required: false },
    min: { type: [String, Number], required: false },
    step: { type: [String, Number], required: false },
    type: {
      type: String,
      default: "text",
      validator: (e) => Ra.includes(e)
    }
  },
  emits: ["update:modelValue", "change", "blur", "input"],
  setup(e, { emit: t }) {
    const { input: a, computedId: l, computedAriaInvalid: n, onInput: r, onChange: d, onBlur: c, focus: v, blur: m } = Xl(e, t), C = ref(false), p = computed(() => {
      const w = e.type === "range", B = e.type === "color";
      return {
        "form-control-highlighted": C.value,
        "form-range": w,
        "form-control": B || !e.plaintext && !w,
        "form-control-color": B,
        "form-control-plaintext": e.plaintext && !w && !B,
        [`form-control-${e.size}`]: !!e.size,
        "is-valid": e.state === true,
        "is-invalid": e.state === false
      };
    }), g = computed(
      () => Ra.includes(e.type) ? e.type : "text"
    );
    return {
      computedClasses: p,
      localType: g,
      input: a,
      computedId: l,
      computedAriaInvalid: n,
      onInput: r,
      onChange: d,
      onBlur: c,
      focus: v,
      blur: m,
      highlight: () => {
        C.value !== true && (C.value = true, setTimeout(() => {
          C.value = false;
        }, 2e3));
      }
    };
  }
});
var di = ["id", "name", "form", "type", "disabled", "placeholder", "required", "autocomplete", "readonly", "min", "max", "step", "list", "aria-required", "aria-invalid"];
function ci(e, t, a, l, n, r) {
  return openBlock(), createElementBlock("input", mergeProps({
    id: e.computedId,
    ref: "input",
    class: e.computedClasses,
    name: e.name || void 0,
    form: e.form || void 0,
    type: e.localType,
    disabled: e.disabled,
    placeholder: e.placeholder,
    required: e.required,
    autocomplete: e.autocomplete || void 0,
    readonly: e.readonly || e.plaintext,
    min: e.min,
    max: e.max,
    step: e.step,
    list: e.type !== "password" ? e.list : void 0,
    "aria-required": e.required ? "true" : void 0,
    "aria-invalid": e.computedAriaInvalid
  }, e.$attrs, {
    onInput: t[0] || (t[0] = (d) => e.onInput(d)),
    onChange: t[1] || (t[1] = (d) => e.onChange(d)),
    onBlur: t[2] || (t[2] = (d) => e.onBlur(d))
  }), null, 16, di);
}
var fi = Te(ui, [["render", ci]]);
var vi = ["id", "disabled", "required", "name", "form", "aria-label", "aria-labelledby", "value", "aria-required"];
var mi = ["for"];
var mn = defineComponent({
  __name: "BFormRadio",
  props: {
    ariaLabel: null,
    ariaLabelledby: null,
    form: null,
    id: null,
    name: null,
    size: null,
    autofocus: { default: false },
    modelValue: { type: [Boolean, String, Array, Object, Number], default: void 0 },
    plain: { default: false },
    button: { default: false },
    switch: { default: false },
    disabled: { default: false },
    buttonVariant: { default: "secondary" },
    inline: { default: false },
    required: { default: false },
    state: { default: void 0 },
    value: { type: [String, Boolean, Object, Number], default: true }
  },
  emits: ["input", "change", "update:modelValue"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = $e(toRef(a, "id"), "form-check"), r = u(toRef(a, "autofocus")), d = u(toRef(a, "plain")), c = u(toRef(a, "button")), v = u(toRef(a, "switch")), m = u(toRef(a, "disabled")), C = u(toRef(a, "inline")), p = u(toRef(a, "required")), g = u(toRef(a, "state")), A = ref(null), w = ref(false), B = computed({
      get: () => Array.isArray(a.modelValue) ? a.modelValue[0] : a.modelValue,
      set: (_) => {
        const O = _ ? a.value : false, b = Array.isArray(a.modelValue) ? [O] : O;
        t("input", b), t("change", b), t("update:modelValue", b);
      }
    }), S = computed(() => Array.isArray(a.modelValue) ? (a.modelValue || []).find((_) => _ === a.value) : JSON.stringify(a.modelValue) === JSON.stringify(a.value)), h2 = computed(() => !we(l.default)), $ = reactive({
      plain: toRef(d, "value"),
      button: toRef(c, "value"),
      inline: toRef(C, "value"),
      switch: toRef(v, "value"),
      size: toRef(a, "size"),
      state: toRef(g, "value"),
      buttonVariant: toRef(a, "buttonVariant")
    }), F = Ml($), I = Rl($), V = jl($);
    return onMounted(() => {
      r.value && A.value !== null && A.value.focus();
    }), (_, O) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(unref(F))
    }, [
      withDirectives(createBaseVNode("input", mergeProps({ id: unref(n) }, _.$attrs, {
        ref_key: "input",
        ref: A,
        "onUpdate:modelValue": O[0] || (O[0] = (b) => isRef(B) ? B.value = b : null),
        class: unref(I),
        type: "radio",
        disabled: unref(m),
        required: !!e.name && unref(p),
        name: e.name,
        form: e.form,
        "aria-label": e.ariaLabel,
        "aria-labelledby": e.ariaLabelledby,
        value: e.value,
        "aria-required": !!e.name && unref(p) ? true : void 0,
        onFocus: O[1] || (O[1] = (b) => w.value = true),
        onBlur: O[2] || (O[2] = (b) => w.value = false)
      }), null, 16, vi), [
        [vModelRadio, unref(B)]
      ]),
      unref(h2) || unref(d) === false ? (openBlock(), createElementBlock("label", {
        key: 0,
        for: unref(n),
        class: normalizeClass([unref(V), { active: unref(S), focus: w.value }])
      }, [
        renderSlot(_.$slots, "default")
      ], 10, mi)) : createCommentVNode("", true)
    ], 2));
  }
});
var pi = ["id"];
var bi = ["innerHTML"];
var gi = ["textContent"];
var hi = defineComponent({
  __name: "BFormRadioGroup",
  props: {
    size: null,
    form: null,
    id: null,
    name: null,
    modelValue: { type: [String, Boolean, Array, Object, Number], default: "" },
    ariaInvalid: { default: void 0 },
    autofocus: { default: false },
    buttonVariant: { default: "secondary" },
    buttons: { default: false },
    disabled: { default: false },
    disabledField: { default: "disabled" },
    htmlField: { default: "html" },
    options: { default: () => [] },
    plain: { default: false },
    required: { default: false },
    stacked: { default: false },
    state: { default: void 0 },
    textField: { default: "text" },
    validated: { default: false },
    valueField: { default: "value" }
  },
  emits: ["input", "update:modelValue", "change"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = "BFormRadio", r = $e(toRef(a, "id"), "radio"), d = $e(toRef(a, "name"), "checkbox");
    u(toRef(a, "autofocus"));
    const c = u(toRef(a, "buttons")), v = u(toRef(a, "disabled"));
    u(toRef(a, "plain"));
    const m = u(toRef(a, "required")), C = u(toRef(a, "stacked")), p = u(toRef(a, "state")), g = u(toRef(a, "validated")), A = computed({
      get: () => a.modelValue,
      set: ($) => {
        t("input", $), t("update:modelValue", $), t("change", $);
      }
    }), w = computed(
      () => (l.first ? wt(l.first(), n, v.value) : []).concat(a.options.map(($) => Ul($, a))).concat(l.default ? wt(l.default(), n, v.value) : []).map(($, F) => Wl($, F, a, d, r)).map(($) => ({
        ...$
      }))
    ), B = reactive({
      required: toRef(m, "value"),
      ariaInvalid: toRef(a, "ariaInvalid"),
      state: toRef(p, "value"),
      validated: toRef(g, "value"),
      buttons: toRef(c, "value"),
      stacked: toRef(C, "value"),
      size: toRef(a, "size")
    }), S = ql(B), h2 = Gl(B);
    return ($, F) => (openBlock(), createElementBlock("div", mergeProps(unref(S), {
      id: unref(r),
      role: "radiogroup",
      class: [unref(h2), "bv-no-focus-ring"],
      tabindex: "-1"
    }), [
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(w), (I, V) => (openBlock(), createBlock(mn, mergeProps({
        key: V,
        modelValue: unref(A),
        "onUpdate:modelValue": F[0] || (F[0] = (_) => isRef(A) ? A.value = _ : null)
      }, I.props), {
        default: withCtx(() => [
          I.html ? (openBlock(), createElementBlock("span", {
            key: 0,
            innerHTML: I.html
          }, null, 8, bi)) : (openBlock(), createElementBlock("span", {
            key: 1,
            textContent: toDisplayString(I.text)
          }, null, 8, gi))
        ]),
        _: 2
      }, 1040, ["modelValue"]))), 128))
    ], 16, pi));
  }
});
var yi = ["value", "disabled"];
var fa = defineComponent({
  __name: "BFormSelectOption",
  props: {
    value: null,
    disabled: { default: false }
  },
  setup(e) {
    const a = u(toRef(e, "disabled"));
    return (l, n) => (openBlock(), createElementBlock("option", {
      value: e.value,
      disabled: unref(a)
    }, [
      renderSlot(l.$slots, "default")
    ], 8, yi));
  }
});
var Bi = ["label"];
var pn = defineComponent({
  __name: "BFormSelectOptionGroup",
  props: {
    label: null,
    disabledField: { default: "disabled" },
    htmlField: { default: "html" },
    options: { default: () => [] },
    textField: { default: "text" },
    valueField: { default: "value" }
  },
  setup(e) {
    const t = e, a = computed(
      () => ua(t.options, "BFormSelectOptionGroup", t)
    );
    return (l, n) => (openBlock(), createElementBlock("optgroup", { label: e.label }, [
      renderSlot(l.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(a), (r, d) => (openBlock(), createBlock(fa, mergeProps({
        key: d,
        value: r.value,
        disabled: r.disabled
      }, l.$attrs, {
        innerHTML: r.html || r.text
      }), null, 16, ["value", "disabled", "innerHTML"]))), 128)),
      renderSlot(l.$slots, "default")
    ], 8, Bi));
  }
});
var $i = ["id", "name", "form", "multiple", "size", "disabled", "required", "aria-required", "aria-invalid"];
var ki = defineComponent({
  __name: "BFormSelect",
  props: {
    ariaInvalid: { default: void 0 },
    autofocus: { default: false },
    disabled: { default: false },
    disabledField: { default: "disabled" },
    form: null,
    htmlField: { default: "html" },
    id: null,
    labelField: { default: "label" },
    multiple: { default: false },
    name: null,
    options: { default: () => [] },
    optionsField: { default: "options" },
    plain: { default: false },
    required: { default: false },
    selectSize: { default: 0 },
    size: null,
    state: { default: void 0 },
    textField: { default: "text" },
    valueField: { default: "value" },
    modelValue: { default: "" }
  },
  emits: ["input", "update:modelValue", "change"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = $e(toRef(l, "id"), "input"), r = u(toRef(l, "autofocus")), d = u(toRef(l, "disabled")), c = u(toRef(l, "multiple")), v = u(toRef(l, "plain")), m = u(toRef(l, "required")), C = u(toRef(l, "state")), p = ref(), g = computed(() => ({
      "form-control": v.value,
      [`form-control-${l.size}`]: l.size && v.value,
      "form-select": !v.value,
      [`form-select-${l.size}`]: l.size && !v.value,
      "is-valid": C.value === true,
      "is-invalid": C.value === false
    })), A = computed(() => {
      if (l.selectSize || v.value)
        return l.selectSize;
    }), w = computed(
      () => xt(l.ariaInvalid, C.value)
    ), B = computed(
      () => ua(l.options, "BFormSelect", l)
    ), S = computed({
      get() {
        return l.modelValue;
      },
      set(I) {
        a("change", I), a("update:modelValue", I), a("input", I);
      }
    }), h2 = () => {
      var I;
      d.value || (I = p.value) == null || I.focus();
    }, $ = () => {
      var I;
      d.value || (I = p.value) == null || I.blur();
    }, F = () => {
      var I;
      r.value && ((I = p.value) == null || I.focus());
    };
    return onMounted(() => {
      nextTick(() => {
        F();
      });
    }), onActivated(() => {
      nextTick(() => {
        F();
      });
    }), t({
      blur: $,
      focus: h2
    }), (I, V) => withDirectives((openBlock(), createElementBlock("select", mergeProps({
      id: unref(n),
      ref_key: "input",
      ref: p
    }, I.$attrs, {
      "onUpdate:modelValue": V[0] || (V[0] = (_) => isRef(S) ? S.value = _ : null),
      class: unref(g),
      name: e.name,
      form: e.form || void 0,
      multiple: unref(c) || void 0,
      size: unref(A),
      disabled: unref(d),
      required: unref(m),
      "aria-required": unref(m) ? true : void 0,
      "aria-invalid": unref(w)
    }), [
      renderSlot(I.$slots, "first"),
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(B), (_, O) => (openBlock(), createElementBlock(Fragment, { key: O }, [
        Array.isArray(_.options) ? (openBlock(), createBlock(pn, {
          key: 0,
          label: _.label,
          options: _.options
        }, null, 8, ["label", "options"])) : (openBlock(), createBlock(fa, {
          key: 1,
          value: _.value,
          disabled: _.disabled,
          innerHTML: _.html || _.text
        }, null, 8, ["value", "disabled", "innerHTML"]))
      ], 64))), 128)),
      renderSlot(I.$slots, "default")
    ], 16, $i)), [
      [vModelSelect, unref(S)]
    ]);
  }
});
var Si = ["id"];
var bn = defineComponent({
  __name: "BFormTag",
  props: {
    id: null,
    title: null,
    disabled: { default: false },
    noRemove: { default: false },
    pill: { default: false },
    removeLabel: { default: "Remove tag" },
    tag: { default: "span" },
    variant: { default: "secondary" }
  },
  emits: ["remove"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = $e(toRef(a, "id")), r = u(toRef(a, "disabled")), d = u(toRef(a, "noRemove")), c = u(toRef(a, "pill")), v = computed(
      () => {
        var p, g, A;
        return (A = ((g = (p = l.default) == null ? void 0 : p.call(l)[0].children) != null ? g : "").toString() || a.title) != null ? A : "";
      }
    ), m = computed(() => `${n.value}taglabel__`), C = computed(() => [
      `bg-${a.variant}`,
      {
        "text-dark": ["warning", "info", "light"].includes(a.variant),
        "rounded-pill": c.value,
        disabled: r.value
      }
    ]);
    return (p, g) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: unref(n),
      title: unref(v),
      class: normalizeClass(["badge b-form-tag d-inline-flex align-items-center mw-100", unref(C)]),
      "aria-labelledby": unref(m)
    }, {
      default: withCtx(() => [
        createBaseVNode("span", {
          id: unref(m),
          class: "b-form-tag-content flex-grow-1 text-truncate"
        }, [
          renderSlot(p.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(unref(v)), 1)
          ])
        ], 8, Si),
        !unref(r) && !unref(d) ? (openBlock(), createBlock(nt, {
          key: 0,
          "aria-keyshortcuts": "Delete",
          "aria-label": e.removeLabel,
          class: "b-form-tag-remove",
          white: !["warning", "info", "light"].includes(e.variant),
          "aria-describedby": unref(m),
          "aria-controls": e.id,
          onClick: g[0] || (g[0] = (A) => t("remove", unref(v)))
        }, null, 8, ["aria-label", "white", "aria-describedby", "aria-controls"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["id", "title", "class", "aria-labelledby"]));
  }
});
var Ci = ["id"];
var wi = ["id", "for", "aria-live"];
var _i = ["id", "aria-live"];
var Ti = ["id"];
var Vi = ["aria-controls"];
var Ai = {
  role: "group",
  class: "d-flex"
};
var Oi = ["id", "disabled", "value", "type", "placeholder", "form", "required"];
var xi = ["disabled"];
var Pi = {
  "aria-live": "polite",
  "aria-atomic": "true"
};
var Ii = {
  key: 0,
  class: "d-block invalid-feedback"
};
var Fi = {
  key: 1,
  class: "form-text text-muted"
};
var Ei = {
  key: 2,
  class: "form-text text-muted"
};
var Li = ["name", "value"];
var zi = defineComponent({
  __name: "BFormTags",
  props: {
    addButtonText: { default: "Add" },
    addButtonVariant: { default: "outline-secondary" },
    addOnChange: { default: false },
    autofocus: { default: false },
    disabled: { default: false },
    duplicateTagText: { default: "Duplicate tag(s)" },
    inputAttrs: null,
    inputClass: null,
    inputId: null,
    inputType: { default: "text" },
    invalidTagText: { default: "Invalid tag(s)" },
    form: null,
    limit: null,
    limitTagsText: { default: "Tag limit reached" },
    modelValue: { default: () => [] },
    name: null,
    noAddOnEnter: { default: false },
    noOuterFocus: { default: false },
    noTagRemove: { default: false },
    placeholder: { default: "Add tag..." },
    removeOnDelete: { default: false },
    required: { default: false },
    separator: null,
    state: { default: void 0 },
    size: null,
    tagClass: null,
    tagPills: { default: false },
    tagRemoveLabel: null,
    tagRemovedLabel: { default: "Tag removed" },
    tagValidator: { type: Function, default: () => true },
    tagVariant: { default: "secondary" }
  },
  emits: ["update:modelValue", "input", "tag-state", "focus", "focusin", "focusout", "blur"],
  setup(e, { emit: t }) {
    const a = e, l = $e(), n = u(toRef(a, "addOnChange")), r = u(toRef(a, "autofocus")), d = u(toRef(a, "disabled")), c = u(toRef(a, "noAddOnEnter")), v = u(toRef(a, "noOuterFocus")), m = u(toRef(a, "noTagRemove")), C = u(toRef(a, "removeOnDelete")), p = u(toRef(a, "required")), g = u(toRef(a, "state")), A = u(toRef(a, "tagPills")), w = ref(null), B = computed(() => a.inputId || `${l.value}input__`), S = ref(a.modelValue), h2 = ref(""), $ = ref(false), F = ref(false), I = ref(""), V = ref([]), _ = ref([]), O = ref([]), b = computed(() => ({
      [`form-control-${a.size}`]: a.size !== void 0,
      disabled: d.value,
      focus: F.value,
      "is-invalid": g.value === false,
      "is-valid": g.value === true
    })), x = computed(() => S.value.includes(h2.value)), H = computed(
      () => h2.value === "" ? false : !a.tagValidator(h2.value)
    ), j = computed(() => S.value.length === a.limit), q = computed(() => !H.value && !x.value), K = computed(() => ({
      addButtonText: a.addButtonText,
      addButtonVariant: a.addButtonVariant,
      addTag: re,
      disableAddButton: q.value,
      disabled: d.value,
      duplicateTagText: a.duplicateTagText,
      duplicateTags: O.value,
      form: a.form,
      inputAttrs: {
        ...a.inputAttrs,
        disabled: d.value,
        form: a.form,
        id: B,
        value: h2
      },
      inputHandlers: {
        input: pe,
        keydown: he,
        change: ye
      },
      inputId: B,
      inputType: a.inputType,
      invalidTagText: a.invalidTagText,
      invalidTags: _.value,
      isDuplicate: x.value,
      isInvalid: H.value,
      isLimitReached: j.value,
      limitTagsText: a.limitTagsText,
      limit: a.limit,
      noTagRemove: m.value,
      placeholder: a.placeholder,
      removeTag: E,
      required: p.value,
      separator: a.separator,
      size: a.size,
      state: g.value,
      tagClass: a.tagClass,
      tagPills: A.value,
      tagRemoveLabel: a.tagRemoveLabel,
      tagVariant: a.tagVariant,
      tags: S.value
    }));
    watch(
      () => a.modelValue,
      (N) => {
        S.value = N;
      }
    );
    const oe = () => {
      var N;
      r.value && ((N = w.value) == null || N.focus());
    }, Z = (N) => {
      if (d.value) {
        N.target.blur();
        return;
      }
      t("focusin", N);
    }, ge = (N) => {
      d.value || v.value || (F.value = true, t("focus", N));
    }, ae = (N) => {
      F.value = false, t("blur", N);
    }, pe = (N) => {
      var Q, be;
      const J = typeof N == "string" ? N : N.target.value;
      if ($.value = false, ((Q = a.separator) == null ? void 0 : Q.includes(J.charAt(0))) && J.length > 0) {
        w.value && (w.value.value = "");
        return;
      }
      if (h2.value = J, (be = a.separator) != null && be.includes(J.charAt(J.length - 1))) {
        re(J.slice(0, J.length - 1));
        return;
      }
      V.value = a.tagValidator(J) && !x.value ? [J] : [], _.value = a.tagValidator(J) ? [] : [J], O.value = x.value ? [J] : [], t("tag-state", V.value, _.value, O.value);
    }, ye = (N) => {
      n.value && (pe(N), x.value || re(h2.value));
    }, he = (N) => {
      if (N.key === "Enter" && !c.value) {
        re(h2.value);
        return;
      }
      (N.key === "Backspace" || N.key === "Delete") && C.value && h2.value === "" && $.value && S.value.length > 0 ? E(S.value[S.value.length - 1]) : $.value = true;
    }, re = (N) => {
      var Q;
      if (N = (N || h2.value).trim(), N === "" || x.value || !a.tagValidator(N) || a.limit && j.value)
        return;
      const J = [...a.modelValue, N];
      h2.value = "", $.value = true, t("update:modelValue", J), t("input", J), (Q = w.value) == null || Q.focus();
    }, E = (N) => {
      var Q;
      const J = S.value.indexOf((Q = N == null ? void 0 : N.toString()) != null ? Q : "");
      I.value = S.value.splice(J, 1).toString(), t("update:modelValue", S.value);
    };
    return onMounted(() => {
      oe(), a.modelValue.length > 0 && ($.value = true);
    }), onActivated(oe), (N, J) => (openBlock(), createElementBlock("div", {
      id: unref(l),
      class: normalizeClass(["b-form-tags form-control h-auto", unref(b)]),
      role: "group",
      tabindex: "-1",
      onFocusin: Z,
      onFocusout: J[1] || (J[1] = (Q) => t("focusout", Q))
    }, [
      createBaseVNode("output", {
        id: `${unref(l)}selected_tags__`,
        class: "visually-hidden",
        role: "status",
        for: unref(B),
        "aria-live": F.value ? "polite" : "off",
        "aria-atomic": "true",
        "aria-relevant": "additions text"
      }, toDisplayString(S.value.join(", ")), 9, wi),
      createBaseVNode("div", {
        id: `${unref(l)}removed_tags__`,
        role: "status",
        "aria-live": F.value ? "assertive" : "off",
        "aria-atomic": "true",
        class: "visually-hidden"
      }, " (" + toDisplayString(e.tagRemovedLabel) + ") " + toDisplayString(I.value), 9, _i),
      renderSlot(N.$slots, "default", normalizeProps(guardReactiveProps(unref(K))), () => [
        createBaseVNode("ul", {
          id: `${unref(l)}tag_list__`,
          class: "b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(S.value, (Q, be) => renderSlot(N.$slots, "tag", normalizeProps(mergeProps({ key: be }, { tag: Q, tagClass: e.tagClass, tagVariant: e.tagVariant, tagPills: unref(A), removeTag: E })), () => [
            createVNode(bn, {
              class: normalizeClass(e.tagClass),
              tag: "li",
              variant: e.tagVariant,
              pill: e.tagPills,
              onRemove: E
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(Q), 1)
              ]),
              _: 2
            }, 1032, ["class", "variant", "pill"])
          ])), 128)),
          createBaseVNode("li", {
            role: "none",
            "aria-live": "off",
            class: "b-from-tags-field flex-grow-1",
            "aria-controls": `${unref(l)}tag_list__`
          }, [
            createBaseVNode("div", Ai, [
              createBaseVNode("input", mergeProps({
                id: unref(B),
                ref_key: "input",
                ref: w,
                disabled: unref(d),
                value: h2.value,
                type: e.inputType,
                placeholder: e.placeholder,
                class: "b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0",
                style: { outline: "currentcolor none 0px", "min-width": "5rem" }
              }, e.inputAttrs, {
                form: e.form,
                required: unref(p),
                onInput: pe,
                onChange: ye,
                onKeydown: he,
                onFocus: ge,
                onBlur: ae
              }), null, 16, Oi),
              unref(q) ? (openBlock(), createElementBlock("button", {
                key: 0,
                type: "button",
                class: normalizeClass(["btn b-form-tags-button py-0", [
                  `btn-${e.addButtonVariant}`,
                  {
                    "disabled invisible": h2.value.length === 0
                  },
                  e.inputClass
                ]]),
                style: { "font-size": "90%" },
                disabled: unref(d) || h2.value.length === 0 || unref(j),
                onClick: J[0] || (J[0] = (Q) => re(h2.value))
              }, [
                renderSlot(N.$slots, "add-button-text", {}, () => [
                  createTextVNode(toDisplayString(e.addButtonText), 1)
                ])
              ], 10, xi)) : createCommentVNode("", true)
            ])
          ], 8, Vi)
        ], 8, Ti),
        createBaseVNode("div", Pi, [
          unref(H) ? (openBlock(), createElementBlock("div", Ii, toDisplayString(e.invalidTagText) + ": " + toDisplayString(h2.value), 1)) : createCommentVNode("", true),
          unref(x) ? (openBlock(), createElementBlock("small", Fi, toDisplayString(e.duplicateTagText) + ": " + toDisplayString(h2.value), 1)) : createCommentVNode("", true),
          S.value.length === e.limit ? (openBlock(), createElementBlock("small", Ei, "Tag limit reached")) : createCommentVNode("", true)
        ])
      ]),
      e.name ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(S.value, (Q, be) => (openBlock(), createElementBlock("input", {
        key: be,
        type: "hidden",
        name: e.name,
        value: Q
      }, null, 8, Li))), 128)) : createCommentVNode("", true)
    ], 42, Ci));
  }
});
var Ni = defineComponent({
  props: {
    ...Kl,
    noResize: { type: [Boolean, String], default: false },
    rows: { type: [String, Number], required: false, default: 2 },
    wrap: { type: String, default: "soft" }
  },
  emits: ["update:modelValue", "change", "blur", "input"],
  setup(e, { emit: t }) {
    const { input: a, computedId: l, computedAriaInvalid: n, onInput: r, onChange: d, onBlur: c, focus: v, blur: m } = Xl(e, t), C = u(toRef(e, "noResize")), p = computed(() => ({
      "form-control": !e.plaintext,
      "form-control-plaintext": e.plaintext,
      [`form-control-${e.size}`]: !!e.size,
      "is-valid": e.state === true,
      "is-invalid": e.state === false
    })), g = computed(
      () => C.value ? { resize: "none" } : void 0
    );
    return {
      input: a,
      computedId: l,
      computedAriaInvalid: n,
      onInput: r,
      onChange: d,
      onBlur: c,
      focus: v,
      blur: m,
      computedClasses: p,
      computedStyles: g
    };
  }
});
var Di = ["id", "name", "form", "disabled", "placeholder", "required", "autocomplete", "readonly", "aria-required", "aria-invalid", "rows", "wrap"];
function Hi(e, t, a, l, n, r) {
  return openBlock(), createElementBlock("textarea", mergeProps({
    id: e.computedId,
    ref: "input",
    class: e.computedClasses,
    name: e.name || void 0,
    form: e.form || void 0,
    disabled: e.disabled,
    placeholder: e.placeholder,
    required: e.required,
    autocomplete: e.autocomplete || void 0,
    readonly: e.readonly || e.plaintext,
    "aria-required": e.required ? "true" : void 0,
    "aria-invalid": e.computedAriaInvalid,
    rows: e.rows,
    style: e.computedStyles,
    wrap: e.wrap || void 0
  }, e.$attrs, {
    onInput: t[0] || (t[0] = (d) => e.onInput(d)),
    onChange: t[1] || (t[1] = (d) => e.onChange(d)),
    onBlur: t[2] || (t[2] = (d) => e.onBlur(d))
  }), null, 16, Di);
}
var Mi = Te(Ni, [["render", Hi]]);
var Ri = {
  key: 0,
  class: "input-group-text"
};
var ji = ["innerHTML"];
var qi = { key: 1 };
var Gi = {
  key: 0,
  class: "input-group-text"
};
var Ui = ["innerHTML"];
var Wi = { key: 1 };
var Ki = defineComponent({
  __name: "BInputGroup",
  props: {
    append: null,
    appendHtml: null,
    id: null,
    prepend: null,
    prependHtml: null,
    size: null,
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, a = computed(() => ({
      "input-group-sm": t.size === "sm",
      "input-group-lg": t.size === "lg"
    })), l = computed(() => !!t.append || !!t.appendHtml), n = computed(() => !!t.prepend || !!t.prependHtml);
    return (r, d) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      class: normalizeClass(["input-group", unref(a)]),
      role: "group"
    }, {
      default: withCtx(() => [
        renderSlot(r.$slots, "prepend", {}, () => [
          unref(n) ? (openBlock(), createElementBlock("span", Ri, [
            e.prependHtml ? (openBlock(), createElementBlock("span", {
              key: 0,
              innerHTML: e.prependHtml
            }, null, 8, ji)) : (openBlock(), createElementBlock("span", qi, toDisplayString(e.prepend), 1))
          ])) : createCommentVNode("", true)
        ]),
        renderSlot(r.$slots, "default"),
        renderSlot(r.$slots, "append", {}, () => [
          unref(l) ? (openBlock(), createElementBlock("span", Gi, [
            e.appendHtml ? (openBlock(), createElementBlock("span", {
              key: 0,
              innerHTML: e.appendHtml
            }, null, 8, Ui)) : (openBlock(), createElementBlock("span", Wi, toDisplayString(e.append), 1))
          ])) : createCommentVNode("", true)
        ])
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var gn = defineComponent({
  __name: "BInputGroupText",
  props: {
    tag: { default: "div" },
    text: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), { class: "input-group-text" }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default", {}, () => [
          createTextVNode(toDisplayString(e.text), 1)
        ])
      ]),
      _: 3
    }));
  }
});
var va = defineComponent({
  __name: "BInputGroupAddon",
  props: {
    isText: { default: false }
  },
  setup(e) {
    const a = u(toRef(e, "isText"));
    return (l, n) => unref(a) ? (openBlock(), createBlock(gn, { key: 0 }, {
      default: withCtx(() => [
        renderSlot(l.$slots, "default")
      ]),
      _: 3
    })) : renderSlot(l.$slots, "default", { key: 1 });
  }
});
var Xi = defineComponent({
  __name: "BInputGroupAppend",
  props: {
    isText: { default: false }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(va, { "is-text": e.isText }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }, 8, ["is-text"]));
  }
});
var Ji = defineComponent({
  __name: "BInputGroupPrepend",
  props: {
    isText: { default: false }
  },
  setup(e) {
    return (t, a) => (openBlock(), createBlock(va, { "is-text": e.isText }, {
      default: withCtx(() => [
        renderSlot(t.$slots, "default")
      ]),
      _: 3
    }, 8, ["is-text"]));
  }
});
var Qi = defineComponent({
  __name: "BListGroup",
  props: {
    flush: { default: false },
    horizontal: { type: [Boolean, String], default: false },
    numbered: { default: false },
    tag: { default: "div" }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "flush")), l = u(toRef(t, "numbered")), n = computed(() => {
      const d = a.value ? false : t.horizontal;
      return {
        "list-group-flush": a.value,
        "list-group-horizontal": d === true,
        [`list-group-horizontal-${d}`]: typeof d == "string",
        "list-group-numbered": l.value
      };
    }), r = computed(() => l.value === true ? "ol" : t.tag);
    return provide(Vl, {
      numbered: l.value
    }), (d, c) => (openBlock(), createBlock(resolveDynamicComponent(unref(r)), {
      class: normalizeClass(["list-group", unref(n)])
    }, {
      default: withCtx(() => [
        renderSlot(d.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var Yi = defineComponent({
  __name: "BListGroupItem",
  props: {
    action: { default: false },
    active: { default: false },
    button: { default: false },
    disabled: { default: false },
    href: null,
    tag: { default: "div" },
    target: { default: "_self" },
    to: null,
    variant: null
  },
  setup(e) {
    const t = e, a = useAttrs(), l = inject(Vl), n = u(toRef(t, "action")), r = u(toRef(t, "active")), d = u(toRef(t, "button")), c = u(toRef(t, "disabled")), v = computed(() => !d.value && (!!t.href || !!t.to)), m = computed(
      () => l != null && l.numbered ? "li" : d.value ? "button" : v.value ? Ve : t.tag
    ), C = computed(
      () => n.value || v.value || d.value || ["a", "router-link", "button", "b-link"].includes(t.tag)
    ), p = computed(() => ({
      [`list-group-item-${t.variant}`]: t.variant !== void 0,
      "list-group-item-action": C.value,
      active: r.value,
      disabled: c.value
    })), g = computed(() => {
      const A = {};
      return d.value && ((!a || !a.type) && (A.type = "button"), c.value && (A.disabled = true)), A;
    });
    return (A, w) => (openBlock(), createBlock(resolveDynamicComponent(unref(m)), mergeProps({
      class: ["list-group-item", unref(p)],
      "aria-current": unref(r) ? true : void 0,
      "aria-disabled": unref(c) ? true : void 0,
      target: unref(v) ? e.target : void 0,
      href: unref(d) ? void 0 : e.href,
      to: unref(d) ? void 0 : e.to
    }, unref(g)), {
      default: withCtx(() => [
        renderSlot(A.$slots, "default")
      ]),
      _: 3
    }, 16, ["class", "aria-current", "aria-disabled", "target", "href", "to"]));
  }
});
var Zi = ["id", "aria-labelledby", "aria-describedby"];
var eu = ["id"];
var tu = {
  inheritAttrs: false
};
var au = defineComponent({
  ...tu,
  __name: "BModal",
  props: {
    bodyBgVariant: null,
    bodyClass: null,
    bodyTextVariant: null,
    busy: { default: false },
    lazy: { default: false },
    buttonSize: { default: "md" },
    cancelDisabled: { default: false },
    cancelTitle: { default: "Cancel" },
    cancelVariant: { default: "secondary" },
    centered: { default: false },
    contentClass: null,
    dialogClass: null,
    footerBgVariant: null,
    footerBorderVariant: null,
    footerClass: null,
    footerTextVariant: null,
    fullscreen: { type: [Boolean, String], default: false },
    headerBgVariant: null,
    headerBorderVariant: null,
    headerClass: null,
    headerCloseLabel: { default: "Close" },
    headerCloseWhite: { default: false },
    headerTextVariant: null,
    hideBackdrop: { default: false },
    hideFooter: { default: false },
    hideHeader: { default: false },
    hideHeaderClose: { default: false },
    id: null,
    modalClass: null,
    modelValue: { default: false },
    noCloseOnBackdrop: { default: false },
    noCloseOnEsc: { default: false },
    noFade: { default: false },
    noFocus: { default: false },
    okDisabled: { default: false },
    okOnly: { default: false },
    okTitle: { default: "Ok" },
    okVariant: { default: "primary" },
    scrollable: { default: false },
    show: { default: false },
    size: null,
    title: null,
    titleClass: null,
    titleSrOnly: { default: false },
    titleTag: { default: "h5" },
    static: { default: false }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden", "hide-prevented", "show-prevented", "ok", "cancel", "close"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = $e(toRef(a, "id"), "modal"), r = u(toRef(a, "busy")), d = u(toRef(a, "lazy")), c = u(toRef(a, "cancelDisabled")), v = u(toRef(a, "centered")), m = u(toRef(a, "hideBackdrop")), C = u(toRef(a, "hideFooter")), p = u(toRef(a, "hideHeader")), g = u(toRef(a, "hideHeaderClose")), A = u(toRef(a, "modelValue")), w = u(toRef(a, "noCloseOnBackdrop")), B = u(toRef(a, "noCloseOnEsc")), S = u(toRef(a, "noFade")), h2 = u(toRef(a, "noFocus")), $ = u(toRef(a, "okDisabled")), F = u(toRef(a, "okOnly")), I = u(toRef(a, "scrollable")), V = u(toRef(a, "titleSrOnly")), _ = u(toRef(a, "static")), O = ref(false), b = ref(null), x = ref(false), H = computed(() => [
      a.modalClass,
      {
        fade: !S.value,
        show: O.value
      }
    ]), j = computed(
      () => d.value === false || d.value === true && x.value === true || d.value === true && A.value === true
    ), q = computed(() => !we(l["header-close"])), K = computed(() => [
      a.dialogClass,
      {
        "modal-fullscreen": a.fullscreen === true,
        [`modal-fullscreen-${a.fullscreen}-down`]: typeof a.fullscreen == "string",
        [`modal-${a.size}`]: a.size !== void 0,
        "modal-dialog-centered": v.value,
        "modal-dialog-scrollable": I.value
      }
    ]), oe = computed(() => [
      a.bodyClass,
      {
        [`bg-${a.bodyBgVariant}`]: a.bodyBgVariant !== void 0,
        [`text-${a.bodyTextVariant}`]: a.bodyTextVariant !== void 0
      }
    ]), Z = computed(() => [
      a.headerClass,
      {
        [`bg-${a.headerBgVariant}`]: a.headerBgVariant !== void 0,
        [`border-${a.headerBorderVariant}`]: a.headerBorderVariant !== void 0,
        [`text-${a.headerTextVariant}`]: a.headerTextVariant !== void 0
      }
    ]), ge = computed(() => [
      a.footerClass,
      {
        [`bg-${a.footerBgVariant}`]: a.footerBgVariant !== void 0,
        [`border-${a.footerBorderVariant}`]: a.footerBorderVariant !== void 0,
        [`text-${a.footerTextVariant}`]: a.footerTextVariant !== void 0
      }
    ]), ae = computed(() => [
      a.titleClass,
      {
        ["visually-hidden"]: V.value
      }
    ]), pe = computed(() => c.value || r.value), ye = computed(() => $.value || r.value), he = (ne, ie = {}) => new oa(ne, {
      cancelable: false,
      target: b.value || null,
      relatedTarget: null,
      trigger: null,
      ...ie,
      componentId: n.value
    }), re = (ne = "") => {
      const ie = he("hide", { cancelable: ne !== "", trigger: ne });
      if (ne === "ok" && t(ne, ie), ne === "cancel" && t(ne, ie), ne === "close" && t(ne, ie), t("hide", ie), ie.defaultPrevented || ne === "backdrop" && w.value || ne === "esc" && B.value) {
        t("update:modelValue", true), t("hide-prevented");
        return;
      }
      t("update:modelValue", false);
    }, E = () => {
      const ne = he("show", { cancelable: true });
      if (t("show", ne), ne.defaultPrevented) {
        t("update:modelValue", false), t("show-prevented");
        return;
      }
      t("update:modelValue", true);
    }, N = () => E(), J = () => {
      O.value = true, t("shown", he("shown")), d.value === true && (x.value = true);
    }, Q = () => O.value = false, be = () => {
      t("hidden", he("hidden")), d.value === true && (x.value = false);
    };
    return watch(
      A,
      (ne) => {
        ne === true && !h2.value && b.value !== null && b.value.focus();
      },
      { flush: "post" }
    ), (ne, ie) => (openBlock(), createBlock(Teleport, {
      to: "body",
      disabled: unref(_)
    }, [
      createVNode(lt, {
        "no-fade": true,
        "trans-props": { enterToClass: "show" },
        onBeforeEnter: N,
        onAfterEnter: J,
        onLeave: Q,
        onAfterLeave: be
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", mergeProps({
            id: unref(n),
            ref_key: "element",
            ref: b,
            class: ["modal", unref(H)],
            role: "dialog",
            "aria-labelledby": `${unref(n)}-label`,
            "aria-describedby": `${unref(n)}-body`,
            tabindex: "-1"
          }, ne.$attrs, {
            onKeyup: ie[5] || (ie[5] = withKeys((Ae) => re("esc"), ["esc"]))
          }), [
            createBaseVNode("div", {
              class: normalizeClass(["modal-dialog", unref(K)])
            }, [
              unref(j) ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(["modal-content", e.contentClass])
              }, [
                unref(p) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: normalizeClass(["modal-header", unref(Z)])
                }, [
                  renderSlot(ne.$slots, "header", {}, () => [
                    (openBlock(), createBlock(resolveDynamicComponent(e.titleTag), {
                      id: `${unref(n)}-label`,
                      class: normalizeClass(["modal-title", unref(ae)])
                    }, {
                      default: withCtx(() => [
                        renderSlot(ne.$slots, "title", {}, () => [
                          createTextVNode(toDisplayString(e.title), 1)
                        ], true)
                      ]),
                      _: 3
                    }, 8, ["id", "class"])),
                    unref(g) ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                      unref(q) ? (openBlock(), createElementBlock("button", {
                        key: 0,
                        type: "button",
                        onClick: ie[0] || (ie[0] = (Ae) => re("close"))
                      }, [
                        renderSlot(ne.$slots, "header-close", {}, void 0, true)
                      ])) : (openBlock(), createBlock(nt, {
                        key: 1,
                        "aria-label": e.headerCloseLabel,
                        white: e.headerCloseWhite,
                        onClick: ie[1] || (ie[1] = (Ae) => re("close"))
                      }, null, 8, ["aria-label", "white"]))
                    ], 64))
                  ], true)
                ], 2)),
                createBaseVNode("div", {
                  id: `${unref(n)}-body`,
                  class: normalizeClass(["modal-body", unref(oe)])
                }, [
                  renderSlot(ne.$slots, "default", {}, void 0, true)
                ], 10, eu),
                unref(C) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
                  key: 1,
                  class: normalizeClass(["modal-footer", unref(ge)])
                }, [
                  renderSlot(ne.$slots, "footer", {}, () => [
                    renderSlot(ne.$slots, "cancel", {}, () => [
                      unref(F) ? createCommentVNode("", true) : (openBlock(), createBlock(et, {
                        key: 0,
                        type: "button",
                        class: "btn",
                        disabled: unref(pe),
                        size: e.buttonSize,
                        variant: e.cancelVariant,
                        onClick: ie[2] || (ie[2] = (Ae) => re("cancel"))
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(e.cancelTitle), 1)
                        ]),
                        _: 1
                      }, 8, ["disabled", "size", "variant"]))
                    ], true),
                    renderSlot(ne.$slots, "ok", {}, () => [
                      createVNode(et, {
                        type: "button",
                        class: "btn",
                        disabled: unref(ye),
                        size: e.buttonSize,
                        variant: e.okVariant,
                        onClick: ie[3] || (ie[3] = (Ae) => re("ok"))
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(e.okTitle), 1)
                        ]),
                        _: 1
                      }, 8, ["disabled", "size", "variant"])
                    ], true)
                  ], true)
                ], 2))
              ], 2)) : createCommentVNode("", true)
            ], 2),
            unref(m) ? createCommentVNode("", true) : renderSlot(ne.$slots, "backdrop", { key: 0 }, () => [
              createBaseVNode("div", {
                class: "modal-backdrop fade show",
                onClick: ie[4] || (ie[4] = (Ae) => re("backdrop"))
              })
            ], true)
          ], 16, Zi), [
            [vShow, unref(A)]
          ])
        ]),
        _: 3
      })
    ], 8, ["disabled"]));
  }
});
var lu = Te(au, [["__scopeId", "data-v-8331ea82"]]);
var nu = defineComponent({
  __name: "BNav",
  props: {
    align: null,
    cardHeader: { default: false },
    fill: { default: false },
    justified: { default: false },
    pills: { default: false },
    small: { default: false },
    tabs: { default: false },
    tag: { default: "ul" },
    vertical: { default: false }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "cardHeader")), l = u(toRef(t, "fill")), n = u(toRef(t, "justified")), r = u(toRef(t, "pills")), d = u(toRef(t, "small")), c = u(toRef(t, "tabs")), v = u(toRef(t, "vertical")), m = dt(toRef(t, "align")), C = computed(() => ({
      "nav-tabs": c.value,
      "nav-pills": r.value && !c.value,
      "card-header-tabs": !v.value && a.value && c.value,
      "card-header-pills": !v.value && a.value && r.value && !c.value,
      "flex-column": v.value,
      "nav-fill": !v.value && l.value,
      "nav-justified": !v.value && n.value,
      [m.value]: !v.value && t.align !== void 0,
      small: d.value
    }));
    return (p, g) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["nav", unref(C)])
    }, {
      default: withCtx(() => [
        renderSlot(p.$slots, "default")
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
var ou = defineComponent({
  __name: "BNavForm",
  props: {
    role: null,
    id: null,
    floating: { default: false },
    novalidate: { default: false },
    validated: { default: false }
  },
  emits: ["submit"],
  setup(e, { emit: t }) {
    const a = e, l = computed(() => ({
      floating: a.floating,
      role: a.role,
      id: a.id,
      novalidate: a.novalidate,
      validated: a.validated
    })), n = (r) => t("submit", r);
    return (r, d) => (openBlock(), createBlock(cn, mergeProps(unref(l), {
      class: "d-flex",
      onSubmit: withModifiers(n, ["prevent"])
    }), {
      default: withCtx(() => [
        renderSlot(r.$slots, "default")
      ]),
      _: 3
    }, 16, ["onSubmit"]));
  }
});
var su = defineComponent({
  components: { BLink: Ve },
  props: {
    ...Ot(Je, ["event", "routerTag"])
  },
  setup(e) {
    return { disabledBoolean: u(toRef(e, "disabled")) };
  }
});
var ru = { class: "nav-item" };
function iu(e, t, a, l, n, r) {
  const d = resolveComponent("b-link");
  return openBlock(), createElementBlock("li", ru, [
    createVNode(d, mergeProps({ class: "nav-link" }, e.$props, {
      "active-class": "active",
      tabindex: e.disabledBoolean ? -1 : void 0,
      "aria-disabled": e.disabledBoolean ? true : void 0
    }), {
      default: withCtx(() => [
        renderSlot(e.$slots, "default")
      ]),
      _: 3
    }, 16, ["tabindex", "aria-disabled"])
  ]);
}
var uu = Te(su, [["render", iu]]);
var du = { class: "nav-item dropdown" };
var cu = defineComponent({
  __name: "BNavItemDropdown",
  props: {
    id: null,
    text: null,
    toggleClass: null,
    size: null,
    offset: null,
    autoClose: { type: [Boolean, String], default: true },
    dark: { type: Boolean, default: false },
    dropleft: { type: Boolean, default: false },
    dropright: { type: Boolean, default: false },
    dropup: { type: Boolean, default: false },
    right: { type: Boolean, default: false },
    left: { type: [Boolean, String], default: false },
    split: { type: Boolean, default: false },
    splitVariant: null,
    noCaret: { type: Boolean, default: false },
    variant: { default: "link" }
  },
  setup(e) {
    const t = e;
    return (a, l) => (openBlock(), createElementBlock("li", du, [
      createVNode(dn, mergeProps(t, { "is-nav": "" }), createSlots({ _: 2 }, [
        renderList(a.$slots, (n, r, d) => ({
          name: r,
          fn: withCtx((c) => [
            renderSlot(a.$slots, r, normalizeProps(guardReactiveProps(c || {})))
          ])
        }))
      ]), 1040)
    ]));
  }
});
var fu = { class: "navbar-text" };
var vu = defineComponent({
  __name: "BNavText",
  props: {
    text: null
  },
  setup(e) {
    return (t, a) => (openBlock(), createElementBlock("li", fu, [
      renderSlot(t.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(e.text), 1)
      ])
    ]));
  }
});
var mu = defineComponent({
  __name: "BNavbar",
  props: {
    fixed: null,
    print: { default: false },
    sticky: null,
    tag: { default: "nav" },
    toggleable: { type: [Boolean, String], default: false },
    dark: { default: false },
    variant: null,
    container: { type: [String, Boolean], default: "fluid" }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "print")), l = u(toRef(t, "dark")), n = computed(
      () => t.tag === "nav" ? void 0 : "navigation"
    ), r = computed(
      () => typeof t.toggleable == "string" ? `navbar-expand-${t.toggleable}` : t.toggleable === false ? "navbar-expand" : void 0
    ), d = computed(
      () => t.container === true ? "container" : "container-fluid"
    ), c = computed(() => ({
      "d-print": a.value,
      [`sticky-${t.sticky}`]: t.sticky !== void 0,
      "navbar-dark": l.value,
      [`bg-${t.variant}`]: t.variant !== void 0,
      [`fixed-${t.fixed}`]: t.fixed !== void 0,
      [`${r.value}`]: r.value !== void 0
    }));
    return (v, m) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["navbar", unref(c)]),
      role: unref(n)
    }, {
      default: withCtx(() => [
        e.container !== false ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(d))
        }, [
          renderSlot(v.$slots, "default")
        ], 2)) : renderSlot(v.$slots, "default", { key: 1 })
      ]),
      _: 3
    }, 8, ["class", "role"]));
  }
});
var ja = Ot(Je, ["event", "routerTag"]);
var pu = defineComponent({
  components: {
    BLink: Ve
  },
  props: {
    tag: { type: String, default: "div" },
    ...ja
  },
  setup(e) {
    const t = computed(() => it(e)), a = computed(
      () => t.value ? Ve : e.tag
    );
    return {
      computedLinkProps: computed(
        () => t.value ? ia(e, ja) : {}
      ),
      computedTag: a
    };
  }
});
function bu(e, t, a, l, n, r) {
  return openBlock(), createBlock(resolveDynamicComponent(e.computedTag), mergeProps({ class: "navbar-brand" }, e.computedLinkProps), {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 16);
}
var gu = Te(pu, [["render", bu]]);
var hu = defineComponent({
  __name: "BNavbarNav",
  props: {
    align: null,
    fill: { default: false },
    justified: { default: false },
    small: { default: false },
    tag: { default: "ul" }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "fill")), l = u(toRef(t, "justified")), n = u(toRef(t, "small")), r = dt(toRef(t, "align")), d = computed(() => ({
      "nav-fill": a.value,
      "nav-justified": l.value,
      [r.value]: t.align !== void 0,
      small: n.value
    }));
    return (c, v) => (openBlock(), createElementBlock("ul", {
      class: normalizeClass(["navbar-nav", unref(d)])
    }, [
      renderSlot(c.$slots, "default")
    ], 2));
  }
});
var yu = createBaseVNode("span", { class: "navbar-toggler-icon" }, null, -1);
var Bu = defineComponent({
  __name: "BNavbarToggle",
  props: {
    disabled: { default: false },
    label: { default: "Toggle navigation" },
    target: null
  },
  emits: ["click"],
  setup(e, { emit: t }) {
    const a = e, l = u(toRef(a, "disabled")), n = computed(() => ({
      disabled: l.value,
      "aria-label": a.label
    })), r = computed(() => ({
      disabled: l.value
    })), d = (c) => {
      l.value || t("click", c);
    };
    return (c, v) => withDirectives((openBlock(), createElementBlock("button", mergeProps({
      class: ["navbar-toggler", unref(r)],
      type: "button"
    }, unref(n), { onClick: d }), [
      renderSlot(c.$slots, "default", {}, () => [
        yu
      ])
    ], 16)), [
      [unref(da), unref(l) ? void 0 : e.target]
    ]);
  }
});
var hn = defineComponent({
  __name: "BOverlay",
  props: {
    bgColor: null,
    blur: { default: "2px" },
    fixed: { default: false },
    noCenter: { default: false },
    noFade: { default: false },
    noWrap: { default: false },
    opacity: { default: 0.85 },
    overlayTag: { default: "div" },
    rounded: { type: [Boolean, String], default: false },
    show: { default: false },
    spinnerSmall: { default: false },
    spinnerType: { default: "border" },
    spinnerVariant: null,
    noSpinner: { default: false },
    variant: { default: "light" },
    wrapTag: { default: "div" },
    zIndex: { default: 10 }
  },
  emits: ["click", "hidden", "shown"],
  setup(e, { emit: t }) {
    const a = e, l = { top: 0, left: 0, bottom: 0, right: 0 }, n = u(toRef(a, "fixed")), r = u(toRef(a, "noSpinner")), d = u(toRef(a, "noCenter")), c = u(toRef(a, "noWrap")), v = u(toRef(a, "show")), m = u(toRef(a, "spinnerSmall")), C = computed(
      () => a.rounded === true || a.rounded === "" ? "rounded" : a.rounded === false ? "" : `rounded-${a.rounded}`
    ), p = computed(
      () => a.variant && !a.bgColor ? `bg-${a.variant}` : ""
    ), g = computed(() => v.value ? "true" : null), A = computed(() => ({
      type: a.spinnerType || void 0,
      variant: a.spinnerVariant || void 0,
      small: m.value
    })), w = computed(() => ({
      ...l,
      zIndex: a.zIndex || 10
    })), B = computed(() => [
      "b-overlay",
      {
        "position-absolute": !c.value || !n.value,
        "position-fixed": c.value && n.value
      }
    ]), S = computed(() => [p.value, C.value]), h2 = computed(() => ({
      ...l,
      opacity: a.opacity,
      backgroundColor: a.bgColor || void 0,
      backdropFilter: blur ? `blur(${blur})` : void 0
    })), $ = computed(
      () => d.value ? l : {
        top: "50%",
        left: "50%",
        transform: "translateX(-50%) translateY(-50%)"
      }
    );
    return (F, I) => (openBlock(), createBlock(resolveDynamicComponent(e.wrapTag), {
      class: "b-overlay-wrap position-relative",
      "aria-busy": unref(g)
    }, {
      default: withCtx(() => [
        renderSlot(F.$slots, "default"),
        createVNode(lt, {
          "no-fade": e.noFade,
          "trans-props": { enterToClass: "show" },
          name: "fade",
          onOnAfterEnter: I[1] || (I[1] = (V) => t("shown")),
          onOnAfterLeave: I[2] || (I[2] = (V) => t("hidden"))
        }, {
          default: withCtx(() => [
            unref(v) ? (openBlock(), createBlock(resolveDynamicComponent(e.overlayTag), {
              key: 0,
              class: normalizeClass(unref(B)),
              style: normalizeStyle(unref(w)),
              onClick: I[0] || (I[0] = (V) => t("click", V))
            }, {
              default: withCtx(() => [
                createBaseVNode("div", {
                  class: normalizeClass(["position-absolute", unref(S)]),
                  style: normalizeStyle(unref(h2))
                }, null, 6),
                createBaseVNode("div", {
                  class: "position-absolute",
                  style: normalizeStyle(unref($))
                }, [
                  renderSlot(F.$slots, "overlay", normalizeProps(guardReactiveProps(unref(A))), () => [
                    unref(r) ? createCommentVNode("", true) : (openBlock(), createBlock(Pt, normalizeProps(mergeProps({ key: 0 }, unref(A))), null, 16))
                  ])
                ], 4)
              ]),
              _: 3
            }, 8, ["class", "style"])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["no-fade"])
      ]),
      _: 3
    }, 8, ["aria-busy"]));
  }
});
var $u = {
  key: 0,
  class: "offcanvas-header"
};
var ku = {
  id: "offcanvasLabel",
  class: "offcanvas-title"
};
var Su = { class: "offcanvas-body" };
var Cu = { key: 1 };
var wu = defineComponent({
  __name: "BOffcanvas",
  props: {
    dismissLabel: { default: "Close" },
    modelValue: { default: false },
    bodyScrolling: { default: false },
    backdrop: { default: true },
    noCloseOnBackdrop: { default: false },
    noCloseOnEsc: { default: false },
    placement: { default: "start" },
    title: null,
    noHeaderClose: { default: false },
    noHeader: { default: false },
    lazy: { default: false },
    id: null,
    noFocus: { default: false },
    static: { default: false },
    backdropVariant: { default: "dark" }
  },
  emits: ["update:modelValue", "show", "shown", "hide", "hidden", "hide-prevented", "show-prevented", "esc", "close"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = u(toRef(a, "modelValue"));
    u(toRef(a, "bodyScrolling"));
    const r = u(toRef(a, "backdrop")), d = u(toRef(a, "noHeaderClose")), c = u(toRef(a, "noHeader")), v = u(toRef(a, "noFocus")), m = u(toRef(a, "noCloseOnBackdrop")), C = u(toRef(a, "noCloseOnEsc")), p = u(toRef(a, "lazy")), g = u(toRef(a, "static")), A = $e(toRef(a, "id"), "offcanvas"), w = ref(false), B = ref(null), S = ref(false), h2 = computed(
      () => r.value === true && n.value === true
    ), $ = computed(
      () => p.value === false || p.value === true && S.value === true || p.value === true && n.value === true
    ), F = computed(() => !we(l.footer)), I = computed(() => [
      "offcanvas",
      `offcanvas-${a.placement}`,
      {
        show: n.value && w.value === true
      }
    ]), V = (q, K = {}) => new oa(q, {
      cancelable: false,
      target: B.value || null,
      relatedTarget: null,
      trigger: null,
      ...K,
      componentId: A.value
    }), _ = (q = "") => {
      const K = V("hide", { cancelable: q !== "", trigger: q });
      if (q === "close" && t(q, K), q === "esc" && t(q, K), t("hide", K), K.defaultPrevented || q === "backdrop" && m.value || q === "esc" && C.value) {
        t("update:modelValue", true), t("hide-prevented");
        return;
      }
      t("update:modelValue", false);
    }, O = () => {
      const q = V("show", { cancelable: true });
      if (t("show", q), q.defaultPrevented) {
        t("update:modelValue", false), t("show-prevented");
        return;
      }
      t("update:modelValue", true);
    }, b = () => O(), x = () => {
      w.value = true, t("shown", V("shown")), p.value === true && (S.value = true);
    }, H = () => w.value = false, j = () => {
      t("hidden", V("hidden")), p.value === true && (S.value = false);
    };
    return onMounted(() => {
      n.value === true && (w.value = true);
    }), watch(
      n,
      (q) => {
        q === true && !v.value && B.value !== null && B.value.focus();
      },
      { flush: "post" }
    ), (q, K) => (openBlock(), createBlock(Teleport, {
      to: "body",
      disabled: unref(g)
    }, [
      createVNode(lt, {
        "no-fade": true,
        "trans-props": {
          enterToClass: "showing",
          enterFromClass: "",
          leaveToClass: "hiding show",
          leaveFromClass: "show"
        },
        onBeforeEnter: b,
        onAfterEnter: x,
        onLeave: H,
        onAfterLeave: j
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", {
            ref_key: "element",
            ref: B,
            "aria-modal": "true",
            role: "dialog",
            class: normalizeClass(unref(I)),
            tabindex: "-1",
            "aria-labelledby": "offcanvasLabel",
            "data-bs-backdrop": "false",
            onKeyup: K[1] || (K[1] = withKeys((oe) => _("esc"), ["esc"]))
          }, [
            unref($) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              unref(c) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", $u, [
                renderSlot(q.$slots, "header", normalizeProps(guardReactiveProps({ visible: unref(n), placement: e.placement, hide: _ })), () => [
                  createBaseVNode("h5", ku, [
                    renderSlot(q.$slots, "title", {}, () => [
                      createTextVNode(toDisplayString(e.title), 1)
                    ])
                  ]),
                  unref(d) ? createCommentVNode("", true) : (openBlock(), createBlock(nt, {
                    key: 0,
                    class: "text-reset",
                    "aria-label": e.dismissLabel,
                    onClick: K[0] || (K[0] = (oe) => _("close"))
                  }, null, 8, ["aria-label"]))
                ])
              ])),
              createBaseVNode("div", Su, [
                renderSlot(q.$slots, "default")
              ]),
              unref(F) ? (openBlock(), createElementBlock("div", Cu, [
                renderSlot(q.$slots, "footer", normalizeProps(guardReactiveProps({ visible: unref(n), placement: e.placement, hide: _ })))
              ])) : createCommentVNode("", true)
            ], 64)) : createCommentVNode("", true)
          ], 34), [
            [vShow, e.modelValue]
          ])
        ]),
        _: 3
      }),
      createVNode(hn, {
        variant: e.backdropVariant,
        show: unref(h2),
        fixed: true,
        "no-wrap": "",
        "no-spinner": true,
        onClick: K[2] || (K[2] = (oe) => _("backdrop"))
      }, null, 8, ["variant", "show"])
    ], 8, ["disabled"]));
  }
});
var _u = 5;
var yn = 20;
var Bn = 0;
var Ee = 3;
var Tu = "ellipsis-text";
var Vu = "first-text";
var Au = "last-text";
var Ou = "next-text";
var xu = "page";
var Pu = "prev-text";
var qa = (e) => Math.max(je(e) || yn, 1);
var Ga = (e) => Math.max(je(e) || Bn, 0);
var Iu = (e, t) => {
  const a = je(e) || 1;
  return a > t ? t : a < 1 ? 1 : a;
};
var Fu = defineComponent({
  name: "BPagination",
  props: {
    align: { type: String, default: "start" },
    ariaControls: { type: String, required: false },
    ariaLabel: { type: String, default: "Pagination" },
    disabled: { type: [Boolean, String], default: false },
    ellipsisClass: { type: [Array, String], default: () => [] },
    ellipsisText: { type: String, default: "…" },
    firstClass: { type: [Array, String], default: () => [] },
    firstNumber: { type: [Boolean, String], default: false },
    firstText: { type: String, default: "«" },
    hideEllipsis: { type: [Boolean, String], default: false },
    hideGotoEndButtons: { type: [Boolean, String], default: false },
    labelFirstPage: { type: String, default: "Go to first page" },
    labelLastPage: { type: String, default: "Go to last page" },
    labelNextPage: { type: String, default: "Go to next page" },
    labelPage: { type: String, default: "Go to page" },
    labelPrevPage: { type: String, default: "Go to previous page" },
    lastClass: { type: [Array, String], default: () => [] },
    lastNumber: { type: [Boolean, String], default: false },
    lastText: { type: String, default: "»" },
    limit: { type: Number, default: _u },
    modelValue: { type: Number, default: 1 },
    nextClass: { type: [Array, String], default: () => [] },
    nextText: { type: String, default: "›" },
    pageClass: { type: [Array, String], default: () => [] },
    perPage: { type: Number, default: yn },
    pills: { type: [Boolean, String], default: false },
    prevClass: { type: [Array, String], default: () => [] },
    prevText: { type: String, default: "‹" },
    size: { type: String, required: false },
    totalRows: { type: Number, default: Bn }
  },
  emits: ["update:modelValue", "page-click"],
  setup(e, { emit: t, slots: a }) {
    const l = u(toRef(e, "disabled")), n = u(toRef(e, "firstNumber")), r = u(toRef(e, "hideEllipsis")), d = u(toRef(e, "hideGotoEndButtons")), c = u(toRef(e, "lastNumber")), v = u(toRef(e, "pills")), m = computed(
      () => e.align === "fill" ? "start" : e.align
    ), C = dt(toRef(m, "value")), p = computed(
      () => Math.ceil(Ga(e.totalRows) / qa(e.perPage))
    ), g = computed(() => {
      let V;
      return p.value - e.modelValue + 2 < e.limit && e.limit > Ee ? V = p.value - w.value + 1 : V = e.modelValue - Math.floor(w.value / 2), V < 1 ? V = 1 : V > p.value - w.value && (V = p.value - w.value + 1), e.limit <= Ee && c.value && p.value === V + w.value - 1 && (V = Math.max(V - 1, 1)), V;
    }), A = computed(() => {
      const V = p.value - e.modelValue;
      let _ = false;
      return V + 2 < e.limit && e.limit > Ee ? e.limit > Ee && (_ = true) : e.limit > Ee && (_ = !!(!r.value || n.value)), g.value <= 1 && (_ = false), _ && n.value && g.value < 4 && (_ = false), _;
    }), w = computed(() => {
      let V = e.limit;
      return p.value <= e.limit ? V = p.value : e.modelValue < e.limit - 1 && e.limit > Ee ? ((!r.value || c.value) && (V = e.limit - (n.value ? 0 : 1)), V = Math.min(V, e.limit)) : p.value - e.modelValue + 2 < e.limit && e.limit > Ee ? (!r.value || n.value) && (V = e.limit - (c.value ? 0 : 1)) : e.limit > Ee && (V = e.limit - (r.value ? 0 : 2)), V;
    }), B = computed(() => {
      const V = p.value - w.value;
      let _ = false;
      e.modelValue < e.limit - 1 && e.limit > Ee ? (!r.value || c.value) && (_ = true) : e.limit > Ee && (_ = !!(!r.value || c.value)), g.value > V && (_ = false);
      const O = g.value + w.value - 1;
      return _ && c.value && O > p.value - 3 && (_ = false), _;
    }), S = reactive({
      pageSize: qa(e.perPage),
      totalRows: Ga(e.totalRows),
      numberOfPages: p.value
    }), h2 = (V, _) => {
      if (_ === e.modelValue)
        return;
      const { target: O } = V, b = new De("page-click", {
        cancelable: true,
        target: O
      });
      t("page-click", b, _), !b.defaultPrevented && t("update:modelValue", _);
    }, $ = computed(() => e.size ? `pagination-${e.size}` : ""), F = computed(() => v.value ? "b-pagination-pills" : "");
    watch(
      () => e.modelValue,
      (V) => {
        const _ = Iu(V, p.value);
        _ !== e.modelValue && t("update:modelValue", _);
      }
    ), watch(S, (V, _) => {
      V != null && (_.pageSize !== V.pageSize && _.totalRows === V.totalRows || _.numberOfPages !== V.numberOfPages && e.modelValue > _.numberOfPages) && t("update:modelValue", 1);
    });
    const I = computed(() => {
      const V = [];
      for (let _ = 0; _ < w.value; _++)
        V.push({ number: g.value + _, classes: null });
      return V;
    });
    return () => {
      const V = [], _ = I.value.map((Z) => Z.number), O = (Z) => Z === e.modelValue, b = e.modelValue < 1, x = e.align === "fill", H = (Z, ge, ae, pe, ye, he) => {
        const re = l.value || O(he) || b || Z < 1 || Z > p.value, E = Z < 1 ? 1 : Z > p.value ? p.value : Z, N = { disabled: re, page: E, index: E - 1 }, J = Pe(ae, N, a) || pe || "";
        return h(
          "li",
          {
            class: [
              "page-item",
              {
                disabled: re,
                "flex-fill": x,
                "d-flex": x && !re
              },
              ye
            ]
          },
          h(
            re ? "span" : "button",
            {
              class: ["page-link", { "flex-grow-1": !re && x }],
              "aria-label": ge,
              "aria-controls": e.ariaControls || null,
              "aria-disabled": re ? "true" : null,
              role: "menuitem",
              type: re ? null : "button",
              tabindex: re ? null : "-1",
              onClick: (Q) => {
                re || h2(Q, E);
              }
            },
            J
          )
        );
      }, j = (Z) => h(
        "li",
        {
          class: [
            "page-item",
            "disabled",
            "bv-d-xs-down-none",
            x ? "flex-fill" : "",
            e.ellipsisClass
          ],
          role: "separator",
          key: `ellipsis-${Z ? "last" : "first"}`
        },
        [
          h(
            "span",
            { class: ["page-link"] },
            Pe(Tu, {}, a) || e.ellipsisText || "..."
          )
        ]
      ), q = (Z, ge) => {
        const ae = O(Z.number) && !b, pe = l.value ? null : ae || b && ge === 0 ? "0" : "-1", ye = {
          active: ae,
          disabled: l.value,
          page: Z.number,
          index: Z.number - 1,
          content: Z.number
        }, he = Pe(xu, ye, a) || Z.number, re = h(
          l.value ? "span" : "button",
          {
            class: ["page-link", { "flex-grow-1": !l.value && x }],
            "aria-controls": e.ariaControls || null,
            "aria-disabled": l.value ? "true" : null,
            "aria-label": e.labelPage ? `${e.labelPage} ${Z.number}` : null,
            role: "menuitemradio",
            type: l.value ? null : "button",
            tabindex: pe,
            onClick: (E) => {
              l.value || h2(E, Z.number);
            }
          },
          he
        );
        return h(
          "li",
          {
            class: [
              "page-item",
              {
                disabled: l.value,
                active: ae,
                "flex-fill": x,
                "d-flex": x && !l.value
              },
              e.pageClass
            ],
            role: "presentation",
            key: `page-${Z.number}`
          },
          re
        );
      };
      if (!d.value && !n.value) {
        const Z = H(
          1,
          e.labelFirstPage,
          Vu,
          e.firstText,
          e.firstClass,
          1
        );
        V.push(Z);
      }
      const K = H(
        e.modelValue - 1,
        e.labelFirstPage,
        Pu,
        e.prevText,
        e.prevClass,
        1
      );
      V.push(K), n.value && _[0] !== 1 && V.push(q({ number: 1 }, 0)), A.value && V.push(j(false)), I.value.forEach((Z, ge) => {
        const ae = A.value && n.value && _[0] !== 1 ? 1 : 0;
        V.push(q(Z, ge + ae));
      }), B.value && V.push(j(true)), c.value && _[_.length - 1] !== p.value && V.push(q({ number: p.value }, -1));
      const oe = H(
        e.modelValue + 1,
        e.labelNextPage,
        Ou,
        e.nextText,
        e.nextClass,
        p.value
      );
      if (V.push(oe), !c.value && !d.value) {
        const Z = H(
          p.value,
          e.labelLastPage,
          Au,
          e.lastText,
          e.lastClass,
          p.value
        );
        V.push(Z);
      }
      return h(
        "ul",
        {
          class: ["pagination", $.value, C.value, F.value],
          role: "menubar",
          "aria-disabled": l.value,
          "aria-label": e.ariaLabel || null
        },
        V
      );
    };
  }
});
var xe = defineComponent({
  __name: "BPlaceholder",
  props: {
    tag: { default: "span" },
    width: null,
    cols: null,
    variant: null,
    size: null,
    animation: null
  },
  setup(e) {
    const t = e, a = computed(
      () => t.width === void 0 ? void 0 : typeof t.width == "number" ? t.width.toString() : t.width.includes("%") ? t.width.replaceAll("%", "") : t.width
    ), l = computed(
      () => t.cols === void 0 ? void 0 : typeof t.cols == "number" ? t.cols.toString() : t.cols
    ), n = computed(() => ({
      [`col-${l.value}`]: l.value !== void 0 && a.value === void 0,
      [`bg-${t.variant}`]: t.variant !== void 0,
      [`placeholder-${t.size}`]: t.size !== void 0,
      [`placeholder-${t.animation}`]: t.animation !== void 0
    })), r = computed(
      () => a.value === void 0 ? void 0 : `width: ${a.value}%;`
    );
    return (d, c) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      class: normalizeClass(["placeholder", unref(n)]),
      style: normalizeStyle(unref(r))
    }, null, 8, ["class", "style"]));
  }
});
var $n = defineComponent({
  __name: "BPlaceholderButton",
  props: {
    tag: { default: "div" },
    width: null,
    cols: null,
    variant: { default: "primary" },
    animation: null
  },
  setup(e) {
    const t = e, a = computed(() => ["btn", `btn-${t.variant}`, "disabled"]), l = computed(() => ({
      animation: t.animation,
      width: t.width,
      cols: t.cols,
      tag: t.tag
    }));
    return (n, r) => (openBlock(), createBlock(xe, mergeProps({ class: unref(a) }, unref(l)), null, 16, ["class"]));
  }
});
var Eu = defineComponent({
  __name: "BPlaceholderCard",
  props: {
    noHeader: { default: false },
    headerWidth: { default: 100 },
    headerVariant: null,
    headerAnimation: null,
    headerSize: null,
    noFooter: { default: false },
    footerWidth: { default: 100 },
    footerVariant: null,
    footerAnimation: null,
    footerSize: null,
    animation: null,
    size: null,
    variant: null,
    noButton: { default: false },
    imgBottom: { default: false },
    imgSrc: null,
    imgBlankColor: { default: "#868e96" },
    imgHeight: { default: 100 },
    noImg: { default: false }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "noButton")), l = u(toRef(t, "noHeader")), n = u(toRef(t, "noFooter")), r = u(toRef(t, "noImg")), d = computed(() => ({
      width: t.headerWidth,
      variant: t.headerVariant,
      animation: t.headerAnimation,
      size: t.headerSize
    })), c = computed(() => ({
      width: t.footerWidth,
      animation: t.footerAnimation,
      size: a.value ? t.footerSize : void 0,
      variant: t.footerVariant
    })), v = computed(() => ({
      blank: !t.imgSrc,
      blankColor: t.imgBlankColor,
      height: t.imgSrc ? void 0 : t.imgHeight,
      src: t.imgSrc,
      top: !t.imgBottom,
      bottom: t.imgBottom
    }));
    return (m, C) => (openBlock(), createBlock(on, { "img-bottom": e.imgBottom }, createSlots({
      default: withCtx(() => [
        renderSlot(m.$slots, "default", {}, () => [
          createVNode(xe, { cols: "7" }),
          createVNode(xe, { cols: "4" }),
          createVNode(xe, { cols: "4" }),
          createVNode(xe, { cols: "6" }),
          createVNode(xe, { cols: "8" })
        ])
      ]),
      _: 2
    }, [
      unref(r) ? void 0 : {
        name: "img",
        fn: withCtx(() => [
          renderSlot(m.$slots, "img", {}, () => [
            createVNode(_t, normalizeProps(guardReactiveProps(unref(v))), null, 16)
          ])
        ]),
        key: "0"
      },
      unref(l) ? void 0 : {
        name: "header",
        fn: withCtx(() => [
          renderSlot(m.$slots, "header", {}, () => [
            createVNode(xe, normalizeProps(guardReactiveProps(unref(d))), null, 16)
          ])
        ]),
        key: "1"
      },
      unref(n) ? void 0 : {
        name: "footer",
        fn: withCtx(() => [
          renderSlot(m.$slots, "footer", {}, () => [
            unref(a) ? (openBlock(), createBlock(xe, normalizeProps(mergeProps({ key: 1 }, unref(c))), null, 16)) : (openBlock(), createBlock($n, normalizeProps(mergeProps({ key: 0 }, unref(c))), null, 16))
          ])
        ]),
        key: "2"
      }
    ]), 1032, ["img-bottom"]));
  }
});
var It = defineComponent({
  __name: "BTableSimple",
  props: {
    bordered: { default: false },
    borderless: { default: false },
    borderVariant: null,
    captionTop: { default: false },
    dark: { default: false },
    hover: { default: false },
    responsive: { type: [Boolean, String], default: false },
    stacked: { type: [Boolean, String], default: false },
    striped: { default: false },
    small: { default: false },
    tableClass: null,
    tableVariant: null,
    stickyHeader: { default: false }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "captionTop")), l = u(toRef(t, "borderless")), n = u(toRef(t, "bordered")), r = u(toRef(t, "dark")), d = u(toRef(t, "hover")), c = u(toRef(t, "small")), v = u(toRef(t, "striped")), m = u(toRef(t, "stickyHeader")), C = computed(() => [
      "table",
      "b-table",
      {
        "table-bordered": n.value,
        "table-borderless": l.value,
        [`border-${t.borderVariant}`]: t.borderVariant !== void 0,
        "caption-top": a.value,
        "table-dark": r.value,
        "table-hover": d.value,
        "b-table-stacked": typeof t.stacked == "boolean" && t.stacked,
        [`b-table-stacked-${t.stacked}`]: typeof t.stacked == "string",
        "table-striped": v.value,
        "table-sm": c.value,
        [`table-${t.tableVariant}`]: t.tableVariant !== void 0
      },
      t.tableClass
    ]), p = computed(() => [
      {
        "table-responsive": t.responsive === true,
        [`table-responsive-${t.responsive}`]: typeof t.responsive == "string",
        "b-table-sticky-header": m.value
      }
    ]);
    return (g, A) => e.responsive ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(unref(p))
    }, [
      createBaseVNode("table", {
        role: "table",
        class: normalizeClass(unref(C))
      }, [
        renderSlot(g.$slots, "default")
      ], 2)
    ], 2)) : (openBlock(), createElementBlock("table", {
      key: 0,
      role: "table",
      class: normalizeClass(unref(C))
    }, [
      renderSlot(g.$slots, "default")
    ], 2));
  }
});
var Lu = defineComponent({
  __name: "BPlaceholderTable",
  props: {
    rows: { default: 3 },
    columns: { default: 5 },
    cellWidth: { default: 100 },
    size: null,
    animation: null,
    variant: null,
    headerColumns: null,
    hideHeader: { default: false },
    headerCellWidth: { default: 100 },
    headerSize: null,
    headerAnimation: null,
    headerVariant: null,
    footerColumns: null,
    showFooter: { default: false },
    footerCellWidth: { default: 100 },
    footerSize: null,
    footerAnimation: null,
    footerVariant: null
  },
  setup(e) {
    const t = e, a = computed(
      () => typeof t.columns == "string" ? ot(t.columns, 5) : t.columns
    ), l = computed(
      () => typeof t.rows == "string" ? ot(t.rows, 3) : t.rows
    ), n = computed(
      () => t.headerColumns === void 0 ? a.value : typeof t.headerColumns == "string" ? ot(t.headerColumns, a.value) : t.headerColumns
    ), r = computed(
      () => t.footerColumns === void 0 ? a.value : typeof t.footerColumns == "string" ? ot(t.footerColumns, a.value) : t.footerColumns
    ), d = computed(() => ({
      size: t.size,
      variant: t.variant,
      animation: t.animation,
      width: t.cellWidth
    })), c = computed(() => ({
      size: t.headerSize,
      variant: t.headerVariant,
      animation: t.headerAnimation,
      width: t.headerCellWidth
    })), v = computed(() => ({
      size: t.footerSize,
      variant: t.footerVariant,
      animation: t.footerAnimation,
      width: t.footerCellWidth
    })), m = u(toRef(t, "hideHeader")), C = u(toRef(t, "showFooter"));
    return (p, g) => (openBlock(), createBlock(It, null, {
      default: withCtx(() => [
        unref(m) ? createCommentVNode("", true) : renderSlot(p.$slots, "thead", { key: 0 }, () => [
          createBaseVNode("thead", null, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(n), (A, w) => (openBlock(), createElementBlock("th", { key: w }, [
                createVNode(xe, normalizeProps(guardReactiveProps(unref(c))), null, 16)
              ]))), 128))
            ])
          ])
        ]),
        renderSlot(p.$slots, "default", {}, () => [
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l), (A, w) => (openBlock(), createElementBlock("tr", { key: w }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(a), (B, S) => (openBlock(), createElementBlock("td", { key: S }, [
                createVNode(xe, normalizeProps(guardReactiveProps(unref(d))), null, 16)
              ]))), 128))
            ]))), 128))
          ])
        ]),
        unref(C) ? renderSlot(p.$slots, "tfoot", { key: 1 }, () => [
          createBaseVNode("tfoot", null, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(r), (A, w) => (openBlock(), createElementBlock("th", { key: w }, [
                createVNode(xe, normalizeProps(guardReactiveProps(unref(v))), null, 16)
              ]))), 128))
            ])
          ])
        ]) : createCommentVNode("", true)
      ]),
      _: 3
    }));
  }
});
var zu = defineComponent({
  __name: "BPlaceholderWrapper",
  props: {
    loading: { default: false }
  },
  setup(e) {
    const a = u(toRef(e, "loading"));
    return (l, n) => unref(a) ? renderSlot(l.$slots, "loading", { key: 0 }) : renderSlot(l.$slots, "default", { key: 1 });
  }
});
var Nu = defineComponent({
  props: {
    container: {
      type: [String, Object],
      default: "body"
    },
    content: { type: String },
    id: { type: String },
    customClass: { type: String, default: "" },
    noninteractive: { type: [Boolean, String], default: false },
    placement: { type: String, default: "right" },
    target: {
      type: [String, Object],
      default: void 0
    },
    title: { type: String },
    delay: { type: [Number, Object], default: 0 },
    triggers: { type: String, default: "click" },
    show: { type: [Boolean, String], default: false },
    variant: { type: String, default: void 0 },
    html: { type: [Boolean, String], default: true },
    sanitize: { type: [Boolean, String], default: false },
    offset: { type: String, default: "0" }
  },
  emits: ["show", "shown", "hide", "hidden", "inserted"],
  setup(e, { emit: t, slots: a }) {
    u(toRef(e, "noninteractive"));
    const l = u(toRef(e, "show")), n = u(toRef(e, "html")), r = u(toRef(e, "sanitize")), d = ref(), c = ref(), v = ref(), m = ref(), C = ref(), p = computed(() => ({
      [`b-popover-${e.variant}`]: e.variant !== void 0
    })), g = ($) => {
      if (typeof $ == "string")
        return $;
      if ($ instanceof HTMLElement)
        return $;
      if (typeof $ < "u")
        return $.$el;
    }, A = ($) => {
      if (!!$) {
        if (typeof $ == "string") {
          const F = document.getElementById($);
          return F || void 0;
        }
        return $;
      }
    }, w = [
      { event: "show.bs.popover", handler: () => t("show") },
      { event: "shown.bs.popover", handler: () => t("shown") },
      { event: "hide.bs.popover", handler: () => t("hide") },
      { event: "hidden.bs.popover", handler: () => t("hidden") },
      { event: "inserted.bs.popover", handler: () => t("inserted") }
    ], B = ($) => {
      for (const F of w)
        $.addEventListener(F.event, F.handler);
    }, S = ($) => {
      for (const F of w)
        $.removeEventListener(F.event, F.handler);
    }, h2 = ($) => {
      c.value = A(g($)), c.value && (B(c.value), v.value = new Popover(c.value, {
        customClass: e.customClass,
        container: g(e.container),
        trigger: e.triggers,
        placement: e.placement,
        title: e.title || a.title ? m.value : "",
        content: C.value,
        html: n.value,
        delay: e.delay,
        sanitize: r.value,
        offset: e.offset
      }));
    };
    return watch(
      () => e.target,
      ($) => {
        var F;
        (F = v.value) == null || F.dispose(), c.value instanceof HTMLElement && S(c.value), h2($);
      }
    ), watch(l, ($, F) => {
      var I, V;
      $ !== F && ($ ? (I = v.value) == null || I.show() : (V = v.value) == null || V.hide());
    }), onMounted(() => {
      var $, F, I;
      nextTick(() => {
        h2(e.target);
      }), (F = ($ = d.value) == null ? void 0 : $.parentNode) == null || F.removeChild(d.value), l.value && ((I = v.value) == null || I.show());
    }), onBeforeUnmount(() => {
      var $;
      ($ = v.value) == null || $.dispose(), c.value instanceof HTMLElement && S(c.value);
    }), {
      element: d,
      titleRef: m,
      contentRef: C,
      computedClasses: p
    };
  }
});
var Du = ["id"];
var Hu = { ref: "titleRef" };
var Mu = { ref: "contentRef" };
function Ru(e, t, a, l, n, r) {
  return openBlock(), createElementBlock("div", {
    id: e.id,
    ref: "element",
    class: normalizeClass(["popover b-popover", e.computedClasses]),
    role: "tooltip",
    tabindex: "-1"
  }, [
    createBaseVNode("div", Hu, [
      renderSlot(e.$slots, "title", {}, () => [
        createTextVNode(toDisplayString(e.title), 1)
      ])
    ], 512),
    createBaseVNode("div", Mu, [
      renderSlot(e.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(e.content), 1)
      ])
    ], 512)
  ], 10, Du);
}
var ju = Te(Nu, [["render", Ru]]);
var qu = ["aria-valuenow", "aria-valuemax"];
var kn = defineComponent({
  __name: "BProgressBar",
  props: {
    animated: { default: false },
    label: null,
    labelHtml: null,
    max: null,
    precision: { default: 0 },
    showProgress: { default: false },
    showValue: { default: false },
    striped: { default: false },
    value: { default: 0 },
    variant: null
  },
  setup(e) {
    const t = e, a = inject(Tl), l = u(toRef(t, "animated")), n = u(toRef(t, "showProgress")), r = u(toRef(t, "showValue")), d = u(toRef(t, "striped")), c = computed(() => ({
      "progress-bar-animated": l.value || (a == null ? void 0 : a.animated),
      "progress-bar-striped": d.value || (a == null ? void 0 : a.striped) || l.value || (a == null ? void 0 : a.animated),
      [`bg-${t.variant}`]: t.variant !== void 0
    })), v = computed(
      () => typeof t.precision == "number" ? t.precision : Number.parseFloat(t.precision)
    ), m = computed(
      () => typeof t.value == "number" ? t.value : Number.parseFloat(t.value)
    ), C = computed(
      () => typeof t.max == "number" ? t.max : t.max === void 0 ? void 0 : Number.parseFloat(t.max)
    ), p = computed(
      () => t.labelHtml !== void 0 ? t.labelHtml : r.value || (a == null ? void 0 : a.showValue) ? m.value.toFixed(v.value) : n.value || (a == null ? void 0 : a.showProgress) ? (m.value * 100 / (C.value || 100)).toFixed(v.value) : t.label !== void 0 ? t.label : ""
    ), g = computed(
      () => a != null && a.max ? `${m.value * 100 / (typeof a.max == "number" ? a.max : Number.parseInt(a.max))}%` : t.max ? `${m.value * 100 / (typeof t.max == "number" ? t.max : Number.parseInt(t.max))}%` : typeof t.value == "string" ? t.value : `${t.value}%`
    );
    return (A, w) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["progress-bar", unref(c)]),
      role: "progressbar",
      "aria-valuenow": e.value,
      "aria-valuemin": "0",
      "aria-valuemax": e.max,
      style: normalizeStyle({ width: unref(g) })
    }, [
      renderSlot(A.$slots, "default", {}, () => [
        createTextVNode(toDisplayString(unref(p)), 1)
      ])
    ], 14, qu));
  }
});
var Gu = defineComponent({
  __name: "BProgress",
  props: {
    variant: null,
    max: null,
    height: null,
    animated: { default: false },
    precision: { default: 0 },
    showProgress: { default: false },
    showValue: { default: false },
    striped: { default: false },
    value: { default: 0 }
  },
  setup(e) {
    const t = e, a = u(toRef(t, "animated")), l = u(toRef(t, "showProgress")), n = u(toRef(t, "showValue")), r = u(toRef(t, "striped")), d = computed(() => ({
      animated: t.animated,
      max: t.max,
      precision: t.precision,
      showProgress: t.showProgress,
      showValue: t.showValue,
      striped: t.striped,
      value: t.value,
      variant: t.variant
    }));
    return provide(Tl, {
      animated: a.value,
      max: t.max,
      showProgress: l.value,
      showValue: n.value,
      striped: r.value
    }), (c, v) => (openBlock(), createElementBlock("div", {
      class: "progress",
      style: normalizeStyle({ height: e.height })
    }, [
      renderSlot(c.$slots, "default", {}, () => [
        createVNode(kn, normalizeProps(guardReactiveProps(unref(d))), null, 16)
      ])
    ], 4));
  }
});
var Ua = At("cols", [""], { type: [String, Number], default: null });
var Uu = defineComponent({
  name: "BRow",
  props: {
    tag: { type: String, default: "div" },
    gutterX: { type: String, default: null },
    gutterY: { type: String, default: null },
    noGutters: { type: [Boolean, String], default: false },
    alignV: { type: String, default: null },
    alignH: { type: String, default: null },
    alignContent: { type: String, default: null },
    ...Ua
  },
  setup(e) {
    const t = u(toRef(e, "noGutters")), a = dt(toRef(e, "alignH")), l = computed(() => Sl(e, Ua, "cols", "row-cols"));
    return {
      computedClasses: computed(() => [
        l.value,
        {
          [`gx-${e.gutterX}`]: e.gutterX !== null,
          [`gy-${e.gutterY}`]: e.gutterY !== null,
          "g-0": t.value,
          [`align-items-${e.alignV}`]: e.alignV !== null,
          [a.value]: e.alignH !== null,
          [`align-content-${e.alignContent}`]: e.alignContent !== null
        }
      ])
    };
  }
});
function Wu(e, t, a, l, n, r) {
  return openBlock(), createBlock(resolveDynamicComponent(e.tag), {
    class: normalizeClass(["row", e.computedClasses])
  }, {
    default: withCtx(() => [
      renderSlot(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["class"]);
}
var Ku = Te(Uu, [["render", Wu]]);
var ht = defineComponent({
  __name: "BSkeleton",
  props: {
    height: null,
    width: null,
    size: null,
    animation: { default: "wave" },
    type: { default: "text" },
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => [
      `b-skeleton-${t.type}`,
      {
        [`b-skeleton-animate-${t.animation}`]: typeof t.animation == "boolean" ? false : t.animation,
        [`bg-${t.variant}`]: t.variant !== void 0
      }
    ]), l = computed(() => ({
      width: t.size || t.width,
      height: t.size || t.height
    }));
    return (n, r) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["b-skeleton", unref(a)]),
      style: normalizeStyle(unref(l))
    }, null, 6));
  }
});
var Xu = defineComponent({
  __name: "BSkeletonIcon",
  props: {
    animation: { default: "wave" }
  },
  setup(e) {
    const t = e, a = computed(() => [`b-skeleton-animate-${t.animation}`]);
    return (l, n) => (openBlock(), createElementBlock("div", {
      class: normalizeClass(["b-skeleton-icon-wrapper position-relative d-inline-block overflow-hidden", unref(a)])
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var Ju = { key: 0 };
var Qu = { key: 1 };
var Yu = defineComponent({
  __name: "BSkeletonTable",
  props: {
    animation: { default: "wave" },
    columns: { default: 5 },
    hideHeader: { default: false },
    rows: { default: 3 },
    showFooter: { default: false },
    tableProps: null
  },
  setup(e) {
    const t = e, a = u(toRef(t, "hideHeader")), l = u(toRef(t, "showFooter"));
    return (n, r) => (openBlock(), createBlock(It, normalizeProps(guardReactiveProps(e.tableProps)), {
      default: withCtx(() => [
        unref(a) ? createCommentVNode("", true) : (openBlock(), createElementBlock("thead", Ju, [
          createBaseVNode("tr", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(e.columns, (d, c) => (openBlock(), createElementBlock("th", { key: c }, [
              createVNode(ht)
            ]))), 128))
          ])
        ])),
        createBaseVNode("tbody", null, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(e.rows, (d, c) => (openBlock(), createElementBlock("tr", { key: c }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(e.columns, (v, m) => (openBlock(), createElementBlock("td", { key: m }, [
              createVNode(ht, { width: "75%" })
            ]))), 128))
          ]))), 128))
        ]),
        unref(l) ? (openBlock(), createElementBlock("tfoot", Qu, [
          createBaseVNode("tr", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(e.columns, (d, c) => (openBlock(), createElementBlock("th", { key: c }, [
              createVNode(ht)
            ]))), 128))
          ])
        ])) : createCommentVNode("", true)
      ]),
      _: 1
    }, 16));
  }
});
var Zu = defineComponent({
  __name: "BSkeletonWrapper",
  props: {
    loading: { default: false }
  },
  setup(e) {
    const a = u(toRef(e, "loading"));
    return (l, n) => unref(a) ? renderSlot(l.$slots, "loading", { key: 0 }) : renderSlot(l.$slots, "default", { key: 1 });
  }
});
var Wa = [
  "ar",
  "az",
  "ckb",
  "fa",
  "he",
  "ks",
  "lrc",
  "mzn",
  "ps",
  "sd",
  "te",
  "ug",
  "ur",
  "yi"
].map((e) => e.toLowerCase());
var ed = (e) => {
  const t = Bt(e).toLowerCase().replace(Gn, "").split("-"), a = t.slice(0, 2).join("-"), l = t[0];
  return Wa.includes(a) || Wa.includes(l);
};
var td = (e) => Qn ? Rt(e) ? e : { capture: !!e || false } : !!(Rt(e) ? e.capture : e);
var ad = (e, t, a, l) => {
  e && e.addEventListener && e.addEventListener(t, a, td(l));
};
var ld = (e, t, a, l) => {
  e && e.removeEventListener && e.removeEventListener(t, a, l);
};
var Ka = (e, t) => {
  (e ? ad : ld)(...t);
};
var vt = (e, { preventDefault: t = true, propagation: a = true, immediatePropagation: l = false } = {}) => {
  t && e.preventDefault(), a && e.stopPropagation(), l && e.stopImmediatePropagation();
};
var ea = "ArrowDown";
var Sn = "End";
var Cn = "Home";
var wn = "PageDown";
var _n = "PageUp";
var ta = "ArrowUp";
var Xa = 1;
var Ja = 100;
var Qa = 1;
var Ya = 500;
var Za = 100;
var el = 10;
var tl = 4;
var al = [ta, ea, Cn, Sn, _n, wn];
var nd = defineComponent({
  props: {
    ariaControls: { type: String, required: false },
    ariaLabel: { type: String, required: false },
    labelIncrement: { type: String, default: "Increment" },
    labelDecrement: { type: String, default: "Decrement" },
    modelValue: { type: Number, default: null },
    name: { type: String, default: "BFormSpinbutton" },
    disabled: { type: [Boolean, String], default: false },
    placeholder: { type: String, required: false },
    locale: { type: String, default: "locale" },
    form: { type: String, required: false },
    inline: { type: Boolean, default: false },
    size: { type: String, required: false },
    formatterFn: {
      type: Function
    },
    readonly: { type: Boolean, default: false },
    vertical: { type: Boolean, default: false },
    repeatDelay: {
      type: [String, Number],
      default: Ya
    },
    repeatInterval: {
      type: [String, Number],
      default: Za
    },
    repeatStepMultiplier: {
      type: [String, Number],
      default: tl
    },
    repeatThreshold: {
      type: [String, Number],
      default: el
    },
    required: { type: [Boolean, String], default: false },
    step: { type: [String, Number], default: Qa },
    min: { type: [String, Number], default: Xa },
    max: { type: [String, Number], default: Ja },
    wrap: { type: Boolean, default: false },
    state: { type: [Boolean, String], default: null }
  },
  emits: ["update:modelValue", "change"],
  setup(e, { emit: t }) {
    const a = ref(false), l = computed(() => 1), n = () => {
      t("change", d.value);
    }, r = ref(null), d = computed({
      get() {
        return ze(e.modelValue) ? r.value : e.modelValue;
      },
      set(E) {
        ze(e.modelValue) ? r.value = E : t("update:modelValue", E);
      }
    });
    let c, v, m = false;
    const C = computed(() => rt(e.step, Qa)), p = computed(() => rt(e.min, Xa)), g = computed(() => {
      const E = rt(e.max, Ja), N = C.value, J = p.value;
      return Math.floor((E - J) / N) * N + J;
    }), A = computed(() => {
      const E = je(e.repeatDelay, 0);
      return E > 0 ? E : Ya;
    }), w = computed(() => {
      const E = je(e.repeatInterval, 0);
      return E > 0 ? E : Za;
    }), B = computed(
      () => Math.max(je(e.repeatThreshold, el), 1)
    ), S = computed(
      () => Math.max(je(e.repeatStepMultiplier, tl), 1)
    ), h2 = computed(() => {
      const E = C.value;
      return Math.floor(E) === E ? 0 : (E.toString().split(".")[1] || "").length;
    }), $ = computed(() => Math.pow(10, h2.value || 0)), F = computed(() => {
      const { value: E } = d;
      return E === null ? "" : E.toFixed(h2.value);
    }), I = computed(() => {
      const E = [e.locale];
      return new Intl.NumberFormat(E).resolvedOptions().locale;
    }), V = computed(
      () => ed(I.value)
    ), _ = () => {
      const E = h2.value;
      return new Intl.NumberFormat(I.value, {
        style: "decimal",
        useGrouping: false,
        minimumIntegerDigits: 1,
        minimumFractionDigits: E,
        maximumFractionDigits: E,
        notation: "standard"
      }).format;
    }, O = computed(
      () => e.formatterFn ? e.formatterFn : _()
    ), b = computed(() => ({
      role: "group",
      lang: I.value,
      tabindex: e.disabled ? null : "-1",
      title: e.ariaLabel
    })), x = computed(() => !ze(e.modelValue) || !ze(r.value)), H = computed(() => ({
      dir: V.value,
      spinId: l.value,
      tabindex: e.disabled ? null : "0",
      role: "spinbutton",
      "aria-live": "off",
      "aria-label": e.ariaLabel || null,
      "aria-controls": e.ariaControls || null,
      "aria-invalid": e.state === false || !x.value && e.required ? "true" : null,
      "aria-required": e.required ? "true" : null,
      "aria-valuemin": p.value,
      "aria-valuemax": g.value,
      "aria-valuenow": ze(d.value) ? null : d.value,
      "aria-valuetext": ze(d.value) ? null : O.value(d.value)
    })), j = (E) => {
      let { value: N } = d;
      if (!e.disabled && !ze(N)) {
        const J = C.value * E, Q = p.value, be = g.value, ne = $.value, { wrap: ie } = e;
        N = Math.round((N - Q) / J) * J + Q + J, N = Math.round(N * ne) / ne, d.value = N > be ? ie ? Q : be : N < Q ? ie ? be : Q : N;
      }
    }, q = (E = 1) => {
      ze(d.value) ? d.value = p.value : j(1 * E);
    }, K = (E = 1) => {
      ze(d.value) ? d.value = e.wrap ? g.value : p.value : j(-1 * E);
    }, oe = (E) => {
      const { code: N, altKey: J, ctrlKey: Q, metaKey: be } = E;
      if (!(e.disabled || e.readonly || J || Q || be) && al.includes(N)) {
        if (vt(E, { propagation: false }), m)
          return;
        he(), [ta, ea].includes(N) ? (m = true, N === ta ? ge(E, q) : N === ea && ge(E, K)) : N === _n ? q(S.value) : N === wn ? K(S.value) : N === Cn ? d.value = p.value : N === Sn && (d.value = g.value);
      }
    }, Z = (E) => {
      const { code: N, altKey: J, ctrlKey: Q, metaKey: be } = E;
      e.disabled || e.readonly || J || Q || be || al.includes(N) && (vt(E, { propagation: false }), he(), m = false, n());
    }, ge = (E, N) => {
      const { type: J } = E || {};
      if (!e.disabled && !e.readonly) {
        if (ae(E) && J === "mousedown" && E.button)
          return;
        he(), N(1);
        const Q = B.value, be = S.value, ne = A.value, ie = w.value;
        c = setTimeout(() => {
          let Ae = 0;
          v = setInterval(() => {
            N(Ae < Q ? 1 : be), Ae++;
          }, ie);
        }, ne);
      }
    };
    function ae(E) {
      return E.type === "mouseup" || E.type === "mousedown";
    }
    const pe = (E) => {
      ae(E) && E.type === "mouseup" && E.button || (vt(E, { propagation: false }), he(), ye(false), n());
    }, ye = (E) => {
      try {
        Ka(E, [document.body, "mouseup", pe, false]), Ka(E, [document.body, "touchend", pe, false]);
      } catch {
        return 0;
      }
    }, he = () => {
      clearTimeout(c), clearInterval(v), c = void 0, v = void 0;
    }, re = (E, N, J, Q, be, ne, ie) => {
      const Ae = h(J, {
        props: { scale: a.value ? 1.5 : 1.25 },
        attrs: { "aria-hidden": "true" }
      }), Ft = { hasFocus: a.value }, ct = (Me) => {
        !e.disabled && !e.readonly && (vt(Me, { propagation: false }), ye(true), ge(Me, E));
      };
      return h(
        "button",
        {
          class: [{ "py-0": !e.vertical }, "btn", "btn-sm", "border-0", "rounded-0"],
          tabindex: "-1",
          type: "button",
          disabled: e.disabled || e.readonly || ne,
          "aria-disabled": e.disabled || e.readonly || ne ? "true" : null,
          "aria-controls": l.value,
          "aria-label": N || null,
          "aria-keyshortcuts": be || null,
          onmousedown: ct,
          ontouchstart: ct
        },
        [Pe(ie, Ft) || Ae]
      );
    };
    return () => {
      const E = re(
        q,
        e.labelIncrement,
        h(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            width: "16",
            height: "16",
            fill: "currentColor",
            class: "bi bi-plus",
            viewBox: "0 0 16 16"
          },
          h("path", {
            d: "M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"
          })
        ),
        "inc",
        "ArrowUp",
        false,
        "increment"
      ), N = re(
        K,
        e.labelDecrement,
        h(
          "svg",
          {
            xmlns: "http://www.w3.org/2000/svg",
            width: "16",
            height: "16",
            fill: "currentColor",
            class: "bi bi-dash",
            viewBox: "0 0 16 16"
          },
          h("path", { d: "M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z" })
        ),
        "dec",
        "ArrowDown",
        false,
        "decrement"
      ), J = [];
      e.name && !e.disabled && J.push(
        h("input", {
          type: "hidden",
          name: e.name,
          form: e.form || null,
          value: F.value,
          key: "hidden"
        })
      );
      const Q = h(
        "output",
        {
          class: [
            { "d-flex": e.vertical },
            { "align-self-center": !e.vertical },
            { "align-items-center": e.vertical },
            { "border-top": e.vertical },
            { "border-bottom": e.vertical },
            { "border-start": !e.vertical },
            { "border-end": !e.vertical },
            "flex-grow-1"
          ],
          ...H.value,
          key: "output"
        },
        [
          h(
            "bdi",
            x.value ? O.value(d.value) : e.placeholder || ""
          )
        ]
      );
      return h(
        "div",
        {
          class: [
            "b-form-spinbutton form-control",
            { disabled: e.disabled },
            { readonly: e.readonly },
            { focus: a },
            { "d-inline-flex": e.inline || e.vertical },
            { "d-flex": !e.inline && !e.vertical },
            { "align-items-stretch": !e.vertical },
            { "flex-column": e.vertical },
            e.size ? `form-control-${e.size}` : null
          ],
          ...b.value,
          onkeydown: oe,
          onkeyup: Z
        },
        e.vertical ? [E, J, Q, N] : [N, J, Q, E]
      );
    };
  }
});
var od = ["TD", "TH", "TR"];
var sd = [
  "a",
  "a *",
  "button",
  "button *",
  "input:not(.disabled):not([disabled])",
  "select:not(.disabled):not([disabled])",
  "textarea:not(.disabled):not([disabled])",
  '[role="link"]',
  '[role="link"] *',
  '[role="button"]',
  '[role="button"] *',
  "[tabindex]:not(.disabled):not([disabled])"
].join(",");
var mt = (e) => {
  if (!e || !e.target)
    return false;
  const t = e.target;
  if ("disabled" in t && t.disabled || od.indexOf(t.tagName) !== -1)
    return false;
  if (ga(".dropdown-menu", t))
    return true;
  const a = t.tagName === "LABEL" ? t : ga("label", t);
  if (a) {
    const l = ra(a, "for"), n = l ? so(l) : $l("input, select, textarea", a);
    if (n && !n.disabled)
      return true;
  }
  return kl(t, sd);
};
var rd = () => {
  const e = (m, C) => {
    const p = [];
    return !(m != null && m.length) && (C == null ? void 0 : C.length) ? (Object.keys(C[0]).forEach((g) => p.push({ key: g, label: ma(g) })), p) : (Array.isArray(m) && m.forEach((g) => {
      typeof g == "string" ? p.push({ key: g, label: ma(g) }) : Rt(g) && g.key && typeof g.key == "string" && p.push({ ...g });
    }), p);
  }, t = ref([]), a = (m, C, p, g) => (t.value = $t(C), "isFilterableTable" in g && g.isFilterableTable.value === true && p.filter && (t.value = r(t.value, p.filter, p.filterable)), "isSortable" in g && g.isSortable.value === true && (t.value = n(
    m,
    t.value,
    {
      key: p.sortBy,
      desc: g.sortDescBoolean.value
    },
    p.sortCompare
  )), t.value), l = ref(void 0), n = (m, C, p, g) => {
    if (!p || !p.key)
      return C;
    const A = p.key;
    return C.sort((w, B) => {
      if (g !== void 0)
        return g(w, B, p.key, p.desc);
      const S = (F) => typeof F == "object" ? JSON.stringify(F) : F;
      return S(w[A]) > S(B[A]) ? p.desc ? -1 : 1 : S(B[A]) > S(w[A]) ? p.desc ? 1 : -1 : 0;
    });
  }, r = (m, C, p) => m.filter(
    (g) => Object.entries(g).filter((A) => {
      const [w, B] = A;
      return !B || w[0] === "_" || p.length > 0 && !p.includes(w) ? false : (typeof B == "object" ? JSON.stringify(Object.values(B)) : typeof B == "string" ? B : B.toString()).toLowerCase().includes(C.toLowerCase());
    }).length > 0
  );
  return {
    normaliseFields: e,
    mapItems: a,
    internalItems: t,
    updateInternalItems: async (m) => {
      try {
        return t.value = await qt(m), t.value;
      } catch {
        return;
      }
    },
    filterEvent: l,
    notifyFilteredItems: () => {
      l.value && l.value(t.value);
    },
    formatItem: (m, C) => {
      const p = m[C.key];
      return C.formatter && typeof C.formatter == "function" ? C.formatter(p, C.key, m) : m[C.key];
    }
  };
};
var id = ["title", "abbr", "onClick"];
var ud = { class: "d-inline-flex flex-nowrap align-items-center gap-1" };
var dd = { key: 1 };
var cd = ["onClick", "onDblclick", "onMouseenter", "onMouseleave"];
var fd = {
  key: 0,
  class: "b-table-stacked-label"
};
var vd = ["colspan"];
var md = ["colspan"];
var pd = { class: "d-flex align-items-center justify-content-center gap-2" };
var bd = createBaseVNode("strong", null, "Loading...", -1);
var gd = {
  key: 1,
  class: "b-table-empty-slot"
};
var hd = ["colspan"];
var yd = { key: 0 };
var Bd = ["title", "abbr", "onClick"];
var $d = { key: 1 };
var kd = { key: 2 };
var Sd = { key: 3 };
var Cd = defineComponent({
  __name: "BTable",
  props: {
    align: null,
    caption: null,
    captionTop: { default: false },
    borderless: { default: false },
    bordered: { default: false },
    borderVariant: null,
    dark: { default: false },
    fields: { default: () => [] },
    footClone: { default: false },
    hover: { default: false },
    items: { default: () => [] },
    provider: null,
    sortCompare: null,
    noProvider: null,
    noProviderPaging: null,
    noProviderSorting: null,
    noProviderFiltering: null,
    responsive: { type: [Boolean, String], default: false },
    small: { default: false },
    striped: { default: false },
    stacked: { type: [Boolean, String], default: false },
    labelStacked: { type: Boolean, default: false },
    variant: null,
    sortBy: null,
    sortDesc: { default: false },
    sortInternal: { default: true },
    selectable: { default: false },
    stickySelect: { default: false },
    selectHead: { type: [Boolean, String], default: true },
    selectMode: { default: "single" },
    selectionVariant: { default: "primary" },
    stickyHeader: { default: false },
    busy: { default: false },
    showEmpty: { default: false },
    perPage: null,
    currentPage: { default: 1 },
    filter: null,
    filterable: null,
    emptyText: { default: "There are no records to show" },
    emptyFilteredText: { default: "There are no records matching your request" }
  },
  emits: ["headClicked", "rowClicked", "rowDblClicked", "rowHovered", "rowUnhovered", "rowSelected", "rowUnselected", "selection", "update:busy", "update:sortBy", "update:sortDesc", "sorted", "filtered"],
  setup(e, { expose: t, emit: a }) {
    const l = e, n = useSlots(), r = rd(), d = u(toRef(l, "footClone")), c = u(toRef(l, "sortDesc")), v = u(toRef(l, "sortInternal")), m = u(toRef(l, "selectable")), C = u(toRef(l, "stickySelect")), p = u(toRef(l, "labelStacked")), g = u(toRef(l, "busy")), A = u(toRef(l, "showEmpty")), w = u(toRef(l, "noProviderPaging")), B = u(toRef(l, "noProviderSorting")), S = u(toRef(l, "noProviderFiltering")), h2 = ref(g.value);
    r.filterEvent.value = async (T) => {
      if (x.value) {
        await N();
        return;
      }
      const G = await qt(T);
      a("filtered", G);
    };
    const $ = ref(/* @__PURE__ */ new Set([])), F = computed(() => $.value.size > 0), I = computed(() => ({
      [`align-${l.align}`]: l.align !== void 0,
      "b-table-selectable": m.value,
      [`b-table-select-${l.selectMode}`]: m.value,
      "b-table-selecting user-select-none": m.value && F.value,
      "b-table-busy": h2.value,
      "b-table-sortable": j.value,
      "b-table-sort-desc": j.value && c.value === true,
      "b-table-sort-asc": j.value && c.value === false
    })), V = computed(() => ({
      bordered: l.bordered,
      borderless: l.borderless,
      borderVariant: l.borderVariant,
      captionTop: l.captionTop,
      dark: l.dark,
      hover: l.hover,
      responsive: l.responsive,
      striped: l.striped,
      stacked: l.stacked,
      small: l.small,
      tableClass: I.value,
      tableVariant: l.variant,
      stickyHeader: l.stickyHeader
    })), _ = computed(() => r.normaliseFields(l.fields, l.items)), O = computed(
      () => _.value.length + (m.value ? 1 : 0)
    ), b = computed(() => l.filter !== void 0 && l.filter !== ""), x = computed(() => l.provider !== void 0), H = computed(
      () => m.value && (!!l.selectHead || n.selectHead !== void 0)
    ), j = computed(
      () => l.fields.filter((T) => typeof T == "string" ? false : T.sortable).length > 0
    ), q = computed(() => j.value && v.value === true), K = computed(() => {
      const T = x.value ? r.internalItems.value : q.value ? r.mapItems(l.fields, l.items, l, {
        isSortable: j,
        isFilterableTable: b,
        sortDescBoolean: c
      }) : l.items;
      if (l.perPage !== void 0) {
        const G = (l.currentPage - 1) * l.perPage;
        return T.splice(G, l.perPage);
      }
      return T;
    }), oe = (T) => typeof T == "string" ? pa(T) : T.label !== void 0 ? T.label : typeof T.key == "string" ? pa(T.key) : T.key, Z = (T, G, de = false) => {
      const M = typeof T == "string" ? T : T.key;
      a("headClicked", M, T, G, de), he(T);
    }, ge = (T, G, de) => {
      a("rowClicked", T, G, de), E(T, G, de.shiftKey);
    }, ae = (T, G, de) => a("rowDblClicked", T, G, de), pe = (T, G, de) => a("rowHovered", T, G, de), ye = (T, G, de) => a("rowUnhovered", T, G, de), he = (T) => {
      if (!j.value)
        return;
      const G = typeof T == "string" ? T : T.key, de = typeof T == "string" ? false : T.sortable;
      if (j.value === true && de === true) {
        const M = !c.value;
        G !== l.sortBy && a("update:sortBy", G), a("update:sortDesc", M), a("sorted", G, M);
      }
    }, re = () => {
      !m.value || a("selection", Array.from($.value));
    }, E = (T, G, de = false) => {
      if (!!m.value) {
        if ($.value.has(T))
          $.value.delete(T), a("rowUnselected", T);
        else if (l.selectMode === "single" && $.value.size > 0 && ($.value.forEach((M) => a("rowUnselected", M)), $.value.clear()), l.selectMode === "range" && $.value.size > 0 && de) {
          const M = Array.from($.value).pop(), Ce = K.value.findIndex((Ue) => Ue === M), ve = Math.min(Ce, G), Et = Math.max(Ce, G);
          K.value.slice(ve, Et + 1).forEach((Ue) => {
            $.value.has(Ue) || ($.value.add(Ue), a("rowSelected", Ue));
          });
        } else
          $.value.add(T), a("rowSelected", T);
        re();
      }
    }, N = async () => {
      if (!x.value || !l.provider || h2.value)
        return;
      h2.value = true;
      const T = new Proxy(
        {
          currentPage: l.currentPage,
          filter: l.filter,
          sortBy: l.sortBy,
          sortDesc: l.sortDesc,
          perPage: l.perPage
        },
        {
          get(de, M) {
            return M in de ? de[M] : void 0;
          },
          set() {
            return console.error("BTable provider context is a read-only object."), true;
          }
        }
      ), G = l.provider(T, r.updateInternalItems);
      if (G !== void 0) {
        if (G instanceof Promise)
          try {
            const de = await G;
            return Array.isArray(de) ? await r.updateInternalItems(de) : void 0;
          } finally {
            h2.value && (h2.value = false);
          }
        try {
          return await r.updateInternalItems(G);
        } finally {
          h2.value && (h2.value = false);
        }
      }
    }, J = (T) => {
      T._showDetails = !T._showDetails;
    }, Q = (T) => [
      T.class,
      T.thClass,
      T.variant ? `table-${T.variant}` : void 0,
      {
        "b-table-sortable-column": j.value && T.sortable,
        "b-table-sticky-column": T.stickyColumn
      }
    ], be = (T, G) => [
      T.class,
      T.tdClass,
      T.variant ? `table-${T.variant}` : void 0,
      (G == null ? void 0 : G._cellVariants) && (G == null ? void 0 : G._cellVariants[T.key]) ? `table-${G == null ? void 0 : G._cellVariants[T.key]}` : void 0,
      {
        "b-table-sticky-column": T.stickyColumn
      }
    ], ne = (T) => [
      T._rowVariant ? `table-${T._rowVariant}` : null,
      T._rowVariant ? `table-${T._rowVariant}` : null,
      m.value && $.value.has(T) ? `selected table-${l.selectionVariant}` : null
    ], ie = () => {
      if (!m.value)
        return;
      const T = $.value.size > 0 ? Array.from($.value) : [];
      $.value = /* @__PURE__ */ new Set([...K.value]), $.value.forEach((G) => {
        T.includes(G) || a("rowSelected", G);
      }), re();
    }, Ae = () => {
      !m.value || ($.value.forEach((T) => {
        a("rowUnselected", T);
      }), $.value = /* @__PURE__ */ new Set([]), re());
    }, Ft = (T) => {
      if (!m.value)
        return;
      const G = K.value[T];
      !G || $.value.has(G) || ($.value.add(G), a("rowSelected", G), re());
    }, ct = (T) => {
      if (!m.value)
        return;
      const G = K.value[T];
      !G || !$.value.has(G) || ($.value.delete(G), a("rowUnselected", G), re());
    }, Me = async (T, G, de) => {
      if (G === de)
        return;
      const M = (Tn) => l.noProvider && l.noProvider.includes(Tn), Ce = !["currentPage", "perPage"].includes(T), ve = ["currentPage", "perPage"].includes(T) && (M("paging") || w.value === true), Et = ["filter"].includes(T) && (M("filtering") || S.value === true), Ue = ["sortBy", "sortDesc"].includes(T) && (M("sorting") || B.value === true);
      ve || Et || Ue || (await N(), Ce && r.notifyFilteredItems());
    };
    return watch(
      () => l.filter,
      (T, G) => {
        T === G || x.value || T || qt(l.items).then((de) => a("filtered", de));
      }
    ), watch(
      h2,
      () => h2.value !== g.value && a("update:busy", h2.value)
    ), watch(
      g,
      () => h2.value !== g.value && (h2.value = g.value)
    ), watch(
      () => l.filter,
      (T, G) => Me("filter", T, G)
    ), watch(
      () => l.currentPage,
      (T, G) => Me("currentPage", T, G)
    ), watch(
      () => l.perPage,
      (T, G) => Me("perPage", T, G)
    ), watch(
      () => l.sortBy,
      (T, G) => Me("sortBy", T, G)
    ), watch(
      () => l.sortDesc,
      (T, G) => Me("sortDesc", T, G)
    ), onMounted(() => {
      x.value && N();
    }), t({
      selectAllRows: ie,
      clearSelected: Ae,
      selectRow: Ft,
      unselectRow: ct
    }), (T, G) => (openBlock(), createBlock(It, normalizeProps(guardReactiveProps(unref(V))), {
      default: withCtx(() => {
        var de;
        return [
          createBaseVNode("thead", null, [
            T.$slots["thead-top"] ? renderSlot(T.$slots, "thead-top", { key: 0 }) : createCommentVNode("", true),
            createBaseVNode("tr", null, [
              unref(H) ? (openBlock(), createElementBlock("th", {
                key: 0,
                class: normalizeClass(["b-table-selection-column", {
                  "b-table-sticky-column": unref(C)
                }])
              }, [
                renderSlot(T.$slots, "select-head", {}, () => [
                  createTextVNode(toDisplayString(typeof e.selectHead == "boolean" ? "Selected" : e.selectHead), 1)
                ])
              ], 2)) : createCommentVNode("", true),
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(_), (M) => (openBlock(), createElementBlock("th", mergeProps({
                key: M.key,
                scope: "col",
                class: Q(M),
                title: M.headerTitle,
                abbr: M.headerAbbr,
                style: M.thStyle
              }, M.thAttr, {
                onClick: (Ce) => Z(M, Ce)
              }), [
                createBaseVNode("div", ud, [
                  renderSlot(T.$slots, "sort-icon", {
                    field: M,
                    sortBy: e.sortBy,
                    selected: M.key === e.sortBy,
                    isDesc: unref(c),
                    direction: unref(c) ? "desc" : "asc"
                  }, () => [
                    unref(j) && M.sortable ? (openBlock(), createElementBlock("span", {
                      key: 0,
                      class: normalizeClass(["b-table-sort-icon", {
                        sorted: M.key === e.sortBy,
                        [`sorted-${unref(c) ? "desc" : "asc"}`]: M.key === e.sortBy
                      }])
                    }, null, 2)) : createCommentVNode("", true)
                  ]),
                  createBaseVNode("div", null, [
                    T.$slots["head(" + M.key + ")"] || T.$slots["head()"] ? renderSlot(T.$slots, T.$slots["head(" + M.key + ")"] ? "head(" + M.key + ")" : "head()", {
                      key: 0,
                      label: M.label
                    }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createTextVNode(toDisplayString(oe(M)), 1)
                    ], 64))
                  ])
                ])
              ], 16, id))), 128))
            ]),
            T.$slots["thead-sub"] ? (openBlock(), createElementBlock("tr", dd, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(_), (M) => (openBlock(), createElementBlock("td", {
                key: M.key,
                scope: "col",
                class: normalizeClass([M.class, M.thClass, M.variant ? `table-${M.variant}` : ""])
              }, [
                T.$slots["thead-sub"] ? renderSlot(T.$slots, "thead-sub", mergeProps({
                  key: 0,
                  items: unref(_)
                }, M)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(M.label), 1)
                ], 64))
              ], 2))), 128))
            ])) : createCommentVNode("", true)
          ]),
          createBaseVNode("tbody", null, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(K), (M, Ce) => (openBlock(), createElementBlock(Fragment, { key: Ce }, [
              createBaseVNode("tr", {
                class: normalizeClass(ne(M)),
                onClick: (ve) => !unref(mt)(ve) && ge(M, Ce, ve),
                onDblclick: (ve) => !unref(mt)(ve) && ae(M, Ce, ve),
                onMouseenter: (ve) => !unref(mt)(ve) && pe(M, Ce, ve),
                onMouseleave: (ve) => !unref(mt)(ve) && ye(M, Ce, ve)
              }, [
                unref(H) ? (openBlock(), createElementBlock("td", {
                  key: 0,
                  class: normalizeClass(["b-table-selection-column", {
                    "b-table-sticky-column": unref(C)
                  }])
                }, [
                  renderSlot(T.$slots, "select-cell", {}, () => [
                    createBaseVNode("span", {
                      class: normalizeClass($.value.has(M) ? "text-primary" : "")
                    }, "🗹", 2)
                  ])
                ], 2)) : createCommentVNode("", true),
                (openBlock(true), createElementBlock(Fragment, null, renderList(unref(_), (ve) => (openBlock(), createElementBlock("td", mergeProps({
                  key: ve.key
                }, ve.tdAttr, {
                  class: be(ve, M)
                }), [
                  e.stacked && unref(p) ? (openBlock(), createElementBlock("label", fd, toDisplayString(oe(ve)), 1)) : createCommentVNode("", true),
                  T.$slots["cell(" + ve.key + ")"] || T.$slots["cell()"] ? renderSlot(T.$slots, T.$slots["cell(" + ve.key + ")"] ? "cell(" + ve.key + ")" : "cell()", {
                    key: 1,
                    value: M[ve.key],
                    index: Ce,
                    item: M,
                    field: ve,
                    items: e.items,
                    toggleDetails: () => J(M),
                    detailsShowing: M._showDetails
                  }) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                    createTextVNode(toDisplayString(unref(r).formatItem(M, ve)), 1)
                  ], 64))
                ], 16))), 128))
              ], 42, cd),
              M._showDetails === true && T.$slots["row-details"] ? (openBlock(), createElementBlock("tr", {
                key: 0,
                class: normalizeClass(ne(M))
              }, [
                createBaseVNode("td", { colspan: unref(O) }, [
                  renderSlot(T.$slots, "row-details", {
                    item: M,
                    toggleDetails: () => J(M)
                  })
                ], 8, vd)
              ], 2)) : createCommentVNode("", true)
            ], 64))), 128)),
            h2.value ? (openBlock(), createElementBlock("tr", {
              key: 0,
              class: normalizeClass(["b-table-busy-slot", { "b-table-static-busy": unref(K).length === 0 }])
            }, [
              createBaseVNode("td", { colspan: unref(O) }, [
                renderSlot(T.$slots, "table-busy", {}, () => [
                  createBaseVNode("div", pd, [
                    createVNode(Pt, { class: "align-middle" }),
                    bd
                  ])
                ])
              ], 8, md)
            ], 2)) : createCommentVNode("", true),
            unref(A) && unref(K).length === 0 ? (openBlock(), createElementBlock("tr", gd, [
              createBaseVNode("td", { colspan: unref(O) }, [
                renderSlot(T.$slots, "empty", {
                  items: unref(K),
                  filtered: unref(b)
                }, () => [
                  createTextVNode(toDisplayString(unref(b) ? e.emptyFilteredText : e.emptyText), 1)
                ])
              ], 8, hd)
            ])) : createCommentVNode("", true)
          ]),
          unref(d) ? (openBlock(), createElementBlock("tfoot", yd, [
            createBaseVNode("tr", null, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(unref(_), (M) => (openBlock(), createElementBlock("th", mergeProps({
                key: M.key
              }, M.thAttr, {
                scope: "col",
                class: [M.class, M.thClass, M.variant ? `table-${M.variant}` : ""],
                title: M.headerTitle,
                abbr: M.headerAbbr,
                style: M.thStyle,
                onClick: (Ce) => Z(M, Ce, true)
              }), toDisplayString(M.label), 17, Bd))), 128))
            ])
          ])) : T.$slots["custom-foot"] ? (openBlock(), createElementBlock("tfoot", $d, [
            renderSlot(T.$slots, "custom-foot", {
              fields: unref(_),
              items: e.items,
              columns: (de = unref(_)) == null ? void 0 : de.length
            })
          ])) : createCommentVNode("", true),
          T.$slots["table-caption"] ? (openBlock(), createElementBlock("caption", kd, [
            renderSlot(T.$slots, "table-caption")
          ])) : e.caption ? (openBlock(), createElementBlock("caption", Sd, toDisplayString(e.caption), 1)) : createCommentVNode("", true)
        ];
      }),
      _: 3
    }, 16));
  }
});
var wd = defineComponent({
  __name: "BTbody",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`thead-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("tbody", {
      role: "rowgroup",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var _d = ["scope", "colspan", "rowspan", "data-label"];
var Td = { key: 0 };
var Vd = defineComponent({
  __name: "BTd",
  props: {
    colspan: null,
    rowspan: null,
    stackedHeading: null,
    stickyColumn: { default: false },
    variant: null
  },
  setup(e) {
    const t = e, a = u(toRef(t, "stickyColumn")), l = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0,
      "b-table-sticky-column": a.value,
      "table-b-table-default": a.value && t.variant === void 0
    })), n = computed(() => t.colspan ? "colspan" : t.rowspan ? "rowspan" : "col");
    return (r, d) => (openBlock(), createElementBlock("td", {
      role: "cell",
      scope: unref(n),
      class: normalizeClass(unref(l)),
      colspan: e.colspan,
      rowspan: e.rowspan,
      "data-label": e.stackedHeading
    }, [
      e.stackedHeading ? (openBlock(), createElementBlock("div", Td, [
        renderSlot(r.$slots, "default")
      ])) : renderSlot(r.$slots, "default", { key: 1 })
    ], 10, _d));
  }
});
var Ad = defineComponent({
  __name: "BTfoot",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("tfoot", {
      role: "rowgroup",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var Od = ["scope", "colspan", "rowspan", "data-label"];
var xd = { key: 0 };
var Pd = defineComponent({
  __name: "BTh",
  props: {
    colspan: null,
    rowspan: null,
    stackedHeading: null,
    stickyColumn: { default: false },
    variant: null
  },
  setup(e) {
    const t = e, a = u(toRef(t, "stickyColumn")), l = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0,
      "b-table-sticky-column": a.value,
      "table-b-table-default": a.value && t.variant === void 0
    })), n = computed(() => t.colspan ? "colspan" : t.rowspan ? "rowspan" : "col");
    return (r, d) => (openBlock(), createElementBlock("th", {
      role: "columnheader",
      scope: unref(n),
      class: normalizeClass(unref(l)),
      colspan: e.colspan,
      rowspan: e.rowspan,
      "data-label": e.stackedHeading
    }, [
      e.stackedHeading !== void 0 ? (openBlock(), createElementBlock("div", xd, [
        renderSlot(r.$slots, "default")
      ])) : renderSlot(r.$slots, "default", { key: 1 })
    ], 10, Od));
  }
});
var Id = defineComponent({
  __name: "BThead",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("thead", {
      role: "rowgroup",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var Fd = defineComponent({
  __name: "BTr",
  props: {
    variant: null
  },
  setup(e) {
    const t = e, a = computed(() => ({
      [`table-${t.variant}`]: t.variant !== void 0
    }));
    return (l, n) => (openBlock(), createElementBlock("tr", {
      role: "row",
      class: normalizeClass(unref(a))
    }, [
      renderSlot(l.$slots, "default")
    ], 2));
  }
});
var Ed = defineComponent({
  __name: "BTab",
  props: {
    id: null,
    title: null,
    active: { default: false },
    buttonId: { default: void 0 },
    disabled: { default: false },
    lazy: { default: void 0 },
    lazyOnce: { default: void 0 },
    noBody: { type: [Boolean, String], default: false },
    tag: { default: "div" },
    titleItemClass: null,
    titleLinkAttributes: { default: void 0 },
    titleLinkClass: null
  },
  setup(e) {
    const t = e, a = inject(wl), l = u(toRef(t, "active")), n = u(toRef(t, "disabled")), r = u(toRef(t, t.lazyOnce !== void 0 ? "lazyOnce" : "lazy")), d = ref(false), c = computed(() => !!((a == null ? void 0 : a.lazy) || r.value)), v = computed(() => t.lazyOnce !== void 0), m = computed(() => l.value && !n.value), C = computed(() => {
      const g = c.value && v.value && d.value;
      return m.value || !c.value || g;
    }), p = computed(() => ({
      active: l.value,
      show: l.value,
      "card-body": (a == null ? void 0 : a.card) && t.noBody === false
    }));
    return watch(C, (g) => {
      g && !d.value && (d.value = true);
    }), (g, A) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      class: normalizeClass(["tab-pane", unref(p)]),
      role: "tabpanel",
      "aria-labelledby": "profile-tab"
    }, {
      default: withCtx(() => [
        unref(C) ? renderSlot(g.$slots, "default", { key: 0 }) : createCommentVNode("", true)
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var Ld = ["id", "data-bs-target", "aria-controls", "aria-selected", "onClick"];
var zd = defineComponent({
  __name: "BTabs",
  props: {
    activeNavItemClass: null,
    activeTabClass: null,
    align: null,
    card: { default: false },
    contentClass: null,
    end: { default: false },
    fill: { default: false },
    id: null,
    justified: { default: false },
    lazy: { default: false },
    navClass: null,
    navWrapperClass: null,
    noFade: { default: false },
    noNavStyle: { default: false },
    pills: { default: false },
    small: { default: false },
    tag: { default: "div" },
    vertical: { default: false },
    modelValue: { default: -1 }
  },
  emits: ["update:modelValue", "activate-tab", "click"],
  setup(e, { emit: t }) {
    const a = e, l = useSlots(), n = u(toRef(a, "card")), r = u(toRef(a, "end")), d = u(toRef(a, "fill")), c = u(toRef(a, "justified")), v = u(toRef(a, "lazy")), m = u(toRef(a, "noFade")), C = u(toRef(a, "noNavStyle")), p = u(toRef(a, "pills")), g = u(toRef(a, "small")), A = u(toRef(a, "vertical")), w = ref(a.modelValue), B = ref(""), S = computed({
      get: () => w.value,
      set: (b) => {
        w.value = b, h2.value.length > 0 && b >= 0 && b < h2.value.length ? B.value = h2.value[b].buttonId : B.value = "", t("update:modelValue", b);
      }
    }), h2 = computed(
      () => l.default === void 0 ? [] : Gt(l.default, "BTab").map((b, x) => {
        b.props || (b.props = {});
        const H = b.props["button-id"] || Re("tab"), j = b.props.id || Re(), q = S.value > -1 ? x === S.value : b.props.active === "", K = b.props["title-item-class"], oe = b.props["title-link-attributes"];
        return {
          buttonId: H,
          contentId: j,
          active: q,
          disabled: b.props.disabled === "" || b.props.disabled === true,
          navItemClasses: [
            {
              active: q,
              disabled: b.props.disabled === "" || b.props.disabled === true
            },
            q && a.activeNavItemClass ? a.activeNavItemClass : null,
            b.props["title-link-class"]
          ],
          tabClasses: [
            {
              fade: !m.value
            },
            q && a.activeTabClass ? a.activeTabClass : null
          ],
          target: `#${j}`,
          title: b.props.title,
          titleItemClass: K,
          titleLinkAttributes: oe,
          onClick: b.props.onClick,
          tab: b,
          tabComponent: () => Gt(l.default, "BTab")[x]
        };
      })
    ), $ = computed(() => !((h2 == null ? void 0 : h2.value) && h2.value.length > 0)), F = computed(() => ({
      "d-flex": A.value,
      "align-items-start": A.value
    })), I = dt(toRef(a, "align")), V = computed(() => ({
      "nav-pills": p.value,
      "flex-column me-3": A.value,
      [I.value]: a.align !== void 0,
      "nav-fill": d.value,
      "card-header-tabs": n.value,
      "nav-justified": c.value,
      "nav-tabs": !C.value && !p.value,
      small: g.value
    })), _ = (b) => {
      let x = false;
      if (b !== void 0 && b > -1 && b < h2.value.length && !h2.value[b].disabled && (S.value < 0 || h2.value[b].buttonId !== B.value)) {
        const H = new De("activate-tab", { cancelable: true });
        t("activate-tab", b, S.value, H), H.defaultPrevented || (S.value = b, x = true);
      }
      return !x && a.modelValue !== S.value && t("update:modelValue", S.value), x;
    }, O = (b, x) => {
      var H;
      _(x), x >= 0 && !h2.value[x].disabled && ((H = h2.value[x]) == null ? void 0 : H.onClick) && typeof h2.value[x].onClick == "function" && h2.value[x].onClick(b);
    };
    return _(w.value), watch(
      () => a.modelValue,
      (b, x) => {
        if (b === x)
          return;
        if (b = Math.max(b, -1), x = Math.max(x, -1), h2.value.length <= 0) {
          S.value = -1;
          return;
        }
        const H = b > x;
        let j = b;
        const q = h2.value.length - 1;
        for (; j >= 0 && j <= q && h2.value[j].disabled; )
          j += H ? 1 : -1;
        if (j < 0) {
          _(0);
          return;
        }
        if (j >= h2.value.length) {
          _(h2.value.length - 1);
          return;
        }
        _(j);
      }
    ), watch(h2, () => {
      let b = h2.value.map((x) => x.active && !x.disabled).lastIndexOf(true);
      b < 0 && (S.value >= h2.value.length ? b = h2.value.map((x) => !x.disabled).lastIndexOf(true) : h2.value[S.value] && !h2.value[S.value].disabled && (b = S.value)), b < 0 && (b = h2.value.map((x) => !x.disabled).indexOf(true)), h2.value.forEach((x, H) => x.active = H === b), _(b);
    }), onMounted(() => {
      if (S.value < 0 && h2.value.length > 0 && !h2.value.some((b) => b.active)) {
        const b = h2.value.map((x) => !x.disabled).indexOf(true);
        _(b >= 0 ? b : -1);
      }
    }), provide(wl, {
      lazy: v.value,
      card: n.value
    }), (b, x) => (openBlock(), createBlock(resolveDynamicComponent(e.tag), {
      id: e.id,
      class: normalizeClass(["tabs", unref(F)])
    }, {
      default: withCtx(() => [
        unref(r) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["tab-content", e.contentClass])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(h2), ({ tabComponent: H, contentId: j, tabClasses: q, active: K }, oe) => (openBlock(), createBlock(resolveDynamicComponent(H()), {
            id: j,
            key: oe,
            class: normalizeClass(q),
            active: K
          }, null, 8, ["id", "class", "active"]))), 128)),
          unref($) ? (openBlock(), createElementBlock("div", {
            key: "bv-empty-tab",
            class: normalizeClass(["tab-pane active", { "card-body": unref(n) }])
          }, [
            renderSlot(b.$slots, "empty")
          ], 2)) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass([e.navWrapperClass, { "card-header": unref(n), "ms-auto": e.vertical && unref(r) }])
        }, [
          createBaseVNode("ul", {
            class: normalizeClass(["nav", [unref(V), e.navClass]]),
            role: "tablist"
          }, [
            renderSlot(b.$slots, "tabs-start"),
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(h2), ({ tab: H, buttonId: j, contentId: q, navItemClasses: K, active: oe, target: Z }, ge) => {
              var ae, pe, ye;
              return openBlock(), createElementBlock("li", {
                key: ge,
                class: normalizeClass(["nav-item", (ae = H == null ? void 0 : H.props) == null ? void 0 : ae["title-item-class"]]),
                role: "presentation"
              }, [
                createBaseVNode("button", mergeProps({
                  id: j,
                  class: ["nav-link", K],
                  "data-bs-toggle": "tab",
                  "data-bs-target": Z,
                  role: "tab",
                  "aria-controls": q,
                  "aria-selected": oe
                }, (pe = H == null ? void 0 : H.props) == null ? void 0 : pe["title-link-attributes"], {
                  onClick: withModifiers((he) => O(he, ge), ["stop", "prevent"])
                }), [
                  H.children && H.children.title ? (openBlock(), createBlock(resolveDynamicComponent(H.children.title), { key: 0 })) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString((ye = H == null ? void 0 : H.props) == null ? void 0 : ye.title), 1)
                  ], 64))
                ], 16, Ld)
              ], 2);
            }), 128)),
            renderSlot(b.$slots, "tabs-end")
          ], 2)
        ], 2),
        unref(r) ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(["tab-content", e.contentClass])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(unref(h2), ({ tabComponent: H, contentId: j, tabClasses: q, active: K }, oe) => (openBlock(), createBlock(resolveDynamicComponent(H()), {
            id: j,
            key: oe,
            class: normalizeClass(q),
            active: K
          }, null, 8, ["id", "class", "active"]))), 128)),
          unref($) ? (openBlock(), createElementBlock("div", {
            key: "bv-empty-tab",
            class: normalizeClass(["tab-pane active", { "card-body": unref(n) }])
          }, [
            renderSlot(b.$slots, "empty")
          ], 2)) : createCommentVNode("", true)
        ], 2))
      ]),
      _: 3
    }, 8, ["id", "class"]));
  }
});
var Nd = Object.freeze(Object.defineProperty({
  __proto__: null,
  BAccordion: rs,
  BAccordionItem: ks,
  BAlert: xs,
  BAvatar: Es,
  BAvatarGroup: Ls,
  BBadge: Ds,
  BBreadcrumb: qs,
  BBreadcrumbItem: Yl,
  BButton: et,
  BButtonGroup: Gs,
  BButtonToolbar: Ws,
  BCloseButton: nt,
  BCard: on,
  BCardBody: ln,
  BCardFooter: nn,
  BCardGroup: Xs,
  BCardHeader: en,
  BCardImg: _t,
  BCardSubtitle: an,
  BCardText: Js,
  BCardTitle: tn,
  BCarousel: or,
  BCarouselSlide: dr,
  BCol: st,
  BCollapse: Jl,
  BContainer: hr,
  BDropdown: dn,
  BDropdownDivider: kr,
  BDropdownForm: Tr,
  BDropdownGroup: xr,
  BDropdownHeader: Er,
  BDropdownItem: zr,
  BDropdownItemButton: Hr,
  BDropdownText: jr,
  BForm: cn,
  BFormFloatingLabel: Wr,
  BFormInvalidFeedback: Qt,
  BFormRow: gt,
  BFormText: Yt,
  BFormValidFeedback: Zt,
  BFormCheckbox: fn,
  BFormCheckboxGroup: ei,
  BFormGroup: ii,
  BFormInput: fi,
  BFormRadio: mn,
  BFormRadioGroup: hi,
  BFormSelect: ki,
  BFormSelectOption: fa,
  BFormSelectOptionGroup: pn,
  BFormTag: bn,
  BFormTags: zi,
  BFormTextarea: Mi,
  BImg: ca,
  BInputGroup: Ki,
  BInputGroupAddon: va,
  BInputGroupAppend: Xi,
  BInputGroupPrepend: Ji,
  BInputGroupText: gn,
  BLink: Ve,
  BListGroup: Qi,
  BListGroupItem: Yi,
  BModal: lu,
  BNav: nu,
  BNavForm: ou,
  BNavItem: uu,
  BNavItemDropdown: cu,
  BNavText: vu,
  BNavbar: mu,
  BNavbarBrand: gu,
  BNavbarNav: hu,
  BNavbarToggle: Bu,
  BOffcanvas: wu,
  BOverlay: hn,
  BPagination: Fu,
  BPlaceholder: xe,
  BPlaceholderButton: $n,
  BPlaceholderCard: Eu,
  BPlaceholderTable: Lu,
  BPlaceholderWrapper: zu,
  BPopover: ju,
  BProgress: Gu,
  BProgressBar: kn,
  BRow: Ku,
  BSkeleton: ht,
  BSkeletonIcon: Xu,
  BSkeletonTable: Yu,
  BSkeletonWrapper: Zu,
  BSpinner: Pt,
  BFormSpinButton: nd,
  BTable: Cd,
  BTableSimple: It,
  BTbody: wd,
  BTd: Vd,
  BTfoot: Ad,
  BTh: Pd,
  BThead: Id,
  BTr: Fd,
  BTab: Ed,
  BTabs: zd,
  BToastContainer: Jt,
  BTransition: lt,
  BToast: un,
  BToaster: Jt,
  BToastPlugin: br
}, Symbol.toStringTag, { value: "Module" }));
var Dd = Object.freeze(Object.defineProperty({
  __proto__: null,
  vBColorMode: is,
  vBPopover: us,
  vBToggle: da,
  vBTooltip: ps,
  vBVisible: gs
}, Symbol.toStringTag, { value: "Module" }));
var jd = Object.freeze(Object.defineProperty({
  __proto__: null,
  useBreadcrumb: Hl,
  useColorMode: os
}, Symbol.toStringTag, { value: "Module" }));
var qd = Object.freeze(Object.defineProperty({
  __proto__: null,
  BvEvent: De,
  BvTriggerableEvent: oa,
  BvCarouselEvent: cl
}, Symbol.toStringTag, { value: "Module" }));
var Gd = Object.freeze(Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: "Module" }));
var Ud = {
  install(e, t = {}) {
    Object.entries(Nd).forEach(([a, l]) => {
      e.component(a, l);
    }), Object.entries(Dd).forEach(([a, l]) => {
      e.directive(a, l);
    }), ns(e);
  }
};
export {
  rs as BAccordion,
  ks as BAccordionItem,
  xs as BAlert,
  Es as BAvatar,
  Ls as BAvatarGroup,
  Ds as BBadge,
  qs as BBreadcrumb,
  Yl as BBreadcrumbItem,
  et as BButton,
  Gs as BButtonGroup,
  Ws as BButtonToolbar,
  on as BCard,
  ln as BCardBody,
  nn as BCardFooter,
  Xs as BCardGroup,
  en as BCardHeader,
  _t as BCardImg,
  an as BCardSubtitle,
  Js as BCardText,
  tn as BCardTitle,
  or as BCarousel,
  dr as BCarouselSlide,
  nt as BCloseButton,
  st as BCol,
  Jl as BCollapse,
  hr as BContainer,
  dn as BDropdown,
  kr as BDropdownDivider,
  Tr as BDropdownForm,
  xr as BDropdownGroup,
  Er as BDropdownHeader,
  zr as BDropdownItem,
  Hr as BDropdownItemButton,
  jr as BDropdownText,
  cn as BForm,
  fn as BFormCheckbox,
  ei as BFormCheckboxGroup,
  Wr as BFormFloatingLabel,
  ii as BFormGroup,
  fi as BFormInput,
  Qt as BFormInvalidFeedback,
  mn as BFormRadio,
  hi as BFormRadioGroup,
  gt as BFormRow,
  ki as BFormSelect,
  fa as BFormSelectOption,
  pn as BFormSelectOptionGroup,
  nd as BFormSpinButton,
  bn as BFormTag,
  zi as BFormTags,
  Yt as BFormText,
  Mi as BFormTextarea,
  Zt as BFormValidFeedback,
  ca as BImg,
  Ki as BInputGroup,
  va as BInputGroupAddon,
  Xi as BInputGroupAppend,
  Ji as BInputGroupPrepend,
  gn as BInputGroupText,
  Ve as BLink,
  Qi as BListGroup,
  Yi as BListGroupItem,
  lu as BModal,
  nu as BNav,
  ou as BNavForm,
  uu as BNavItem,
  cu as BNavItemDropdown,
  vu as BNavText,
  mu as BNavbar,
  gu as BNavbarBrand,
  hu as BNavbarNav,
  Bu as BNavbarToggle,
  wu as BOffcanvas,
  hn as BOverlay,
  Fu as BPagination,
  xe as BPlaceholder,
  $n as BPlaceholderButton,
  Eu as BPlaceholderCard,
  Lu as BPlaceholderTable,
  zu as BPlaceholderWrapper,
  ju as BPopover,
  Gu as BProgress,
  kn as BProgressBar,
  Ku as BRow,
  ht as BSkeleton,
  Xu as BSkeletonIcon,
  Yu as BSkeletonTable,
  Zu as BSkeletonWrapper,
  Pt as BSpinner,
  Ed as BTab,
  Cd as BTable,
  It as BTableSimple,
  zd as BTabs,
  wd as BTbody,
  Vd as BTd,
  Ad as BTfoot,
  Pd as BTh,
  Id as BThead,
  un as BToast,
  Jt as BToastContainer,
  br as BToastPlugin,
  Jt as BToaster,
  Fd as BTr,
  lt as BTransition,
  Ud as BootstrapVueNext,
  cl as BvCarouselEvent,
  De as BvEvent,
  oa as BvTriggerableEvent,
  Nd as Components,
  jd as Composables,
  Dd as Directives,
  Gd as Types,
  qd as Utils,
  Ud as default,
  Hl as useBreadcrumb,
  os as useColorMode,
  rn as useToast,
  is as vBColorMode,
  us as vBPopover,
  da as vBToggle,
  ps as vBTooltip,
  gs as vBVisible
};
/*! Bundled license information:

bootstrap/dist/js/bootstrap.esm.js:
  (*!
    * Bootstrap v5.2.3 (https://getbootstrap.com/)
    * Copyright 2011-2022 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
    *)
*/
//# sourceMappingURL=bootstrap-vue-next.js.map
